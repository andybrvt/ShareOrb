[{"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/index.js":"1","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/App.js":"2","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/serviceWorker.js":"3","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/reducers/nav.js":"4","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/reducers/auth.js":"5","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/reducers/messages.js":"6","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/reducers/calendarEvent.js":"7","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/reducers/eventSync.js":"8","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/reducers/newsfeed.js":"9","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/reducers/explore.js":"10","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/reducers/calendars.js":"11","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/reducers/socialCalendar.js":"12","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/reducers/notifications.js":"13","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/LoginRoutes.js":"14","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/routes.js":"15","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/websocket.js":"16","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/notificationWebsocket.js":"17","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/postWebsocket.js":"18","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/calendarEventWebsocket.js":"19","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/newChatWebsocket.js":"20","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/exploreWebsocket.js":"21","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/UserPostPageWebsocket.js":"22","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/eventPageWebsocket.js":"23","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/newChatSidePanelWebsocket.js":"24","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/socialCalCellWebsocket.js":"25","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/socialEventPageWebsocket.js":"26","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/actions/nav.js":"27","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/actions/notifications.js":"28","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/actions/explore.js":"29","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/actions/messages.js":"30","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/actions/socialCalendar.js":"31","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/actions/newsfeed.js":"32","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/actions/auth.js":"33","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/Popup.js":"34","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/actions/calendars.js":"35","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/actions/actionTypes.js":"36","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/utility.js":"37","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NewsFeedView.js":"38","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/403.jsx":"39","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/LoginPage/Login.js":"40","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/SideMenu/SideMenu.js":"41","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EventPage/EventPage.js":"42","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/AllUsersNotCurrNotCurrFriends.js":"43","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/Signup.js":"44","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/Explore.js":"45","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/ArticleDetailView.js":"46","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/InfiniteScroll.js":"47","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/FriendsList.js":"48","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/Chat.js":"49","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/Notifications.js":"50","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/FriendRequestList.js":"51","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/util.js":"52","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/MonthCalendar.js":"53","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/YearCalendar.js":"54","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/ProfileCardNewsFeed.js":"55","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/DayCalendar.js":"56","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/WeekCalendar.js":"57","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/UserProfiles/ViewAnyUserProfile.js":"58","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/UserProfiles/PersonalProfile.js":"59","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NewChatFolder/NewChat.js":"60","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/SocialCalendarFolder/SocialCalCellPage.js":"61","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/SocialCalendarFolder/SocialEventPage/SocialEventPage.js":"62","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/SocialCalendarFolder/SocialCalCellModal.js":"63","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/UserPostTabFolder/UserPostList.js":"64","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/UserPostTabFolder/PersonalProfilePostList.js":"65","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/PostPageFolder/UserPostModal.js":"66","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/UserEventTabFolder/PersonalProfileEventList.js":"67","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/AddFriends.js":"68","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/Layouts/SuggestedFriends.js":"69","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/todayEvents.js":"70","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EventPage/EventInfo.js":"71","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EventPage/EventGroupChat.js":"72","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/Form.js":"73","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NotificationsDropDown.js":"74","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EventPage/DetailEditEventForm.js":"75","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/UserEventTabFolder/UserEventList.js":"76","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/UserProfiles/FollowList.js":"77","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EditCalEventForms/RemoveEventModal.js":"78","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/UserProfiles/EditProfile/EditProfileForm.js":"79","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/CurrUser/ChangeProfilePic.js":"80","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NewsfeedItems/Liking.js":"81","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NotificationFolder/PendingSocialPicsModal.js":"82","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NotificationFolder/PendingSocialEventModal.js":"83","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/actions/eventSync.js":"84","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EventSyncForms/PickEventSyncModal.js":"85","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NewsfeedItems/UserAvatar.js":"86","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NotificationFolder/PendingPictureCarousel.js":"87","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/SocialCalendarFolder/PictureCarousel.js":"88","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EventSyncForms/PickEventSyncForm.js":"89","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EventSyncForms/PickEventSyncDay.js":"90","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EventSyncForms/PickEventSyncWeek.js":"91","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EventSyncForms/PickEventSyncUserProfileCard.js":"92","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EventPage/ChangeBackgroundModal.js":"93","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/actions/calendarEvent.js":"94","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EventPage/AcceptShareModal.js":"95","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EditCalEventForms/ReduxEditEventForm.js":"96","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/PostPageFolder/UserPostPage.js":"97","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/SocialCalendarFolder/SocialEventPage/SocialEventGroupChat.js":"98","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/SocialCalendarFolder/SocialEventPage/SocialEventInfo.js":"99","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/SocialCalendarFolder/SocialEventList.js":"100","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/SocialCalendarFolder/SocialComments.js":"101","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NewChatFolder/NoChatsScreen.js":"102","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NewChatFolder/CurChatManager.js":"103","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NewChatFolder/AddNewChatContent.js":"104","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NewChatFolder/ManageChatHeader.js":"105","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NewChatFolder/NewChatHeader.js":"106","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NewChatFolder/NewSidePanel.js":"107","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NewChatFolder/NewChatContent.js":"108","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/UserProfiles/ConfirmAddFriend.js":"109","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/UserProfiles/ConfirmUnfriend.js":"110","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/SocialCalendarFolder/SocialCalendar.js":"111","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/CalendarViewDropDown.js":"112","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EventSyncForms/EventSyncModal.js":"113","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/MiniCalendar.js":"114","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EditCalEventForms/EditEventPopUp.js":"115","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/AddCalEventForms/EventModal.js":"116","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/FriendsProfileCard.js":"117","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NewsfeedItems/NewsFeedPost.js":"118","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/ChatComponents/Toppanel.js":"119","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/ChatComponents/Sidepanel.js":"120","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/UserProfiles/UserProfileCard.js":"121","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/Layouts/Layouts.js":"122","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/PostPageFolder/PostPicCarousel.js":"123","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/PostPageFolder/UserPostComments.js":"124","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/SocialCalendarFolder/SocialEventPage/DeleteSocialEventModal.js":"125","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/AvatarGroups.js":"126","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/SocialCalendarFolder/SocialEventPage/EditSocialEventForm.js":"127","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NewChatFolder/ChatManagerFolder/CurChatEventList.js":"128","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/NewNewsfeedFormPost.js":"129","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/Forms2.js":"130","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/NewsFeedFormPost.js":"131","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/SocialCalendarFolder/SocialCellCoverEvents.js":"132","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/SocialCalendarFolder/SocialEventPostModal.js":"133","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/SocialCalendarFolder/SocialUploadPicModal.js":"134","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/comments/comments.js":"135","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/comments/PreviewComments.js":"136","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EventSyncForms/EventSyncReactForm.js":"137","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/AddCalEventForms/CalendarForm.js":"138","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/AddCalEventForms/ReduxAddEventForm.js":"139","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/AddCalEventForms/ReactAddEventForm.js":"140","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NewsfeedItems/LikeList.js":"141","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/ChatComponents/Contacts.js":"142","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EventSyncForms/DetailSwitch.js":"143","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/api.js":"144","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NewChatFolder/ChatManagerFolder/CreateShareEventChat.js":"145"},{"size":2096,"mtime":1607132454700,"results":"146","hashOfConfig":"147"},{"size":10622,"mtime":1608709218314,"results":"148","hashOfConfig":"147"},{"size":5085,"mtime":1606542854559,"results":"149","hashOfConfig":"147"},{"size":678,"mtime":1606542854559,"results":"150","hashOfConfig":"147"},{"size":2479,"mtime":1608451535087,"results":"151","hashOfConfig":"147"},{"size":1206,"mtime":1608451535087,"results":"152","hashOfConfig":"147"},{"size":2940,"mtime":1606542854559,"results":"153","hashOfConfig":"147"},{"size":1756,"mtime":1606542854559,"results":"154","hashOfConfig":"147"},{"size":3747,"mtime":1606542854559,"results":"155","hashOfConfig":"147"},{"size":2935,"mtime":1606542854559,"results":"156","hashOfConfig":"147"},{"size":7885,"mtime":1608570793440,"results":"157","hashOfConfig":"147"},{"size":4808,"mtime":1606542854559,"results":"158","hashOfConfig":"147"},{"size":1652,"mtime":1606542854559,"results":"159","hashOfConfig":"147"},{"size":412,"mtime":1606542854523,"results":"160","hashOfConfig":"147"},{"size":6840,"mtime":1608709224646,"results":"161","hashOfConfig":"147"},{"size":4893,"mtime":1606542854559,"results":"162","hashOfConfig":"147"},{"size":4507,"mtime":1608256845960,"results":"163","hashOfConfig":"147"},{"size":5402,"mtime":1606542854559,"results":"164","hashOfConfig":"147"},{"size":5760,"mtime":1608570793436,"results":"165","hashOfConfig":"147"},{"size":4135,"mtime":1608492948782,"results":"166","hashOfConfig":"147"},{"size":13365,"mtime":1608256845960,"results":"167","hashOfConfig":"147"},{"size":4270,"mtime":1606542854523,"results":"168","hashOfConfig":"147"},{"size":5900,"mtime":1606542854555,"results":"169","hashOfConfig":"147"},{"size":5461,"mtime":1608623450624,"results":"170","hashOfConfig":"147"},{"size":7579,"mtime":1606542854559,"results":"171","hashOfConfig":"147"},{"size":6172,"mtime":1606542854559,"results":"172","hashOfConfig":"147"},{"size":221,"mtime":1606542854559,"results":"173","hashOfConfig":"147"},{"size":710,"mtime":1606542854559,"results":"174","hashOfConfig":"147"},{"size":2038,"mtime":1606542854559,"results":"175","hashOfConfig":"147"},{"size":1111,"mtime":1608451535079,"results":"176","hashOfConfig":"147"},{"size":2928,"mtime":1606542854559,"results":"177","hashOfConfig":"147"},{"size":1439,"mtime":1606542854559,"results":"178","hashOfConfig":"147"},{"size":7403,"mtime":1608341738471,"results":"179","hashOfConfig":"147"},{"size":502,"mtime":1606542854555,"results":"180","hashOfConfig":"147"},{"size":4186,"mtime":1606542854559,"results":"181","hashOfConfig":"147"},{"size":6367,"mtime":1608341738471,"results":"182","hashOfConfig":"147"},{"size":198,"mtime":1606542854559,"results":"183","hashOfConfig":"147"},{"size":6690,"mtime":1608709292082,"results":"184","hashOfConfig":"147"},{"size":342,"mtime":1606542854539,"results":"185","hashOfConfig":"147"},{"size":3663,"mtime":1606542854539,"results":"186","hashOfConfig":"147"},{"size":11980,"mtime":1608623450604,"results":"187","hashOfConfig":"147"},{"size":2587,"mtime":1606542854551,"results":"188","hashOfConfig":"147"},{"size":2512,"mtime":1606542854539,"results":"189","hashOfConfig":"147"},{"size":6421,"mtime":1606542854555,"results":"190","hashOfConfig":"147"},{"size":3417,"mtime":1606542854539,"results":"191","hashOfConfig":"147"},{"size":2812,"mtime":1606542854539,"results":"192","hashOfConfig":"147"},{"size":3170,"mtime":1608691750157,"results":"193","hashOfConfig":"147"},{"size":1393,"mtime":1606542854539,"results":"194","hashOfConfig":"147"},{"size":7199,"mtime":1606542854539,"results":"195","hashOfConfig":"147"},{"size":8293,"mtime":1606542854543,"results":"196","hashOfConfig":"147"},{"size":1956,"mtime":1606542854523,"results":"197","hashOfConfig":"147"},{"size":199,"mtime":1606542854539,"results":"198","hashOfConfig":"147"},{"size":37394,"mtime":1606546224831,"results":"199","hashOfConfig":"147"},{"size":10524,"mtime":1606546224831,"results":"200","hashOfConfig":"147"},{"size":3825,"mtime":1607132454680,"results":"201","hashOfConfig":"147"},{"size":33790,"mtime":1608256782092,"results":"202","hashOfConfig":"147"},{"size":44177,"mtime":1608582492278,"results":"203","hashOfConfig":"147"},{"size":3853,"mtime":1606542854523,"results":"204","hashOfConfig":"147"},{"size":23510,"mtime":1608714784521,"results":"205","hashOfConfig":"147"},{"size":10009,"mtime":1608623450624,"results":"206","hashOfConfig":"147"},{"size":12669,"mtime":1608748660349,"results":"207","hashOfConfig":"147"},{"size":5092,"mtime":1606542854555,"results":"208","hashOfConfig":"147"},{"size":786,"mtime":1608451535035,"results":"209","hashOfConfig":"147"},{"size":3527,"mtime":1608256845960,"results":"210","hashOfConfig":"147"},{"size":21858,"mtime":1608451535051,"results":"211","hashOfConfig":"147"},{"size":742,"mtime":1606542854523,"results":"212","hashOfConfig":"147"},{"size":22467,"mtime":1608451535051,"results":"213","hashOfConfig":"147"},{"size":3606,"mtime":1606542854539,"results":"214","hashOfConfig":"147"},{"size":4027,"mtime":1607132454700,"results":"215","hashOfConfig":"147"},{"size":837,"mtime":1606542854555,"results":"216","hashOfConfig":"147"},{"size":29433,"mtime":1608626403865,"results":"217","hashOfConfig":"147"},{"size":5762,"mtime":1608570950191,"results":"218","hashOfConfig":"147"},{"size":2323,"mtime":1606542854523,"results":"219","hashOfConfig":"147"},{"size":34548,"mtime":1608256845960,"results":"220","hashOfConfig":"147"},{"size":25030,"mtime":1606546224831,"results":"221","hashOfConfig":"147"},{"size":7492,"mtime":1606542854555,"results":"222","hashOfConfig":"147"},{"size":1217,"mtime":1606765545916,"results":"223","hashOfConfig":"147"},{"size":1599,"mtime":1606542854551,"results":"224","hashOfConfig":"147"},{"size":5538,"mtime":1608714445065,"results":"225","hashOfConfig":"147"},{"size":3057,"mtime":1608583009006,"results":"226","hashOfConfig":"147"},{"size":4573,"mtime":1606542854543,"results":"227","hashOfConfig":"147"},{"size":4786,"mtime":1608256845960,"results":"228","hashOfConfig":"147"},{"size":6254,"mtime":1608256845960,"results":"229","hashOfConfig":"147"},{"size":1094,"mtime":1606542854559,"results":"230","hashOfConfig":"147"},{"size":4257,"mtime":1606542854551,"results":"231","hashOfConfig":"147"},{"size":1395,"mtime":1606546224831,"results":"232","hashOfConfig":"147"},{"size":2101,"mtime":1608709292102,"results":"233","hashOfConfig":"147"},{"size":3428,"mtime":1608683410258,"results":"234","hashOfConfig":"147"},{"size":17815,"mtime":1606542854551,"results":"235","hashOfConfig":"147"},{"size":44504,"mtime":1606542854551,"results":"236","hashOfConfig":"147"},{"size":43181,"mtime":1606542854551,"results":"237","hashOfConfig":"147"},{"size":2668,"mtime":1606542854551,"results":"238","hashOfConfig":"147"},{"size":5155,"mtime":1608573304163,"results":"239","hashOfConfig":"147"},{"size":1010,"mtime":1606542854559,"results":"240","hashOfConfig":"147"},{"size":543,"mtime":1606542854551,"results":"241","hashOfConfig":"147"},{"size":25608,"mtime":1608451534995,"results":"242","hashOfConfig":"147"},{"size":8231,"mtime":1606542854523,"results":"243","hashOfConfig":"147"},{"size":5039,"mtime":1606542854555,"results":"244","hashOfConfig":"147"},{"size":12701,"mtime":1606542854555,"results":"245","hashOfConfig":"147"},{"size":6332,"mtime":1606542854555,"results":"246","hashOfConfig":"147"},{"size":3815,"mtime":1608748660349,"results":"247","hashOfConfig":"147"},{"size":694,"mtime":1608451534991,"results":"248","hashOfConfig":"147"},{"size":7761,"mtime":1608570793440,"results":"249","hashOfConfig":"147"},{"size":7645,"mtime":1608451534923,"results":"250","hashOfConfig":"147"},{"size":803,"mtime":1608451534955,"results":"251","hashOfConfig":"147"},{"size":3706,"mtime":1608451534963,"results":"252","hashOfConfig":"147"},{"size":6366,"mtime":1608623450624,"results":"253","hashOfConfig":"147"},{"size":7619,"mtime":1608623450624,"results":"254","hashOfConfig":"147"},{"size":1525,"mtime":1606765545916,"results":"255","hashOfConfig":"147"},{"size":1513,"mtime":1606765545916,"results":"256","hashOfConfig":"147"},{"size":30363,"mtime":1608451535047,"results":"257","hashOfConfig":"147"},{"size":5424,"mtime":1608256782076,"results":"258","hashOfConfig":"147"},{"size":3032,"mtime":1606542854551,"results":"259","hashOfConfig":"147"},{"size":5638,"mtime":1606542854555,"results":"260","hashOfConfig":"147"},{"size":10696,"mtime":1608451534995,"results":"261","hashOfConfig":"147"},{"size":6383,"mtime":1608451534991,"results":"262","hashOfConfig":"147"},{"size":1102,"mtime":1606542854523,"results":"263","hashOfConfig":"147"},{"size":29471,"mtime":1608683410258,"results":"264","hashOfConfig":"147"},{"size":506,"mtime":1606542854539,"results":"265","hashOfConfig":"147"},{"size":2824,"mtime":1606542854539,"results":"266","hashOfConfig":"147"},{"size":2910,"mtime":1606542854523,"results":"267","hashOfConfig":"147"},{"size":2985,"mtime":1606542854539,"results":"268","hashOfConfig":"147"},{"size":2122,"mtime":1608623450604,"results":"269","hashOfConfig":"147"},{"size":3420,"mtime":1606542854523,"results":"270","hashOfConfig":"147"},{"size":565,"mtime":1606542854555,"results":"271","hashOfConfig":"147"},{"size":1710,"mtime":1606542854523,"results":"272","hashOfConfig":"147"},{"size":18518,"mtime":1606542854555,"results":"273","hashOfConfig":"147"},{"size":4225,"mtime":1608570793440,"results":"274","hashOfConfig":"147"},{"size":3909,"mtime":1606542854523,"results":"275","hashOfConfig":"147"},{"size":4336,"mtime":1606542854523,"results":"276","hashOfConfig":"147"},{"size":5642,"mtime":1606542854523,"results":"277","hashOfConfig":"147"},{"size":5388,"mtime":1606542854555,"results":"278","hashOfConfig":"147"},{"size":16302,"mtime":1608256845960,"results":"279","hashOfConfig":"147"},{"size":2714,"mtime":1606542854555,"results":"280","hashOfConfig":"147"},{"size":2676,"mtime":1606542854555,"results":"281","hashOfConfig":"147"},{"size":1589,"mtime":1606542854555,"results":"282","hashOfConfig":"147"},{"size":3994,"mtime":1606542854551,"results":"283","hashOfConfig":"147"},{"size":4006,"mtime":1606542854551,"results":"284","hashOfConfig":"147"},{"size":2546,"mtime":1606542854551,"results":"285","hashOfConfig":"147"},{"size":19121,"mtime":1608704740191,"results":"286","hashOfConfig":"147"},{"size":1984,"mtime":1606542854543,"results":"287","hashOfConfig":"147"},{"size":668,"mtime":1606542854539,"results":"288","hashOfConfig":"147"},{"size":15216,"mtime":1606542854551,"results":"289","hashOfConfig":"147"},{"size":1418,"mtime":1606542854523,"results":"290","hashOfConfig":"147"},{"size":18804,"mtime":1608570793436,"results":"291","hashOfConfig":"147"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"295"},"1vs2pwf",{"filePath":"296","messages":"297","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"295"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"295"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"295"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"295"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"295"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"295"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"344","usedDeprecatedRules":"295"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"295"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"352","usedDeprecatedRules":"295"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"295"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360","usedDeprecatedRules":"295"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371","usedDeprecatedRules":"295"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374","usedDeprecatedRules":"295"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377","usedDeprecatedRules":"295"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384","usedDeprecatedRules":"295"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"389","usedDeprecatedRules":"295"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":1,"source":"392","usedDeprecatedRules":"295"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"395","usedDeprecatedRules":"295"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"295"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"295"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404","usedDeprecatedRules":"295"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"295"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"295"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"413","usedDeprecatedRules":"295"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"416","usedDeprecatedRules":"295"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"419","usedDeprecatedRules":"295"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"422","usedDeprecatedRules":"295"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"427","usedDeprecatedRules":"295"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"430","usedDeprecatedRules":"295"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"433","usedDeprecatedRules":"295"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":1,"source":"436","usedDeprecatedRules":"295"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":45,"fixableErrorCount":0,"fixableWarningCount":0,"source":"439","usedDeprecatedRules":"295"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442","usedDeprecatedRules":"295"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"445","messages":"446","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"295"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"450","messages":"451","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"452","usedDeprecatedRules":"295"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"455","usedDeprecatedRules":"295"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"458","usedDeprecatedRules":"295"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"461","usedDeprecatedRules":"295"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"466","usedDeprecatedRules":"295"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"469","usedDeprecatedRules":"295"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"472","usedDeprecatedRules":"295"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"475","usedDeprecatedRules":"295"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"478","usedDeprecatedRules":"295"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"481","usedDeprecatedRules":"295"},{"filePath":"482","messages":"483","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"484","usedDeprecatedRules":"295"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"487","usedDeprecatedRules":"295"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"490","usedDeprecatedRules":"295"},{"filePath":"491","messages":"492","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"493","usedDeprecatedRules":"295"},{"filePath":"494","messages":"495","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"498","messages":"499","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"500","messages":"501","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"502","usedDeprecatedRules":"295"},{"filePath":"503","messages":"504","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"505","usedDeprecatedRules":"295"},{"filePath":"506","messages":"507","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"508","usedDeprecatedRules":"295"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"511","usedDeprecatedRules":"295"},{"filePath":"512","messages":"513","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":2,"source":"516","usedDeprecatedRules":"295"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"519","usedDeprecatedRules":"295"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"522","usedDeprecatedRules":"295"},{"filePath":"523","messages":"524","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"525","usedDeprecatedRules":"295"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"528","usedDeprecatedRules":"295"},{"filePath":"529","messages":"530","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"531","usedDeprecatedRules":"295"},{"filePath":"532","messages":"533","errorCount":0,"warningCount":38,"fixableErrorCount":0,"fixableWarningCount":0,"source":"534","usedDeprecatedRules":"295"},{"filePath":"535","messages":"536","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"537","usedDeprecatedRules":"295"},{"filePath":"538","messages":"539","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"540","usedDeprecatedRules":"295"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"545","usedDeprecatedRules":"295"},{"filePath":"546","messages":"547","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"548","usedDeprecatedRules":"295"},{"filePath":"549","messages":"550","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"551","usedDeprecatedRules":"295"},{"filePath":"552","messages":"553","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"554","usedDeprecatedRules":"295"},{"filePath":"555","messages":"556","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"557","usedDeprecatedRules":"295"},{"filePath":"558","messages":"559","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"560","usedDeprecatedRules":"295"},{"filePath":"561","messages":"562","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"563","usedDeprecatedRules":"295"},{"filePath":"564","messages":"565","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"566","messages":"567","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"570","usedDeprecatedRules":"295"},{"filePath":"571","messages":"572","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"573","usedDeprecatedRules":"295"},{"filePath":"574","messages":"575","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"576","usedDeprecatedRules":"295"},{"filePath":"577","messages":"578","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"579","messages":"580","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"581","usedDeprecatedRules":"295"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"584","usedDeprecatedRules":"295"},{"filePath":"585","messages":"586","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"587","usedDeprecatedRules":"295"},{"filePath":"588","messages":"589","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"590","usedDeprecatedRules":"295"},{"filePath":"591","messages":"592","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"593","usedDeprecatedRules":"295"},{"filePath":"594","messages":"595","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"596","messages":"597","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"598","usedDeprecatedRules":"295"},{"filePath":"599","messages":"600","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"601","usedDeprecatedRules":"295"},{"filePath":"602","messages":"603","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"604","usedDeprecatedRules":"295"},{"filePath":"605","messages":"606","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"607","usedDeprecatedRules":"295"},{"filePath":"608","messages":"609","errorCount":0,"warningCount":54,"fixableErrorCount":0,"fixableWarningCount":0,"source":"610","usedDeprecatedRules":"295"},{"filePath":"611","messages":"612","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"613","messages":"614","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"615","usedDeprecatedRules":"295"},{"filePath":"616","messages":"617","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"618","usedDeprecatedRules":"295"},{"filePath":"619","messages":"620","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"621","usedDeprecatedRules":"295"},{"filePath":"622","messages":"623","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"624","usedDeprecatedRules":"295"},{"filePath":"625","messages":"626","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"627","usedDeprecatedRules":"295"},{"filePath":"628","messages":"629","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"630","usedDeprecatedRules":"295"},{"filePath":"631","messages":"632","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"633","usedDeprecatedRules":"295"},{"filePath":"634","messages":"635","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"636","usedDeprecatedRules":"295"},{"filePath":"637","messages":"638","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"639","usedDeprecatedRules":"295"},{"filePath":"640","messages":"641","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"642","messages":"643","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"644","usedDeprecatedRules":"295"},{"filePath":"645","messages":"646","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"647","usedDeprecatedRules":"295"},{"filePath":"648","messages":"649","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"650","usedDeprecatedRules":"295"},{"filePath":"651","messages":"652","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"653","usedDeprecatedRules":"295"},{"filePath":"654","messages":"655","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"656","usedDeprecatedRules":"295"},{"filePath":"657","messages":"658","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"659","usedDeprecatedRules":"295"},{"filePath":"660","messages":"661","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"662","usedDeprecatedRules":"295"},{"filePath":"663","messages":"664","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"665","usedDeprecatedRules":"295"},{"filePath":"666","messages":"667","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"668","usedDeprecatedRules":"295"},{"filePath":"669","messages":"670","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"671","usedDeprecatedRules":"295"},{"filePath":"672","messages":"673","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"674","usedDeprecatedRules":"295"},{"filePath":"675","messages":"676","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"677","usedDeprecatedRules":"295"},{"filePath":"678","messages":"679","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"680","usedDeprecatedRules":"295"},{"filePath":"681","messages":"682","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"683","usedDeprecatedRules":"295"},{"filePath":"684","messages":"685","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"686","usedDeprecatedRules":"295"},{"filePath":"687","messages":"688","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"689","usedDeprecatedRules":"295"},"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/index.js",["690","691"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, compose, applyMiddleware, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport authReducer from './store/reducers/auth';\nimport navReducer from './store/reducers/nav';\nimport messageReducer from './store/reducers/messages';\nimport notificationsReducer from './store/reducers/notifications';\nimport calendarReducer from './store/reducers/calendars';\nimport calendarEventReducer from './store/reducers/calendarEvent';\nimport eventSyncReducer from './store/reducers/eventSync';\nimport newsfeedReducer from './store/reducers/newsfeed';\nimport exploreReducer from './store/reducers/explore';\nimport socialCalReducer from './store/reducers/socialCalendar';\nimport {reducer as formReducer } from 'redux-form';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\n\n\n\nconst composeEnhances = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\n\n// you can combine reducers into one reducing function using combineReducer() so you can\n// pass it into create store\n// The form reducer only has to be put in once for all the redux forms\nconst rootReducer = combineReducers({\n  auth: authReducer,\n  nav: navReducer,\n  message: messageReducer,\n  notifications: notificationsReducer,\n  calendar: calendarReducer,\n  calendarEvent: calendarEventReducer,\n  form: formReducer,\n  eventSync: eventSyncReducer,\n  newsfeed: newsfeedReducer,\n  explore: exploreReducer,\n  socialCal: socialCalReducer\n})\n//store takes in reducer and an enhancer to handle the middleware\n\n// if you are doing a webosocket, you want to throw callbacks into the app.js\n\nconst store = createStore(\n   rootReducer,\n   composeEnhances(applyMiddleware(thunk)\n));\n\nconst app = (\n    <Provider store={store}>\n        <App />\n    </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));\nserviceWorker.unregister();\n",["692","693"],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/App.js",["694","695","696","697"],"import React, { Component } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport BaseRouter from './routes';\nimport LoginRouter from './LoginRoutes.js'\nimport 'antd/dist/antd.css';\nimport * as authActions from './store/actions/auth';\nimport WebSocketInstance from './websocket';\nimport NotificationWebSocketInstance from './notificationWebsocket';\nimport CalendarEventWebSocketInstance from './calendarEventWebsocket';\nimport WebSocketPostsInstance from './postWebsocket';\nimport ExploreWebSocketInstance from './exploreWebsocket';\nimport EventPageWebSocketInstance from './eventPageWebsocket';\nimport SocialEventPageWebSocketInstance from './socialEventPageWebsocket';\nimport SocialCalCellPageWebSocketInstance from './socialCalCellWebsocket';\nimport UserPostPageWebSocketInstance from './UserPostPageWebsocket';\nimport NewChatWebSocketInstance from './newChatWebsocket';\nimport ChatSidePanelWebSocketInstance from './newChatSidePanelWebsocket';\nimport AddChatModal from './containers/Popup';\nimport * as navActions from './store/actions/nav';\nimport * as messageActions from './store/actions/messages';\nimport * as notificationsActions from './store/actions/notifications';\nimport * as calendarActions from './store/actions/calendars';\nimport * as newsfeedActions from './store/actions/newsfeed';\nimport * as exploreActions from './store/actions/explore';\nimport * as socialActions from './store/actions/socialCalendar';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    // this.initialiseExplore()\n\n    this.initialiseChats()\n\n    // DELETE THIS WEBSOCEKT INSTANC EHERE ONCE THE NEW CHAT STARTS WORKING WELL\n    WebSocketInstance.addCallbacks(\n      this.props.setMessages.bind(this),\n      this.props.addMessage.bind(this)\n    );\n\n\n\n\n    NotificationWebSocketInstance.addCallbacks(\n      this.props.setNotifications.bind(this),\n      this.props.newNotification.bind(this)\n    )\n    // For the calendarEventWebosocket you just need to have one\n    // action (the addEvent) because the data for the each person is\n    // different so you just want to add it thats all\n    CalendarEventWebSocketInstance.addCallbacks(\n      this.props.addEvent.bind(this),\n      this.props.acceptEventShare.bind(this),\n      this.props.declineElseEventShare.bind(this),\n      this.props.declineEventShare.bind(this),\n      this.props.newNotification.bind(this)\n\n    )\n\n    WebSocketPostsInstance.addCallbacks(\n      this.props.setPosts.bind(this),\n      this.props.addLike.bind(this),\n      this.props.unaddLike.bind(this),\n      this.props.addComment.bind(this),\n      this.props.deletePost.bind(this)\n    )\n\n    ExploreWebSocketInstance.addCallbacks(\n      this.props.loadProfile.bind(this),\n      this.props.addFollowerUnfollower.bind(this),\n      this.props.addSocialEventJoinLeave.bind(this),\n      this.props.addSocialCell.bind(this),\n      this.props.addSocialEventJoinLeavePage.bind(this),\n      this.props.editProfileAuth.bind(this),\n      this.props.addRemoveCloseFriend.bind(this),\n      this.props.addSocialCellCoverPic.bind(this)\n    )\n\n    EventPageWebSocketInstance.addCallbacks(\n      this.props.loadEventInfo.bind(this),\n      this.props.sendEventMessage.bind(this),\n      this.props.updateEventPage.bind(this),\n\n    )\n\n    SocialEventPageWebSocketInstance.addCallbacks(\n      this.props.loadSocialEventInfo.bind(this),\n      this.props.sendSocialEventMessage.bind(this),\n      this.props.updateSocialEventPage.bind(this),\n      this.props.sendDeleteSocialEventNoti.bind(this)\n    )\n\n    SocialCalCellPageWebSocketInstance.addCallbacks(\n      this.props.fetchSocialCalCellPage.bind(this),\n      this.props.sendSocialCalCellLikeUnlike.bind(this),\n      this.props.sendSocialCalCellComment.bind(this),\n      this.props.sendSocialCalCellComments.bind(this),\n      this.props.addSocialEventJoinLeaveM.bind(this)\n    )\n\n    UserPostPageWebSocketInstance.addCallbacks(\n      this.props.loadPost.bind(this),\n      this.props.sendUserPostLikeUnlike.bind(this),\n      this.props.sendUserPostComment.bind(this)\n    )\n\n    NewChatWebSocketInstance.addCallbacks(\n      this.props.setMessages.bind(this),\n      this.props.addMessage.bind(this)\n\n    )\n\n    ChatSidePanelWebSocketInstance.addCallbacks(\n      // These function is to set the chats in\n      this.props.setChats.bind(this)\n    )\n\n  }\n\n\n// So since you are gonna render the notification and chats at the\n// beginning when you first login, and to get chat notifcation,\n// so you want to connect to chats channel and notificaiton websocket\n// right away so that it is already connected whne you login\n  initialiseChats(){\n    this.waitForChatsSocketConnection(() =>{\n      console.log(this.props.id)\n      ChatSidePanelWebSocketInstance.fetchChats(\n        this.props.id\n      )\n\n    })\n    ChatSidePanelWebSocketInstance.connect(this.props.id)\n\n  }\n\n  waitForChatsSocketConnection(callback) {\n    const component = this;\n    setTimeout(\n      function(){\n\n        if (ChatSidePanelWebSocketInstance.state() === 1){\n\n          callback();\n          return;\n        } else{\n\n            component.waitForChatsSocketConnection(callback);\n        }\n      }, 100)\n\n  }\n\n\n\n//the map state to props allows us to get the state and then\n//turn it to props then call those props in Layouts.js\n  componentDidMount() {\n  //everythign this is run it will do a try auto signup, it will give\n  //App.js this method from the store\n    this.props.onTryAutoSignup();\n\n\n  }\n\n  componentWillReceiveProps(newProps){\n    if(newProps.isAuthenticated){\n      console.log(this.props.id, parseInt(newProps.id))\n      if(parseInt(this.props.id) !== parseInt(newProps.id)){\n        // This if statement will see if a person has login and is isAuthenticated\n        // and id has not change so we can connect to the right chat\n        ChatSidePanelWebSocketInstance.disconnect();\n        this.waitForChatsSocketConnection(() =>{\n          ChatSidePanelWebSocketInstance.fetchChats(\n            newProps.id\n          )\n\n        })\n        ChatSidePanelWebSocketInstance.connect(newProps.id)\n      }\n    }\n    // NotificationWebSocketInstance.connect(newProps.username)\n    // if (this.props.username !== newProps.username){\n    //   // ExploreWebSocketInstance.disconnect()\n    //   // ExploreWebSocketInstance.connect(newProps.username)\n    // }\n\n  }\n\n\n  render() {\n    console.log(this.props)\n    return (\n      <div>\n        <Router>\n\n                <BaseRouter   {...this.props}/>\n\n\n        </Router>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.auth.token !== null,\n    username: state.auth.username,\n    id: state.auth.id,\n\n\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onTryAutoSignup: () => dispatch(authActions.authCheckState()),\n    addMessage: message => dispatch(messageActions.addMessage(message)),\n    setMessages: (messages, curChat) => dispatch(messageActions.setMessages(messages, curChat)),\n    setChats: chats => dispatch(messageActions.setChats(chats)),\n    setNotifications: notifications => dispatch(notificationsActions.setNotifications(notifications)),\n    newNotification: notification => dispatch(notificationsActions.newNotification(notification)),\n    addEvent: events => dispatch(calendarActions.addEvent(events)),\n    acceptEventShare: acceptShareObj => dispatch(calendarActions.acceptEventShare(acceptShareObj)),\n    declineElseEventShare: declineShareObj => dispatch(calendarActions.declineElseEventShare(declineShareObj)),\n    declineEventShare: declineShareObj => dispatch(calendarActions.declineEventShare(declineShareObj)),\n    loadEventInfo: eventInfoObj => dispatch(calendarActions.loadEventInfo(eventInfoObj)),\n    sendEventMessage: eventMessageObj => dispatch(calendarActions.sendEventMessage(eventMessageObj)),\n    updateEventPage: updatedEventObj => dispatch(calendarActions.updateEventPage(updatedEventObj)),\n    setPosts: likes => dispatch(newsfeedActions.loadPosts(likes)),\n    addLike: like => dispatch(newsfeedActions.addPostLike(like)),\n    unaddLike: unlike => dispatch(newsfeedActions.unaddPostLike(unlike)),\n    addComment: comment => dispatch(newsfeedActions.addPostComment(comment)),\n    deletePost: postId => dispatch(newsfeedActions.deletePost(postId)),\n\n    loadPost: postObj => dispatch(newsfeedActions.loadPost(postObj)),\n    sendUserPostLikeUnlike: likeList => dispatch(newsfeedActions.sendUserPostLikeUnlike(likeList)),\n    sendUserPostComment: commentObj => dispatch(newsfeedActions.sendUserPostComment(commentObj)),\n\n    loadProfile: profile => dispatch(exploreActions.loadProfile(profile)),\n    addFollowerUnfollower: followObject => dispatch(exploreActions.addFollowerUnfollower(followObject)),\n    addSocialEventJoinLeave: (socialEventList, cellId) => dispatch(exploreActions.addSocialEventJoinLeave(socialEventList, cellId)),\n    addSocialEventJoinLeavePage: (socialEventList) => dispatch(exploreActions.addSocialEventJoinLeavePage(socialEventList)),\n    addSocialCell: (newSocialCellObj) => dispatch(exploreActions.addSocialCell(newSocialCellObj)),\n    addSocialCellCoverPic: (coverPicture, cellId) => dispatch(exploreActions.addSocialCellCoverPic(coverPicture, cellId)),\n    editProfileAuth: (editProfileObj) => dispatch(authActions.editProfileAuth(editProfileObj)),\n    addRemoveCloseFriend: (friendList) => dispatch(authActions.addRemoveCloseFriend(friendList)),\n\n\n    loadSocialEventInfo: socialEventInfoObj => dispatch(socialActions.loadSocialEventInfo(socialEventInfoObj)),\n    sendSocialEventMessage: socialEventMessageObj => dispatch(socialActions.sendSocialEventMessage(socialEventMessageObj)),\n    updateSocialEventPage: updatedSocialEvent => dispatch(socialActions.updateSocialEventPage(updatedSocialEvent)),\n    sendDeleteSocialEventNoti: () => dispatch(socialActions.sendDeleteSocialEventNoti()),\n    fetchSocialCalCellPage: (socialCalCellObj) => dispatch(socialActions.fetchSocialCalCellPage(socialCalCellObj)),\n    sendSocialCalCellLikeUnlike: (socialCalCellLikeObj) => dispatch(socialActions.sendSocialCalCellLikeUnlike(socialCalCellLikeObj)),\n    sendSocialCalCellComment: (socialCalCellCommentObj) => dispatch(socialActions.sendSocialCalCellComment(socialCalCellCommentObj)),\n    sendSocialCalCellComments: (socialCalCellCommentsObj) => dispatch(socialActions.sendSocialCalCellComments(socialCalCellCommentsObj)),\n    addSocialEventJoinLeaveM: (socialEventList) => dispatch(socialActions.addSocialEventJoinLeaveM(socialEventList))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/serviceWorker.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/reducers/nav.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/reducers/auth.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/reducers/messages.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/reducers/calendarEvent.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/reducers/eventSync.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/reducers/newsfeed.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/reducers/explore.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/reducers/calendars.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/reducers/socialCalendar.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/reducers/notifications.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/LoginRoutes.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/routes.js",["698","699","700","701","702","703","704","705","706","707"],"import React from 'react';\nimport { Route, useLocation, Switch } from 'react-router-dom';\nimport { withRouter } from \"react-router-dom\";\nimport NewsFeedView from './containers/NewsFeedView.js';\nimport ArticleDetail from './containers/ArticleDetailView';\nimport Login from './containers/LoginPage/Login';\nimport Signup from './containers/Signup';\nimport AllUsersNotCurrNotCurrFriends from './containers/AllUsersNotCurrNotCurrFriends';\nimport Explore from './containers/Explore';\nimport InfiniteList from './containers/InfiniteScroll';\nimport ViewAnyUserProfile from './components/UserProfiles/ViewAnyUserProfile';\nimport PersonalProfile from './components/UserProfiles/PersonalProfile';\nimport FriendRequestList from './components/FriendRequestList';\nimport FriendsList from './containers/FriendsList';\nimport Chat from './containers/Chat';\nimport NewChat from './containers/NewChatFolder/NewChat';\nimport Notifications from './containers/Notifications';\nimport MonthCalendar from './containers/PersonalCalendar/MonthCalendar';\nimport DayCalendar from './containers/PersonalCalendar/DayCalendar';\nimport WeekCalendar from './containers/PersonalCalendar/WeekCalendar';\nimport YearCalendar from './containers/PersonalCalendar/YearCalendar';\nimport SideMenu from './components/SideMenu/SideMenu.js';\nimport NoFoundPage from './containers/403.jsx';\nimport ProfileCardNewsFeed from './components/ProfileCardNewsFeed';\nimport EventPage from './containers/PersonalCalendar/EventPage/EventPage.js'\nimport SocialEventPage from './containers/SocialCalendarFolder/SocialEventPage/SocialEventPage';\nimport SocialCalCellPage from './containers/SocialCalendarFolder/SocialCalCellPage';\nimport SocialCalCellModal from './containers/SocialCalendarFolder/SocialCalCellModal';\nimport UserPostList from './containers/UserPostTabFolder/UserPostList';\nimport PersonalProfilePostList from './containers/UserPostTabFolder/PersonalProfilePostList';\nimport PersonalProfileEventList from './containers/UserEventTabFolder/PersonalProfileEventList';\nimport UserPostModal from \"./components/PostPageFolder/UserPostModal\";\n\n//these routes will route to App.js\n//routes component ArticleList gets a list of profile\n//routes component ArticleDetail gets individual profiles\n\n// the way you fixed\n\n\nclass BaseRouter extends React.Component {\n\n// props and this.props are two different things on the routes\n\n// The props are the props from routes, it gives the components its history, location, match\n\n// I guess the match gets passed in from here so I have to make the params its own\n// parameter in props (HAVE TO FIX)\n\n// <Route exact path = '/explore/:username' render={(props) => <ViewAnyUserProfile {...props} {...this.props} isAuthenticated={this.props.isAuthenticated} />}  />\n// <Route exact path = '/current-user/:username' render={(props) => <CurrUserProfile {...props} isAuthenticated={this.props.isAuthenticated} />}  />\n\n  render() {\n\n    console.log(this.props);\n    //It is all about having that path name inside the switch (whatever the switch is\n  // that would be the background)\n  //Example : location = {{pathname: '/home'}}\n\n\n\n  //FIRGURE OUT A SOLUTION TO WHY MATCH IS NOT CHANGING\n    let location = this.props.location;\n    console.log(location)\n    if(this.props.location.state){\n      location = this.props.location.state\n    }\n    return (\n\n\n      <div class=\"backgroundofEverything\"\n      style={{\n        position: 'relative',\n        background:'white',\n        minHeight:'100%',}}>\n        { this.props.isAuthenticated?\n        <SideMenu>\n\n          <Switch location = {location} >\n\n\n            <Route exact path = '/home'  render={(props) => <NewsFeedView {...this.props} isAuthenticated={this.props.isAuthenticated} />} />\n\n            <Route exact path = '/signup/' component= {Signup} />\n\n            <Route exact path = '/userview' render={(props) => <AllUsersNotCurrNotCurrFriends {...this.props} isAuthenticated={this.props.isAuthenticated} />}  />\n            <Route exact path = '/explore' render={(props) => <Explore {...this.props} isAuthenticated={this.props.isAuthenticated} />}  />\n\n            <Route exact path = '/explore/:username' render={(props) => <PersonalProfile parameter = {props.match.params} {...this.props} isAuthenticated={this.props.isAuthenticated} />}  />\n            <Route exact path = '/explore/:username/posts' render = {(props) => <PersonalProfilePostList parameter = {props.match.params} {...this.props} isAuthenticated= {this.props.isAuthenticated} />} />\n            <Route exact path = '/explore/:username/events' render = {(props) => <PersonalProfileEventList parameter = {props.match.params} {...this.props} isAuthenticated= {this.props.isAuthenticated} />} />\n\n            <Route exact path = '/friend-request-list/' render={(props) => <FriendRequestList {...this.props} isAuthenticated={this.props.isAuthenticated} />}  />\n            <Route exact path = '/friends-list' render={(props) => <FriendsList {...this.props} isAuthenticated={this.props.isAuthenticated} />}  />\n\n            <Route exact path = '/chat/:id' render={(props) => <NewChat parameter = {props.match.params} {...this.props} isAuthenticated={this.props.isAuthenticated} />}  />\n            <Route exact path = '/personalcalendar/:year/:month' render={(props) => <MonthCalendar parameter = {props.match.params} {...this.props} isAuthenticated={this.props.isAuthenticated} />}  />\n            <Route exact path = '/personalcalendar/:year/:month/:day' render={(props) => <DayCalendar parameter = {props.match.params} {...this.props} isAuthenticated={this.props.isAuthenticated} />}  />\n            <Route exact path = '/personalcalendar/w/:year/:month/:day' render={(props) => <WeekCalendar  parameter = {props.match.params} {...this.props} isAuthenticated={this.props.isAuthenticated} />}  />\n            <Route exact path = '/personalcalendar/:year' render={(props) => <YearCalendar parameter = {props.match.params} {...this.props} isAuthenticated={this.props.isAuthenticated} />}  />\n            <Route exact path = '/personalcal/event/:eventId' render={(props) => <EventPage parameter = {props.match.params} {...this.props} isAuthenticated={this.props.isAuthenticated} />}  />\n            <Route exact path = '/socialcal/event/:socialEventId' render={(props) => <SocialEventPage parameter = {props.match.params} {...this.props} isAuthenticated={this.props.isAuthenticated} />}  />\n\n          </Switch>\n        </SideMenu>\n        :\n        <div></div>\n        }\n        <Route exact path = '/' component = {Login} />\n        {location ? <Route exact path = '/socialcal/:username/cell/:year/:month/:day' component = {SocialCalCellModal} /> : null}\n        {location ? <Route exact path = '/post/:username/:postId' component = {UserPostModal} /> : null}\n      </div>\n\n\n\n      )\n\n    }\n}\n\n\n\nexport default withRouter(BaseRouter);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/websocket.js",["708"],"class WebSocketService {\n  // static is not called on an instance but rather called on the class itself\n  static instance = null;\n  // call back run after anothr function is run and it is a dictionary\n  // calledback things would be fetch meessage and new message\n  callbacks = {}\n\n  // chekc if there is an instance or not\n  static getInstance(){\n    if (!WebSocketService.instance){\n      WebSocketService.instance = new WebSocketService();\n    }\n    return WebSocketService.instance;\n  }\n\n  constructor(){\n    // this sets one of the properties on WebSocketService as null\n    this.socketRef = null;\n  }\n\n  // Connect to the websocket\n  // This is similar to the methods in the backend, the first thing you always want to do\n  // is connect to the WebSocket\n  // New WebSocket calls a new Websocket instance on that path\n  // Onpen is run when the websocket is connected\n  // Onmessage is run when the websocket recieves information from the server\n  // this.socketRef is basically our WebSocket\n\n  connect(chatUrl) {\n    const path ='ws://127.0.0.1:8000/ws/chat/'+chatUrl+'/';\n    console.log(path)\n    this.socketRef = new WebSocket(path)\n    this.socketRef.onopen = () => {\n      console.log('websocket open')\n\n    }\n    // this.socketNewMessage(JSON.stringify({\n    //   command: 'fetch_messages'\n    // }))\n    console.log('fetch message success')\n    this.socketRef.onmessage = (e) =>{\n      console.log(e.data)\n      this.socketNewMessage(e.data);\n    }\n\n    this.socketRef.onerror = (e) =>{\n      console.log(e.message);\n    }\n\n    this.socketRef.onclose = () => {\n      console.log('websocket is closed')\n      this.connect();\n    }\n  }\n\n// this will close the websocket when we move into a new chat\n  disconnect(){\n    this.socketRef.close();\n  }\n  // The .command is the commands that can be like fetch methods or newmessage or whatever\n  // The Object.key returns an array of all the keys in the dictionary callback\n  socketNewMessage(data) {\n    const parsedData = JSON.parse(data);\n    const command = parsedData.command;\n    if (Object.keys(this.callbacks).length === 0){\n      return;\n    }\n    if (command == 'messages') {\n      this.callbacks['messages'](parsedData.messages)\n    }\n    if (command === 'new_message') {\n      this.callbacks[command](parsedData.message)\n    }\n  }\n\n  // This will taken in the username and then call the command fetch_messages which will then be called in the consumers\n  // Username will just be the senders username\n  fetchMessages(username, chatID) {\n    this.sendMessage({\n     command: 'fetch_messages',\n     username: username,\n     chatID: chatID })\n  }\n\n  // This will call the new_message command\n  // You are calling the object in the sendMessage here, you convert it to a JSON and then send it into the\n  // websocket\n  newChatMessage(message) {\n    this.sendMessage({\n      command: 'new_message',\n      from: message.from,\n      message: message.content,\n      chatId: message.chatId})\n  }\n\n  // adding in the commands directly\n  // this will be called in the Chat.js\n  addCallbacks(messagesCallback, newMessageCallback){\n    this.callbacks['messages'] = messagesCallback;\n    this.callbacks['new_message'] = newMessageCallback;\n\n  }\n\n  // WebSocket.send() sends information from the server to the WebSocket to be sent\n  // to all the other servers\n  // JSON.stringify basically turns all the data into JSON, this inclues strings and int too\n  // In order to send your data into the WebSocket your data needs to be in a JSON format\n  // When you do ({}) <-- you are calling an object\n  sendMessage(data) {\n    try{\n      this.socketRef.send(JSON.stringify({...data }))\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n\n  state() {\n    return this.socketRef.readyState;\n  }\n  // wati for the socket conenction to be stable\n  // recursion is used to try again basically\n  // The time out takes 2 parameters, the first is a function and the second is a timeout time\n  // in milisec\n  // Readystate gives the state of the Websocket, it can take in 4 values -->\n  // 0 being it is not connected\n  // 1 being it is connected and messages cna be sent\n  // 2 being it is in its closing handshake\n  // 3 bieng it is is closed can cannot be reopened\n  // The recursion will rerun the function everytime there is an error and when\n  // there is a callback then return\n  waitForSocketConnection (callback) {\n    const socket = this.socketRef;\n    const recursion = this.waitForSocketConnection;\n    setTimeout(\n      function(){\n        if (socket.readyState === 1){\n          console.log('connection is secure');\n          if (callback != null) {\n            callback();\n          }\n          return;\n        } else{\n            console.log('waiting for connection...')\n            recursion(callback)\n        }\n      }, 1)\n\n  }\n}\n\nconst WebSocketInstance = WebSocketService.getInstance();\n\nexport default WebSocketInstance;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/notificationWebsocket.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/postWebsocket.js",["709"],"class WebSocketPosts {\n  static instance = null;\n  callbacks = {}\n\n  static getInstance(){\n    if(!WebSocketPosts.instance){\n      WebSocketPosts.instance = new WebSocketPosts();\n    }\n    return WebSocketPosts.instance\n  }\n\n  constructor() {\n    this.socketRef = null\n  }\n\n  // connect(postId){\n  //   const path = 'ws://127.0.0.1:8000/ws/like-commenting-post/'+postId\n  //   console.log(path)\n  //   this.socketRef = new WebSocket(path)\n  //   this.socketRef.onopen = () => {\n  //     console.log('websocket open')\n  //   }\n  //   this.socketRef.onmessage = (e) => {\n  //     console.log(e.data)\n  //     this.socketNewPost(e.data)\n  //   }\n  //\n  //   this.socketRef.onerror = (e) => {\n  //     console.log(e.message);\n  //   }\n  //\n  //   this.socketRef.onclose = () => {\n  //     console.log('WebSocket is closed')\n  //     this.connect(postId)\n  //   }\n  // }\n\n  connect(){\n    const path = 'ws://127.0.0.1:8000/ws/newsfeed'\n    console.log(path)\n    this.socketRef = new WebSocket(path)\n    this.socketRef.onopen = () => {\n      console.log('websocket open')\n    }\n    this.socketRef.onmessage = (e) => {\n      this.socketNewPost(e.data)\n    }\n\n    this.socketRef.onerror = (e) => {\n      console.log(e.message);\n    }\n\n    this.socketRef.onclose = () => {\n      console.log('WebSocket is closed')\n      this.connect()\n    }\n  }\n\n  disconnect() {\n    console.log('disconnected')\n    this.socketRef.close();\n  }\n\n  socketNewPost(data){\n    const parsedData = JSON.parse(data);\n    const command = parsedData.command;\n\n    console.log(parsedData)\n    if (command === 'fetch_posts'){\n      const posts = JSON.parse(parsedData.likes_num)\n      // const postId = JSON.parse(parsedData.postId)\n      const postObject = {\n        posts: posts\n      }\n      this.callbacks['fetch_posts'](postObject)\n    } else if (command === 'new_like'){\n      // This is to send a like to the post through redux\n      // So remeber that the parsedData.user is sent as an object now not an id\n      console.log('new_like')\n      const postIdNum = parsedData.postId\n      const userObj = parsedData.user\n      // The user in this case is the user who liked the post, pretty much\n      // the current user but to others it will be someone else\n      const likeObject = {\n        postId: postIdNum,\n        userObj: userObj\n      }\n      console.log(likeObject)\n      this.callbacks['new_like'](likeObject)\n    } else if (command == 'un_like'){\n      const postIdNum = parsedData.postId\n      const userObj = parsedData.user\n      // This will just for the unlike porition\n      const unlikeObject = {\n        postId: postIdNum,\n        userObj: userObj\n      }\n\n      this.callbacks['un_like'](unlikeObject)\n    } else if (command === 'new_comment'){\n      console.log(parsedData)\n      const comment = JSON.parse(parsedData.comment)\n      console.log(comment)\n      // This will send the comment portion into redux\n      const commentObject = {\n        comment: comment\n      }\n\n      this.callbacks['new_comments'](commentObject)\n    } else if (command === 'delete_post'){\n      console.log('we hit delete post')\n\n      const postId = parsedData.postId\n      const postObject ={\n        postId: postId\n      }\n      this.callbacks['delete_post'](postObject)\n\n    }\n  }\n\n  addCallbacks(\n      postsCallback,\n      newLikeCallback,\n      unLikeCallback,\n      newCommentsCallback,\n      deletePostCallback\n    ){\n    this.callbacks['fetch_posts'] = postsCallback;\n    this.callbacks['new_like'] = newLikeCallback;\n    this.callbacks['un_like'] = unLikeCallback;\n    this.callbacks['new_comments'] = newCommentsCallback;\n    this.callbacks['delete_post'] = deletePostCallback;\n  }\n\n  fetchPosts(userId){\n    // This function will fetch the likes in the post at the intial\n    // load out\n    this.sendPostsInfo({\n      userId: userId,\n      command: 'fetch_posts'\n    })\n  }\n\n  sendOneLike (userId, postId) {\n    console.log(userId)\n    this.sendPostsInfo({\n      userId: userId,\n      postId: postId,\n      command: 'send_one_like'\n    })\n  }\n\n  unSendOneLike(userId, postId){\n    console.log(userId)\n    this.sendPostsInfo({\n      userId: userId,\n      postId: postId,\n      command: 'unsend_one_like'\n    })\n  }\n\n  sendComment(userId, postId, comment){\n    this.sendPostsInfo({\n      userId: userId,\n      postId: postId,\n      comment: comment,\n      command: 'send_comment'\n    })\n  }\n\n  deletePost(postId){\n    this.sendPostsInfo({\n      postId: postId,\n      command: 'delete_post'\n    })\n  }\n\n\n  sendPostsInfo(data){\n    // This is pretty much what connects the back end\n    // with the frontend\n    // This will send info and commands to the receive in the consumers\n    try {\n      this.socketRef.send(JSON.stringify({...data}))\n    } catch(err){\n      console.log(err.message);\n    }\n  }\n\n\n\n  state() {\n    return this.socketRef.readyState;\n  }\n\n  waitForSocketConnection(callback){\n    const socket = this.socketRef;\n    const recursion = this.waitForSocketConnection;\n    setTimeout(\n      function(){\n        if (socket.readyState === 1){\n          console.log('connection is secure');\n          if (callback != null) {\n            callback();\n          }\n          return;\n        } else{\n            console.log('waiting for connection...')\n            recursion(callback)\n        }\n      }, 1)\n  }\n\n}\n\n\nconst WebSocketPostsInstance = WebSocketPosts.getInstance();\n\nexport default WebSocketPostsInstance;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/calendarEventWebsocket.js",["710","711"],"// This websocket is used for EventSync and any other information\n// exchange between the calendars so you can use this for the personal\n// calendar and the Social calendar\nimport NotificationWebSocketInstance from './notificationWebsocket'\nimport {authAxios} from \"./components/util\";\n\n\nclass WebSocketCalendarEvent {\n  static instance = null;\n  callbacks = {}\n\n  static getInstance(){\n    if(!WebSocketCalendarEvent.instance){\n      WebSocketCalendarEvent.instance = new WebSocketCalendarEvent()\n    }\n    return WebSocketCalendarEvent.instance\n  }\n\n  constructor(){\n    this.socketRef = null\n  }\n\n  connect(userId){\n    const path = 'ws://127.0.0.1:8000/ws/calendar/'+userId\n    console.log(path)\n    this.socketRef = new WebSocket(path)\n    this.socketRef.onopen = () => {\n      console.log('websocket open')\n    }\n\n    this.socketRef.onmessage = (e) => {\n      console.log(e.data)\n      this.socketNewEvent(e.data, userId)\n    }\n\n    this.socketRef.onerror = (e) => {\n      console.log('websocket is closed')\n    }\n\n    this.socketRef.onclose = () => {\n      console.log('websocket is closed')\n      this.connect(userId);\n    }\n  }\n\n  disconnect(){\n    console.log('disconnected')\n    this.socketRef.close();\n  }\n\n  socketNewEvent(data, userId){\n    // This is where the new event from the back end get sent to redux\n    const parsedData = JSON.parse(data);\n    const command = parsedData.command;\n    console.log(parsedData)\n\n    if (command === 'new_event'){\n      this.callbacks['new_event'](parsedData.newEvent)\n\n    }\n    else if (command === 'add_accepted'){\n      const acceptorId = parsedData.acceptedUser;\n      const eventId = parsedData.eventId;\n      const person = parsedData.person;\n\n      const acceptShareObj = {\n        acceptorId: acceptorId,\n        person: person,\n        eventId: eventId\n      }\n\n      this.callbacks['accept_share'](acceptShareObj)\n    } else if(command === 'add_decline_else'){\n      // This path is for everyone else that is not the person declining the event\n      const declineId = parsedData.declineId;\n      const eventId = parsedData.eventId\n\n      const declineShareObj = {\n        declineId: declineId,\n        eventId: eventId\n      }\n\n      this.callbacks['decline_share_else'](declineShareObj)\n    } else if(command === 'add_decline'){\n      // This path is for the user that is doing the declining of the event\n      console.log('user side decline works')\n      const eventId = parsedData.eventId\n\n      const declineShareObj = {\n        eventId: eventId\n      }\n\n      this.callbacks['decline_share'](declineShareObj)\n    } else if (command === 'delete_event'){\n      // This will be run when the host deletes the event, this will\n      // delete all the event for everyone who is involed with the event\n      const eventId = parsedData.eventId\n      const deleteObj = {\n        eventId: eventId\n      }\n      this.callbacks['decline_share'](deleteObj)\n    } else if (command === \"new_shared_event_notification\"){\n      // This will be sending an event notification when you first make an event\n      // this will allow you to press on the notifcaiton and then go to the event\n      // page\n      const notification = parsedData.notification\n      // add call back here\n      this.callbacks['new_shared_event_notification'](notification)\n    }\n\n\n  }\n\n  addCallbacks(\n    newEventCallback,\n    acceptEventShareCallback,\n    declineElseEventShareCallback,\n    declineEventShareCallback,\n    newShareEventNotificationCallback\n\n  ){\n    // you just need to add the event so just one call back\n    this.callbacks['new_event'] = newEventCallback;\n    this.callbacks['accept_share'] = acceptEventShareCallback;\n    this.callbacks['decline_share_else'] = declineElseEventShareCallback;\n    this.callbacks['decline_share'] = declineEventShareCallback;\n    this.callbacks['new_shared_event_notification'] = newShareEventNotificationCallback;\n\n  }\n\n  acceptSharedEvent = (eventId, acceptorId) => {\n    // Pretty much the gate way to sending to the channels for accepting the\n    // event share... pretty much you just wanna add your name to the accepted list\n    // and let everyone that is part of the event shared know\n    this.sendEvent({\n      eventId: eventId,\n      acceptorId: acceptorId,\n      command: 'send_accept_shared_event'\n    })\n  }\n\n  declineSharedEvent = (eventId, declineId) => {\n    // The gate way to declining an event. Pretty much the same process as the accepting\n    // but instead of adding events in\n\n\n    this.sendEvent({\n      eventId: eventId,\n      declineId: declineId,\n      command: 'send_decline_shared_event'\n    })\n  }\n\n  deleteEvent = (eventId, actor) => {\n    // eventId will be the id of the event\n    // actor id will be the id of the actor\n    this.sendEvent({\n      eventId: eventId,\n      actor: actor,\n      command: 'delete_event'\n    })\n  }\n\n  sendEvent (data){\n    // This is used to send the notification into the backend and add in an\n    // event sync event\n    console.log(data)\n\n// START RIGHT HERE\n    try {\n      this.socketRef.send(JSON.stringify({...data}))\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  state() {\n    return this.socketRef.readyState\n  }\n\n  waitForSocketConnection(callback){\n    const socket = this.socketRef;\n    const recursion = this.waitForSocketConnection;\n    setTimeout(\n      function(){\n        if(socket.readyState === 1){\n          console.log('connection is secure');\n          if (callback != null){\n            callback()\n          }\n          return;\n        } else {\n          console.log('waiting for connection...')\n          recursion(callback)\n        }\n      }, 1)\n  }\n\n}\n\nconst CalendarEventWebSocketInstance = WebSocketCalendarEvent.getInstance()\n\nexport default CalendarEventWebSocketInstance;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/newChatWebsocket.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/exploreWebsocket.js",["712","713"],"// THIS WEBSOCKET WILL PRETTY MUCH BE USED FOR ALL THE FUNCTIONS THAT ARE\n// RELATED TO THE PROFILE PAGES, ALL THE PROFILE PAGES, THIS INCLUDES\n// YOU OWN PROFILE PAGE\n\nimport { connect } from 'react-redux';\n\n\nclass WebSocketExplore {\n  static instance = null;\n  callbacks = {}\n\n  static getInstance() {\n    if (!WebSocketExplore.instance){\n      WebSocketExplore.instance = new WebSocketExplore()\n    }\n    return WebSocketExplore.instance\n  }\n\n  constructor() {\n    this.socketRef = null\n  }\n\n  connect(username){\n    const path = 'ws://127.0.0.1:8000/ws/explore/' + username\n    // I place the connection path in the app.js\n    console.log(path)\n    this.socketRef = new WebSocket(path)\n    this.socketRef.onopen = () => {\n      console.log('websocket open')\n    }\n\n    this.socketRef.onmessage = (e) => {\n      console.log('new message')\n      this.socketNewExplore(e.data)\n    }\n\n    this.socketRef.onerror = (e) => {\n      console.log(e.message);\n    }\n\n    this.socketRef.onclose = () => {\n      console.log('websocket is closed')\n      // this.connect(username)\n    }\n  }\n\n  disconnect() {\n    console.log('disconnected')\n    this.socketRef.close()\n  }\n\n  socketNewExplore(data){\n\n    const parsedData = JSON.parse(data);\n    const command = parsedData.command;\n    console.log(parsedData)\n    console.log(command === 'user_profile_page')\n\n    if (command === \"user_profile\"){\n      //STATUS REDONE\n\n      const profile = JSON.parse(parsedData.profile)\n      this.callbacks['load_profile'](profile)\n\n    } else if (command === 'send_follower'){\n      // STATUS REDONE\n\n      // This is to add to the other person's followers\n      const newFollowerList = parsedData.followerList\n      this.callbacks['new_follower_unfollower'](newFollowerList)\n\n    } else if (command === 'send_unfollower'){\n      // STATUS REDONE\n\n      // This is to un add the other person follower\n\n      const newFollowerList = parsedData.followerList\n      this.callbacks['new_follower_unfollower'](newFollowerList)\n\n\n    } else if(command === 'send_social_event'){\n      // STATUS REDONE\n\n      // Two senarios, one is when a cell is created and one where there\n      // already exist a cell and you just change the event field to the new\n      // one\n\n      //There is a add social cell method in the redux already so we can\n      // reuse that and then we will have one where it just repalces\n      // the whole event field\n\n      const socialCalCellObj = parsedData.socialCalCellObj\n      const socialCalCellEvents = parsedData.socialCalCellObj.get_socialCalEvent\n      const cellId = parsedData.socialCalCellObj.id\n      if(parsedData.created){\n        // For new cell with new event\n        console.log(socialCalCellObj)\n        this.callbacks['add_social_cell'](socialCalCellObj)\n      } else {\n        // For old cell with new event\n        this.callbacks['add_social_event_join_leave'](socialCalCellEvents, cellId)\n      }\n    } else if (command == 'add_user_social_event'){\n      // STATUS REDONE\n\n      console.log(parsedData)\n      const socialEventList = parsedData.socialEventList\n      const socialCellId = parsedData.socialCellId\n\n      this.callbacks['add_social_event_join_leave'](socialEventList, socialCellId)\n\n    } else if (command === \"remove_user_social_event\"){\n      // STATUS REDONE\n\n      const socialEventList = parsedData.socialEventList\n      const socialCellId = parsedData.socialCellId\n\n      this.callbacks['add_social_event_join_leave'](socialEventList, socialCellId)\n\n    } else if( command === \"add_user_social_event_page\"){\n      // For the event tabs on the profile page\n      const socialEventList = parsedData.socialEventList\n\n      // add callbacks here\n      this.callbacks['add_social_event_join_leave_page'](socialEventList)\n    } else if(command === \"remove_user_social_event_page\"){\n      // for the event tabs on the profile pages\n      // simlar to the else if above but make this so peple know what\n      // functions there are\n\n      const socialEventList = parsedData.socialEventList\n\n      this.callbacks['add_social_event_join_leave_page'](socialEventList)\n\n    } else if(command === \"edited_profile\"){\n      // This will go in and update the profile information by just replacing\n      // the whole profile with the new updated profile\n\n      const updatedProfile = parsedData.editedProfile\n\n      // Add the callbacks here\n      this.callbacks['load_profile'](updatedProfile)\n      this.callbacks['edit_profile_auth'](updatedProfile)\n    } else if(command === 'add_user_close_friend'){\n      // This will recieve the friend list of the current user that just added\n      // a new user to the friend list. This will go into auth and replace the\n      // the old friendlist\n\n      const friendList = parsedData.friendList\n      // add callbacks here\n      this.callbacks['add_remove_close_friend'](friendList)\n\n    } else if(command === 'remove_user_close_friend'){\n      // This will pretty mcuh be the smae as the above command but now\n      // you are reomoving a user from the friend list\n      const friendList = parsedData.friendList\n\n      this.callbacks['add_remove_close_friend'](friendList)\n    } else if(command === 'approve_social_pics'){\n      // This function will add in pending pictures to the social calendar in the\n      // appropriate cell\n      const socialCalCellObj = parsedData.socialCelCellObj\n\n      if(parsedData.created){\n        // if by approving the pending picture you created another social cell then\n        // you would just add it in like ususal\n\n        console.log('created pending pics')\n        this.callbacks['add_social_cell'](socialCalCellObj)\n\n      } else {\n        // This is for when the social cal cell is alrady created so you just have\n        // to add in more social cell items\n\n\n        // create call back here to search for the social cell and then add the pics\n        // in\n        // YOU HONELSTY JUST NEED TO ADD COVER PIC HERE\n        this.callbacks['add_cover_pic'](socialCalCellObj.coverPic, socialCalCellObj.id)\n\n      }\n    }\n\n\n  }\n\n\n// call backs will pretty much be holding all the redux functions\n  addCallbacks(\n     loadProfile,\n     addFollowerUnfollowerCallBack,\n     addSocialEventJoinLeave,\n     addSocialCell,\n     addSocialEventJoinLeavePage,\n     editProfileAuth,\n     addRemoveCloseFriend,\n     addCoverPic,\n   ){\n    this.callbacks['load_profile'] = loadProfile\n    this.callbacks['new_follower_unfollower'] = addFollowerUnfollowerCallBack\n    this.callbacks['add_social_event_join_leave'] = addSocialEventJoinLeave\n    this.callbacks['add_social_cell'] = addSocialCell\n    this.callbacks['add_social_event_join_leave_page'] = addSocialEventJoinLeavePage\n    this.callbacks['edit_profile_auth'] = editProfileAuth\n    this.callbacks['add_remove_close_friend'] = addRemoveCloseFriend\n    this.callbacks['add_cover_pic'] = addCoverPic\n  }\n\n\n  fetchProfile(username){\n    // This will fetch the specific profile for the specific perosonal profile\n    // page\n    // The parameter username will be the username of the user (probally gonna\n    // have to change it to id or a combination of id and username so we can pull\n    // pull it easier and stuff like that)\n\n    console.log(username)\n    this.sendExplore({\n      command: 'fetch_profile',\n      username: username\n    })\n  }\n\n  editChangeProfile(editProfileObj){\n    // This function will recieve information when you edit an profile and will send\n    // the new edited profile object whne you save the edit\n\n    // The paraemeter editProfileObj will be an object that contains all the\n    // new edited information\n\n    this.sendExplore({\n      command: 'edit_profile',\n      editProfileObj: editProfileObj\n    })\n\n  }\n\n\n\n\n  sendFollowing = (follower, following) => {\n    // This function will set up the object and command to send\n    // to the backend. The follower is the person sending the following\n    // request and the following the person gettting the following\n\n    // Call function to send following (have to send it both ways now) Now I just have\n    // to send it into the single channe and rerender everytime (so much easier)\n    // found in the curuserprofile and personalprofile\n\n\n    this.sendExplore({\n      follower: follower,\n      following: following,\n      command: 'send_following'\n    })\n  }\n\n  sendUnFollowing = (follower, following) => {\n    // This function will be used to set up for unfollowing the user\n    // the follower again is the person doing the action and the following will\n    // be the person receving the follow\n\n\n    // Same spill as the send following\n\n    this.sendExplore({\n      follower: follower,\n      following: following,\n      command: 'send_unfollowing'\n    })\n\n\n  }\n\n  sendSocialEvent = (eventObj) => {\n    // The event object will be a dict of all the information on the event and\n    // it will be sent into the consumers, There will be a same one that will be going\n    // to the news feed\n\n    //This will be creating a soical event on the event page (can be made pretty\n    // easy with one single channel for that page ) Everytime you rerneder it will\n    // show up again\n    // This is in sendsocialeventpostmodal\n\n\n    this.sendExplore({\n      eventObj: eventObj,\n      command: 'create_social_event'\n    })\n  }\n\n  sendSocialEventParticipate = (userId, eventId, socialCalCellId) => {\n    // This event obj will just be that of the event list as well as the user\n    // who wants to join, so you will send it into the backend\n    // We will be getting the id of the user and the id of the event\n\n\n    // same deal with the sendsocialevent, should be made more efficient\n    // Find this in both the eventlist\n\n    console.log(userId, eventId)\n    this.sendExplore({\n      userId: userId,\n      eventId: eventId,\n      socialCalCellId: socialCalCellId,\n      command: 'add_user_social_event'\n    })\n  }\n\n\n  sendSocialEventLeave = (userId, eventId, socialCalCellId) => {\n    // This will get the userId to know which user to remove,\n    // eventId is to know which event to be removed from\n    // socialCalcellid to know which cell to add into\n\n    console.log(userId, eventId)\n\n    //same deal as sendSocialEventParticipate\n\n    this.sendExplore({\n      userId: userId,\n      eventId: eventId,\n      socialCalCellId: socialCalCellId,\n      command: 'remove_user_social_event'\n    })\n\n  }\n\n  sendSocialEventJoinPage = (userId, ownerId, eventId) => {\n    // Thsi will add the user to the events, this will be used\n    // mostly for the event page instead of the calendar event it self\n\n    // userId will be the person wanting to join\n    //ownerId will be the person's profile that the event is on\n    this.sendExplore({\n      userId: userId,\n      ownerId: ownerId,\n      eventId: eventId,\n      command: 'add_user_social_event_page'\n    })\n  }\n\n  sendSocialEventLeavePage = (userId, ownerId, eventId) => {\n\n\n    // This will remove the use form the events. Used for people leaving\n    // the events\n\n    this.sendExplore({\n      userId: userId,\n      ownerId: ownerId,\n      eventId: eventId,\n      command: 'remove_user_social_event_page'\n    })\n  }\n\n  sendAddCloseFriend = (curId, friendId) => {\n    // This will add friend with someone one, you will add them as close friend\n    // and then give them access to edit their social calendar\n\n\n    //curId will the current person id\n    // friendid will be the person you are trying to add as close friend\n\n\n    console.log(\"hit close friend\")\n    console.log(curId, friendId)\n    this.sendExplore({\n      curId: curId,\n      friendId: friendId,\n      command: 'add_user_close_friend'\n    })\n  }\n\n  sendUnfriend = (curId, friendId) => {\n    // This will pretty much be like sendAddCloseFriend but will be the opposite\n    // of it. It will be removing the friend\n\n    this.sendExplore({\n      curId: curId,\n      friendId: friendId,\n      command: 'remove_user_close_friend'\n    })\n  }\n\n  sendAcceptedSocialPics = (notificationId, ownerId, eventDate, curId) => {\n    // This function will be when the curUser accepts the pending of picturs\n    // of users. This function since we are trying to post pictures and we\n    // already have the pictures in the notifcationId, we will just call it in\n    // the back end and then add it to the social cal. (We will do a get or create\n    // on the soical cal\n\n    this.sendExplore({\n      notificationId: notificationId,\n      ownerId: ownerId,\n      eventDate: eventDate,\n      curId: curId,\n      command: 'approve_social_pics'\n    })\n\n  }\n\n\n\n  sendExplore(data){\n    // So this is just used as a way to send info into the backend\n    console.log(data)\n    console.log('send_folower_following')\n    try{\n      this.socketRef.send(JSON.stringify({...data }))\n    } catch (err) {\n      console.log(err.message)\n    }\n  }\n\n  state() {\n    return this.socketRef.readyState;\n  }\n\n  waitForSocketConnection(callback){\n    const socket = this.socketRef;\n    const recursion = this.waitForSocketConnection;\n    setTimeout(\n      function(){\n        if(socket.readyState === 1){\n          console.log('connection is secure')\n          if(callback != null){\n            callback();\n          }\n          return;\n        } else {\n          console.log('waiting for conneciton...')\n          recursion(callback)\n        }\n      }, 1)\n  }\n\n\n}\n\n\n\nconst ExploreWebSocketInstance = WebSocketExplore.getInstance();\n\n\n\nexport default ExploreWebSocketInstance;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/UserPostPageWebsocket.js",["714"],"// This websocket is gonna be sued for user post events. This iwll include\n// include acitons such as liking, commenting, editing the post and adding\n// into events\n\nclass WebSocketUserPostPage{\n  static instance = null;\n  callbacks = {};\n\n\n  static getInstance(){\n    // This will check if the instnace of the websocket exist if ti does not\n    // then it will make one\n    if(!WebSocketUserPostPage.instance){\n      WebSocketUserPostPage.instance = new WebSocketUserPostPage;\n    }\n\n    return WebSocketUserPostPage.instance\n\n  }\n\n\n  constructor(){\n    this.socketRef = null\n  }\n\n  connect(user, postId){\n    // This will be for connecting to each individaul user post events\n    // each one post will have its own channel. Similarly to the social cal cell\n    // this will make liking and commenting and such faster.\n\n    const path = 'ws://127.0.0.1:8000/ws/post/'+user+'/'+postId\n    console.log(path)\n    this.socketRef = new WebSocket(path)\n    this.socketRef.onopen = () =>{\n      console.log('websocket open')\n    }\n\n    this.socketRef.onmessage = (e) => {\n      this.socketNewUserPost(e.data)\n    }\n    this.socketRef.onerror = (e) => {\n      console.log('websocket is closed')\n    }\n    this.socketRef.onclose = () => {\n      console.log('websocket is closed')\n\n      // No recursion need for this\n    }\n\n  }\n\n  disconnect() {\n    console.log('disconnect')\n    this.socketRef.close()\n  }\n\n  fetchUserPostInfo(postId) {\n    console.log(\"fetch user post info\")\n    this.sendUserPostInfo({\n      command: \"fetch_user_post_info\",\n      postId: postId\n    })\n  }\n\n  sendUserPostLike (personLike, postId){\n    console.log(\"send like\")\n\n    this.sendUserPostInfo({\n      command: \"send_user_post_like\",\n      personLike: personLike,\n      postId: postId\n    })\n  }\n\n  sendUserPostUnlike(personUnlike, postId){\n    console.log(\"send unlike\")\n\n    this.sendUserPostInfo({\n      command: \"send_user_post_unlike\",\n      personUnlike: personUnlike,\n      postId: postId\n    })\n  }\n\n  sendUserPostComment(curUser, comment, postId){\n    console.log(comment)\n    // curUser will be the person commenting\n    this.sendUserPostInfo({\n      command: \"send_user_post_comment\",\n      curUser: curUser,\n      comment: comment,\n      postId: postId\n    })\n  }\n\n\n\n  socketNewUserPost(data){\n    const parsedData = JSON.parse(data);\n    const command = parsedData.command\n\n    console.log(parsedData)\n    if(command === \"user_post\"){\n      // This will load up the\n      const post = parsedData.post\n\n      // add callbacks here\n      this.callbacks['fetch_user_post_info'](post)\n\n    }\n    if(command === \"send_user_post_like_unlike\"){\n      const likeList = parsedData.likeList\n\n\n      // add callbacks for both like and unlike here (they are pretty much the same)\n      this.callbacks['send_user_post_like_unlike'](likeList)\n\n    }\n    if(command === \"send_user_post_comment\"){\n\n      // Add in the comments for the user post\n      const postComment = parsedData.postComment\n\n      // START HERE TOMORROW MORNING\n      this.callbacks['send_user_post_comment'](postComment)\n    }\n\n\n  }\n\n  addCallbacks(\n    fetchUserPostInfo,\n    sendUserPostLikeUnlike,\n    sendUserPostComment\n  ){\n    this.callbacks['fetch_user_post_info'] = fetchUserPostInfo\n    this.callbacks['send_user_post_like_unlike'] = sendUserPostLikeUnlike\n    this.callbacks['send_user_post_comment'] = sendUserPostComment\n  }\n\n  sendUserPostInfo(data){\n    try{\n      this.socketRef.send(JSON.stringify({...data}))\n    } catch(err){\n      console.log(err.message)\n    }\n  }\n\n  state(){\n    return this.socketRef.readyState\n  }\n\n  waitForSocketConnection(callback){\n    // This is a reucrsion that keeps trying to reconnect to the channel whenever\n    // it gets disconnected\n    const socket = this.socketRef;\n    const recursion = this.waitForSocketConnection;\n    setTimeout(\n      function(){\n        if(socket.readyState === 1){\n          console.log('connection is secure');\n          if(callback != null){\n            callback()\n          }\n          return;\n        } else {\n          console.log('waiting for connection...')\n          recursion(callback)\n        }\n      }, 1)\n  }\n\n\n}\n\nconst UserPostPageWebSocketInstance = WebSocketUserPostPage.getInstance();\n\nexport default UserPostPageWebSocketInstance;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/eventPageWebsocket.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/newChatSidePanelWebsocket.js",["715","716"],"// This will be for your over all chat. It will be used to cover\n// the side pandel, when ever you recieve a text message\n// or chat, it will be updated the side panel, whever you\n// recieve messages from other people, it will up date as well\n\nclass WebSocketNewChatSidePanel {\n  static instance = null;\n  callbacks = {}\n\n  static getInstance(){\n    if(!WebSocketNewChatSidePanel.instance){\n      WebSocketNewChatSidePanel.instance = new WebSocketNewChatSidePanel()\n    }\n\n    return WebSocketNewChatSidePanel.instance\n\n  }\n\n  constructor(){\n    this.socketRef = null\n  }\n\n\n  connect(chatUserId){\n    // This will be used for connecting to the whole chat. So the whole\n    // chat in itself will be a channel, and then each smaller chat will\n    // have its own channel\n\n    // I put the connect in the apps so that we have the chat\n    // already created so we can get  notificaiton and clicking\n    // on the right chat when you click on the chat tab\n\n    // GO INTO BACKEND AND START SETTING UP THE NEW CHANNEL\n    const path = 'ws://127.0.0.1:8000/ws/allChats/'+chatUserId\n    console.log(path)\n    this.socketRef = new WebSocket(path)\n    this.socketRef.onopen =() => {\n      console.log('websocket open')\n    }\n    this.socketRef.onmessage = (e) => {\n      console.log(e.data)\n\n      // put the onmessage receiever here\n      this.socketChatsList(e.data)\n    }\n\n    this.socketRef.onerror = (e) => {\n      console.log('websocket is closed')\n    }\n\n    this.socketRef.onclose = () => {\n      console.log('websocket is closed')\n\n      // Do you wnat the websocket to be recursiving ??\n      // We will see\n      // this.connect(chatUserId);\n    }\n\n\n\n  }\n\n  disconnect(){\n    // This will be called when you leave the chat page\n    console.log('disconnect')\n    this.socketRef.close()\n  }\n\n  socketChatsList(data){\n    // This will be all the actions\n    const parsedData = JSON.parse(data);\n    const command = parsedData.command\n    console.log(parsedData)\n\n    if(command == 'fetch_all_user_chats'){\n      const chatList = parsedData.chats\n\n      this.callbacks['fetch_chats'](chatList)\n    }\n    if(command == \"update_chat_list\"){\n      const chatList = parsedData.chatList\n\n      // Since this updating the chats too, the redux will be\n      // similar to the fetch chats so you cna just reuse the\n      // fetch_catch call back\n      this.callbacks['fetch_chats'](chatList)\n    }\n  }\n\n  fetchChats =(userId) => {\n    // This function will fetch all the chats that a user has\n    console.log('fetch chats')\n    this.sendChats({\n      userId: userId,\n      command: 'fetch_all_user_chats'\n    })\n  }\n\n  updateRecentChat = (chatId, senderId, message) =>{\n    // this function will be sent with the sendNewChatCreatedMessage\n    // function in the newchatwebsocket inorder to update the\n    // chat function.\n    this.sendChats({\n      chatId: chatId,\n      senderId: senderId,\n      message: message,\n      command: 'update_recent_chat'\n    })\n  }\n\n  updateRecentChatMessage = (chatId , senderId, message) => {\n    // This function will be similar to the updateRecentChat function\n    // but it will create the chat itself too instead of just filling in the\n    // current date of the chat\n    // This will be used for when you are typeing in the chat search\n    // and the chat is already created and so you just need to send it and pull\n    // it up\n    this.sendChats({\n      chatId: chatId,\n      senderId: senderId,\n      message: message,\n      command: 'update_recent_chat_message'\n    })\n\n  }\n\n  updateRecentChatEvent = (chatId, senderId) => {\n    // This function will be sent to the chat list when you share an event with the\n    // chat\n\n    this.sendChats({\n      chatId: chatId,\n      senderId: senderId,\n      command: 'update_recent_chat_event'\n    })\n  }\n\n  sendNewCreatedChat = (chatId) => {\n\n    // This function will accept the new created chat id and then send it out\n    // into the chatList of all other people that are part of the chat\n\n    this.sendChats({\n      chatId: chatId,\n      command: \"send_new_created_chat\"\n    })\n\n  }\n\n  sendSeen = (chatId, senderId) => {\n    // This function will add in the people into the seen list if they have\n    //  seen the message\n\n    // You will need the chat id to get the chat and then get the curId\n    // to add themselves in and then you send the chat list into the frontend\n    // in order to update the event list\n    this.sendChats({\n      command: \"send_chat_seen\",\n      chatId: chatId,\n      senderId: senderId\n    })\n  }\n\n\n  addCallbacks(\n    fetchAllUserChats\n  ){\n    this.callbacks['fetch_chats'] = fetchAllUserChats\n  }\n\n  sendChats(data){\n    // Used to send information into the backend\n    console.log(data)\n\n    try {\n      this.socketRef.send(JSON.stringify({...data}))\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  state(){\n    return this.socketRef.readyState\n  }\n\n  waitForSocketConnection(callback){\n    const socket = this.socketRef;\n    const recursion = this.waitForSocketConnection;\n    setTimeout(\n      function(){\n        if(socket.readyState === 1){\n          console.log('connection is secure');\n          if (callback != null){\n            callback()\n          }\n          return;\n        } else {\n          console.log('waiting for connection...')\n          recursion(callback)\n        }\n      }, 1)\n  }\n\n\n}\n\nconst ChatSidePanelWebSocketInstance = WebSocketNewChatSidePanel.getInstance()\n\nexport default ChatSidePanelWebSocketInstance;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/socialCalCellWebsocket.js",["717"],"// This websocket is gonna be used for the socialCalCell popup. This\n//  will include actions suchs as liking, commenting, editing events,\n// and adding into events\n\nclass WebSocketSocialCalCellPage{\n  static instance = null;\n  callbacks = {};\n\n  static getInstance(){\n    //This will check if the instance for the websocket exist if it doesnt then\n    // it will make one\n\n    if(!WebSocketSocialCalCellPage.instance){\n      WebSocketSocialCalCellPage.instance = new WebSocketSocialCalCellPage\n    }\n\n    return WebSocketSocialCalCellPage.instance\n  }\n\n  constructor(){\n    this.socketRef = null\n  }\n\n  connect(user, year, month, day){\n    //This will be for connecting to each individual soical cal cell page\n    //each one will be its own channel, this will optimize the liking and\n    // commenting\n    const path = 'ws://127.0.0.1:8000/ws/socialCalendarCellPage/'+user+'/'+year+'/'+month+'/'+day\n    console.log(path)\n    this.socketRef = new WebSocket(path)\n    this.socketRef.onopen = () => {\n      console.log('websocket open')\n    }\n\n    this.socketRef.onmessage = (e) => {\n\n\n      this.socketNewSocialCalCell(e.data)\n    }\n    this.socketRef.onerror = (e) => {\n      console.log('websocket is closed ')\n    }\n    this.socketRef.onclose = () => {\n      console.log('websocket is closed')\n      // Similar to the event page you will not need to recall the connect agian\n\n\n    }\n  }\n\n  disconnect() {\n    //This function will be used to disconnect with the channel when you open up\n    // each calendar cal cell\n    console.log('disconnect')\n    this.socketRef.close()\n  }\n\n  fetchSocialCalCellInfo(user, year, month, day){\n    // use to fetch the information from the right social cal event\n    console.log('fetch social cal cell info')\n    const cellDate = year+\"-\"+month+\"-\"+day\n    this.sendSocialCalCellInfo({\n      command: \"fetch_social_cal_cell_info\",\n      cellDate: cellDate,\n      cellUser: user\n    })\n  }\n\n  sendSocialCalCellLike (cellDate, personLike, owner){\n    //This is for liking the social cal cell\n    // The curDate and the owner will be used to either create the new social\n    // cal cell event or filter out the right one\n\n    this.sendSocialCalCellInfo({\n      command: \"send_social_cal_cell_like\",\n      cellDate: cellDate,\n      personLike: personLike,\n      cellOwner: owner\n\n    })\n\n  }\n\n  sendSocialCalCellUnlike(cellDate, personUnlike, owner) {\n    //This is for unliking the social cal cell\n    //The curDate and the owner will be used to either create the new social\n    //cal cell event or filter out the right one\n    this.sendSocialCalCellInfo({\n      command: \"send_social_cal_cell_unlike\",\n      cellDate: cellDate,\n      personUnlike: personUnlike,\n      cellOwner: owner\n    })\n  }\n\n  sendSocialCalCellComment(currentDate, curUser, comment, owner){\n    //This is to send comments in the social cal cell\n    // cellowner is an id\n    // personcomment is an id\n    console.log(currentDate, curUser, comment, owner)\n    this.sendSocialCalCellInfo({\n      command: \"send_social_cal_cell_comment\",\n      cellDate: currentDate,\n      personComment: curUser,\n      comment: comment,\n      cellOwner: owner\n    })\n  }\n\n  sendSocialEventJoin(userId, socialEventId, socialCalCellId, cellDate){\n    // This will send information for someone to join a social event\n    // UserID will be the perosn wanting to join the event\n    // eventid is for the event itself\n    //socialcalcellid is for the social cal cell identification\n\n    // The M is for the modal view\n    this.sendSocialCalCellInfo({\n      command: \"add_user_social_event_M\",\n      userId: userId,\n      socialEventId: socialEventId,\n      socialCalCellId: socialCalCellId,\n      cellDate: cellDate,\n    })\n  }\n\n  sendSocialEventLeave(userId, socialEventId, socialCalCellId, cellDate){\n    // This will let someone leave an event\n    // UserId will be the perosn wanting to leave the even\n    // eventId is for the even titiself\n\n    //Pretty similar to the socialeventjoin but just someone leaving instead\n    // of joining\n\n    this.sendSocialCalCellInfo({\n      command: \"remove_user_social_event_M\",\n      userId: userId,\n      socialEventId: socialEventId,\n      socialCalCellId: socialCalCellId,\n      cellDate: cellDate,\n\n    })\n  }\n\n  socketNewSocialCalCell(data){\n    //This is to process all the command in the backend and tell them where to\n    // go\n\n    const parsedData = JSON.parse(data);\n    const command = parsedData.command\n\n    console.log(parsedData)\n    if(command === 'fetch_social_cal_cell_info'){\n      // This will load up the information for the social cal cell page\n      const socialCalCellObj = parsedData.socialCalCell\n\n      // Add the call back in here\n      this.callbacks['fetch_social_cal_cell_info'](socialCalCellObj)\n\n    }\n    if(command === 'send_social_cal_cell_like_unlike'){\n      //This will send a like and unlike to the redux so it can show it in the front end\n\n      //Pretty much what you are ognna do it just repalce the whole like list\n      // with new one\n      const likeList = parsedData.likeList\n\n      // YOU WILL BE USING THIS FOR BOTH THE LIKING AND UNLIKING\n      this.callbacks['send_social_cal_cell_like_unlike'](likeList)\n    }\n    if(command === \"send_social_cal_cell_comment\"){\n      // This will send the comments\n\n      // You will just add the comment in at the end\n\n      const socialComment = parsedData.socialComment\n\n      this.callbacks['send_social_cal_cell_comment'](socialComment)\n    }\n    if(command === \"send_social_cal_cell_comment_new\"){\n      const socialComments = parsedData.socialComments\n\n      this.callbacks['send_social_cal_cell_comment_new'](socialComments)\n    }\n    if(command === \"add_user_social_event_M\"){\n      const socialEventList = parsedData.socialEventList\n\n      // ADD CALL BACKS HERE\n      this.callbacks['add_social_event_join_leave_M'](socialEventList)\n    }\n    if(command === \"remove_user_social_event_M\"){\n      const socialEventList = parsedData.socialEventList\n\n      this.callbacks['add_social_event_join_leave_M'](socialEventList)\n\n    }\n  }\n\n  addCallbacks(\n    fetchSocialCalCellInfo,\n    sendSocialCalCellLikeUnlike,\n    sendSocialCalCellComment,\n    sendSocialCalCellCommentNew,\n    addSocialEventJoinLeave,\n  ){\n    this.callbacks['fetch_social_cal_cell_info'] = fetchSocialCalCellInfo\n    this.callbacks['send_social_cal_cell_like_unlike'] = sendSocialCalCellLikeUnlike\n    this.callbacks['send_social_cal_cell_comment'] = sendSocialCalCellComment\n    this.callbacks['send_social_cal_cell_comment_new'] = sendSocialCalCellCommentNew\n    this.callbacks['add_social_event_join_leave_M'] = addSocialEventJoinLeave\n  }\n\n  sendSocialCalCellInfo(data){\n    //Send stuff in to the back end\n    try{\n      this.socketRef.send(JSON.stringify({...data}))\n    } catch (err){\n      console.log(err.message)\n    }\n  }\n\n\n  state(){\n    return this.socketRef.readyState\n  }\n\n  waitForSocketConnection(callback){\n    // This is a reucrsion that keeps trying to reconnect to the channel whenever\n    // it gets disconnected\n    const socket = this.socketRef;\n    const recursion = this.waitForSocketConnection;\n    setTimeout(\n      function(){\n        if(socket.readyState === 1){\n          console.log('connection is secure');\n          if(callback != null){\n            callback()\n          }\n          return;\n        } else {\n          console.log('waiting for connection...')\n          recursion(callback)\n        }\n      }, 1)\n  }\n\n\n}\n\nconst SocialCalCellPageWebSocketInstance = WebSocketSocialCalCellPage.getInstance();\n\nexport default SocialCalCellPageWebSocketInstance;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/socialEventPageWebsocket.js",["718"],"// This websocket is gonna be used for the event. This includes the inofmraiton\n// for the socialevent, editing the soical events, with group chats and inviting\n// sharing etc... more social features\n\nclass WebSocketSocialEventPage{\n  static instance = null;\n  callbacks = {};\n\n  static getInstance() {\n    // This will check if the instance for the websocket exist if it does not\n    // then it will make one\n    if(!WebSocketSocialEventPage.instance){\n      WebSocketSocialEventPage.instance = new WebSocketSocialEventPage();\n    }\n\n    return WebSocketSocialEventPage.instance\n  }\n\n  constructor(){\n    this.socketRef = null\n  }\n\n  connect(socialEventId){\n    // This will connect individually whne you opne up the soical events. Each social\n    // event will be its own channel, like a big gropu chat\n\n    const path = 'ws://127.0.0.1:8000/ws/socialCalendarEvent/'+socialEventId\n    console.log(path)\n    // This will make a new WebSocket with teh path name\n    this.socketRef = new WebSocket(path)\n    this.socketRef.onopen = () => {\n      // This will pretty much open the websocket. if you want to run anything\n      // during the connect this is where you would do it\n      console.log('websocket open')\n    }\n    this.socketRef.onmessage = (e) => {\n      // This will be where the information will be sent to after the backend consumers\n      // gets sent to the frontend\n      this.socketNewSocialMessage(e.data)\n    }\n    this.socketRef.onerror = (e) => {\n      // this will be run if there is an error running or connecting\n      console.log('websocket is closed')\n    }\n\n    this.socketRef.onclose = () => {\n      console.log('websocket is closed')\n      // unlike the other websockets that are made, this one will not be  recursion\n      // because you dont want it to connect after you disconnect for this one\n    }\n  }\n\n  disconnect() {\n    // This function will be used to disconnect with the channel whneever you are\n    // trying to switch between event pages\n    console.log('disconnected')\n    this.socketRef.close()\n  }\n\n  fetchSocialMessages(socialEventId){\n    // This will fetch all the messages of that specific event\n    console.log('fetch social messages')\n    this.sendSocialMessage({\n      command: \"fetch_social_event_messages\",\n      socialEventId: socialEventId\n    })\n  }\n\n  sendSocialEventMessage = (message, userId, eventId) => {\n    // This will send the social event message from the group chats\n\n    // So you need the message to make the message, the userId to know who sent\n    // the message and then the eventId will be used to know which event to connect\n    // it will\n    console.log('send social event messages')\n    this.sendSocialMessage({\n      command: 'send_social_event_message',\n      message: message,\n      userId: userId,\n      socialEventId: eventId\n    })\n  }\n\n  sendEditSocialEvent = (editSocialEventObj) => {\n    // This is for editing the social event\n    console.log(editSocialEventObj)\n\n    this.sendSocialMessage({\n      command: 'send_social_edit_event_info',\n      editSocialEventObj: editSocialEventObj\n    })\n\n  }\n\n  sendSocialEventDelete = (eventId) => {\n    // This function will delete the social event from your page\n    // Then we have to find all the personal cal evnets from people's calendar\n    // and delete all of them too but that is for later\n    console.log(eventId)\n    this.sendSocialMessage({\n      command: 'send_social_event_delete',\n      eventId: eventId\n    })\n\n  }\n\n  socketNewSocialMessage(data){\n    // This will be the function that will be calling the callbacks\n    console.log('call backs')\n\n    const parsedData= JSON.parse(data);\n    const command = parsedData.command;\n\n    console.log(parsedData)\n    if(command === 'fetch_social_event_info'){\n      console.log('here here here')\n      const eventInfo = parsedData.eventInfo\n      const messages = parsedData.eventInfo.get_socialEventMessage\n\n      const socialEventInfoObj = {\n        eventInfo: eventInfo,\n        messages: messages\n      }\n      this.callbacks['fetch_social_event_info'](socialEventInfoObj)\n\n    }\n    if(command === 'send_social_event_message'){\n      console.log('sup sup sup')\n      const socialMessageObj = parsedData.socialEventMessgaeObj\n      const socialEventId = parsedData.socialEventId\n      this.callbacks['send_social_event_message'](socialMessageObj)\n    }\n\n    if(command === \"edited_social_event\"){\n      const eventObj = parsedData.editedSocialEvent\n\n      // ADD CALL BACKS HERE\n      this.callbacks['update_social_event_page'](eventObj)\n    }\n\n    if(command === 'delete_social_eventNotification'){\n\n      // ADD CALLBACK HERE\n      this.callbacks['delete_social_event_noti']();\n\n    }\n  }\n\n  addCallbacks(\n    fetchSocialEventInfo,\n    sendSocialMessageCallbacks,\n    updateSocialEventCallbacks,\n    sendSocialEventDeleteNoti\n  ){\n    this.callbacks['fetch_social_event_info'] = fetchSocialEventInfo\n    this.callbacks['send_social_event_message'] = sendSocialMessageCallbacks\n    this.callbacks['update_social_event_page'] = updateSocialEventCallbacks\n    this.callbacks['delete_social_event_noti'] = sendSocialEventDeleteNoti\n  }\n\n  sendSocialMessage (data){\n    // This is for the function that actually sends stuff to the backedn\n    try{\n      this.socketRef.send(JSON.stringify({...data}))\n    } catch (err){\n      console.log(err.message);\n    }\n  }\n\n  state(){\n    // Return how the websocket is doing. 0 is not good and 1 is working\n    return this.socketRef.readyState\n  }\n\n  waitForSocketConnection(callback){\n    // This is a reucrsion that keeps trying to reconnect to the channel whenever\n    // it gets disconnected\n    const socket = this.socketRef;\n    const recursion = this.waitForSocketConnection;\n    setTimeout(\n      function(){\n        if(socket.readyState === 1){\n          console.log('connection is secure');\n          if(callback != null){\n            callback()\n          }\n          return;\n        } else {\n          console.log('waiting for connection...')\n          recursion(callback)\n        }\n      }, 1)\n  }\n\n}\n\n\nconst SocialEventPageWebSocketInstance = WebSocketSocialEventPage.getInstance();\n\nexport default SocialEventPageWebSocketInstance;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/actions/nav.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/actions/notifications.js",["719"],"import axios from \"axios\";\nimport * as actionTypes from \"./actionTypes\";\n\nexport const setNotifications = notifications => {\n  return {\n    type: actionTypes.SET_NOTIFICATIONS,\n    notifications: notifications\n  };\n};\n\n\nexport const newNotification = notification => {\n  return {\n    type: actionTypes.NEW_NOTIFICATION,\n    notification: notification\n  };\n};\n\nexport const deleteNotification = notificationId => {\n  return {\n    type: actionTypes.DELETE_NOTIFICATION,\n    notificationId: notificationId\n  }\n}\n\n\nexport const openNotification = () => {\n  return {\n    type: actionTypes.OPEN_NOTIFICATION,\n  }\n}\n\n\nexport const closeNotification = () => {\n  return {\n    type: actionTypes.CLOSE_NOTIFICATION\n  }\n}\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/actions/explore.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/actions/messages.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/actions/socialCalendar.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/actions/newsfeed.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/actions/auth.js",["720","721","722","723","724","725"],"import axios from \"axios\";\nimport * as actionTypes from \"./actionTypes\";\nimport React, {useState, useEffect } from 'react';\nimport  { authAxios } from '../../components/util';\n\n\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\n\nexport const authSuccess = (token) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token,\n\n  };\n};\n\n\nexport const addCredentials = (\n   username,\n   id,\n   friends,\n   posts,\n   firstName,\n   lastName,\n   profilePic,\n   following,\n   followers\n ) => {\n  return {\n    type: actionTypes.ADD_CREDENTIALS,\n    username: username,\n    id: id,\n    friends: friends,\n    posts: posts,\n    firstName: firstName,\n    lastName: lastName,\n    profilePic: profilePic,\n    following: following,\n    followers: followers\n  };\n};\n\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\n\nexport const logout = () => {\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"expirationDate\");\n  localStorage.removeItem(\"username\");\n  localStorage.removeItem('id')\n  localStorage.removeItem('friends')\n  localStorage.removeItem('posts')\n  localStorage.removeItem('firstName')\n  localStorage.removeItem('lastName')\n  localStorage.removeItem('profilePic')\n  localStorage.removeItem('following')\n  localStorage.removeItem('followers')\n  localStorage.removeItem('suggestedFriends')\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\n\nexport const checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\n\n\n\nexport const authLogin = (username, password) => {\n  // const[id, setID] = useState(null);\n  // const[username1, setUsername1] = useState('');\n  return dispatch => {\n    dispatch(authStart());\n\n\n\n\n\n\n\n        authAxios.get('http://127.0.0.1:8000/userprofile/suggestedFriends')\n          .then(res=> {\n            localStorage.setItem(\"suggestedFriends\", (res.data.username));\n\n         });\n\n\n        axios.post(\"http://127.0.0.1:8000/rest-auth/login/\", {\n          username: username,\n          password: password\n        })\n\n\n      .then(res => {\n        console.log(res.data)\n\n\n        // setUsername1(res2.data.username)\n        // setID(res2.data.id)\n        const token = res.data.key;\n        const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n        const username1 = res.data.username;\n        const id = res.data.id;\n        localStorage.setItem(\"token\", token);\n        localStorage.setItem(\"expirationDate\", expirationDate);\n\n        dispatch(authSuccess(token));\n        window.location.reload(true);\n        return axios.get('http://127.0.0.1:8000/userprofile/current-user')\n      })\n      .then(res => {\n            console.log(res.data)\n            const username1 = res.data.username;\n            const id = res.data.id;\n            const friends = res.data.friends;\n\n            localStorage.setItem(\"username\", username1);\n            localStorage.setItem(\"id\", id);\n            localStorage.setItem('friends', friends);\n\n            dispatch(addCredentials(\n               res.data.username,\n               res.data.id,\n               res.data.friends,\n               res.data.get_posts,\n               res.data.first_name,\n               res.data.last_name,\n               res.data.profile_picture,\n               res.data.get_following,\n               res.data.get_followers\n             ));\n            dispatch(checkAuthTimeout(3600));\n\n        })\n          .catch(err => {\n            dispatch(authFail(err));\n          });\n  };\n};\n\n\nexport const grabUserCredentials = () => {\n  // THIS IS THE ONE THAT GRABS THE CURRENT USER INFO\n  // const[id, setID] = useState(null);\n  // const[username1, setUsername1] = useState('');\n  return dispatch => {\n\n\n    authAxios.get('http://127.0.0.1:8000/userprofile/current-user')\n      .then(res => {\n        console.log(res)\n        const username1 = res.data.username;\n        const id = res.data.id;\n        const friends = res.data.friends;\n        const posts = res.data.get_posts;\n        const firstName = res.data.first_name;\n        const lastName = res.data.last_name;\n        const profilePic = res.data.profile_picture;\n        const following = res.data.get_following;\n        const followers = res.data.get_followers;\n        localStorage.setItem(\"username\", username1);\n        localStorage.setItem(\"id\", id);\n        localStorage.setItem('friends', friends);\n        localStorage.setItem('posts', posts);\n        localStorage.setItem('firstName', firstName);\n        localStorage.setItem('lastName', lastName);\n        localStorage.setItem('profilePic', profilePic);\n        localStorage.setItem('following', following);\n        localStorage.setItem('followers', followers);\n        dispatch(addCredentials(\n           res.data.username,\n           res.data.id,\n           res.data.friends,\n           res.data.get_posts,\n           res.data.first_name,\n           res.data.last_name,\n           res.data.profile_picture,\n           res.data.get_following,\n           res.data.get_followers\n         ));\n         {/*when it times out*/}\n        dispatch(checkAuthTimeout(100000));\n\n      })\n      .catch(err => {\n        dispatch(authFail(err));\n      });\n\n\n    }\n\n  }\n\n\nexport const authSignup = (first_name, last_name, dob, bio, email, phone_number, password1, password2) => {\n  return dispatch => {\n    dispatch(authStart());\n    axios\n      .post(\"http://127.0.0.1:8000/rest-auth/registration/\", {\n        first_name: first_name,\n        last_name: last_name,\n        dob: dob,\n        bio: bio,\n        email: email,\n        phone_number: phone_number,\n        password1: password1,\n        password2: password2\n      })\n      .then(res => {\n        const token = res.data.key;\n        const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n        localStorage.setItem(\"token\", token);\n        localStorage.setItem(\"expirationDate\", expirationDate);\n        dispatch(authSuccess(token));\n        dispatch(checkAuthTimeout(3600));\n      })\n      .catch(err => {\n        dispatch(authFail(err));\n      });\n  };\n};\n\n// Where we get token and username and id for each login\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem(\"token\");\n        if (token === undefined) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        dispatch(authSuccess(token));\n        dispatch(grabUserCredentials())\n        const username = localStorage.getItem('username')\n        const id = localStorage.getItem('id')\n        dispatch(addCredentials(username, id));\n        dispatch(\n          checkAuthTimeout(\n            (expirationDate.getTime() - new Date().getTime()) / 1000\n          )\n        );\n      }\n    }\n  };\n};\n\nexport const editProfileAuth = (editProfileObj) => {\n  return {\n    type: actionTypes.EDIT_PROFILE_AUTH,\n    editProfileObj: editProfileObj\n  }\n}\n\n\nexport const changeProfilePicAuth = (profilePic) => {\n  return {\n    type: actionTypes.CHANGE_PROFILE_PIC_AUTH,\n    profilePic: profilePic\n  }\n}\n\nexport const addRemoveCloseFriend = (friendList) => {\n  console.log(friendList)\n  return {\n    type: actionTypes.ADD_REMOVE_CLOSE_FRIEND,\n    friendList: friendList\n  }\n}\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/Popup.js",["726"],"import React from 'react';\nimport { Modal } from 'antd';\nimport Form from  './AddFriends'\n\n\nclass AddChatModal extends React.Component {\n  render() {\n    console.log(this.props.close)\n\n    return (\n      <div>\n        <Modal\n          centered\n          footer={null}\n          visible={this.props.isVisible}\n          onCancel={this.props.close}\n        >\n        <Form />\n        // change the form to whatever form you like\n        </Modal>\n\n      </div>\n    );\n  }\n}\n\n\nexport default AddChatModal;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/actions/calendars.js",["727"],"import axios from \"axios\";\nimport * as actionTypes from \"./actionTypes\";\nimport { authAxios } from '../../components/util';\n\n\n// Might not have to use this if we are gonna use Redux Form\nexport const addEvent = events => {\n  console.log(events)\n  return {\n    type:actionTypes.ADD_EVENT_CALENDAR,\n    events: events\n  }\n}\n\n// So you just have to call this in the front end so that it will change the props\nexport const getUserEvents = () => {\n  // since we are going to call an action in here so we need to use dispatch\n  console.log('hit')\n  return dispatch => {\n    authAxios.get('http://127.0.0.1:8000/mycalendar/events')\n    .then(res => dispatch(loadEvents(res.data))\n  )};\n};\n\n// this will basically just be the middle man\nexport const loadEvents = events => {\n  return {\n    type: actionTypes.LOAD_EVENTS_CALENDAR,\n    events: events\n  }\n}\n\nexport const editEvents = events => {\n  // pass in 1 event that we edited and you will go into the backend and edit the\n  // states\n  console.log(events)\n  return {\n    type: actionTypes.EDIT_EVENT_CALENDAR,\n    instanceEvent: events\n  }\n}\n\nexport const deleteEvents = eventId => {\n  console.log(eventId)\n  authAxios.delete('http://127.0.0.1:8000/mycalendar/events/delete/'+eventId)\n  return {\n    type: actionTypes.DELETE_EVENT_CALENDAR,\n    eventId: eventId\n  }\n}\n\n\n// This function will get the current date\nexport const getDate = date =>{\n  return {\n    type: actionTypes.GET_DATE,\n    selectedDate: date\n  }\n}\n\nexport const nextMonth = () => {\n  return {\n    type: actionTypes.NEXT_MONTH\n  }\n}\n\nexport const prevMonth = () => {\n  return {\n    type: actionTypes.PREV_MONTH\n  }\n}\n\nexport const nextWeek = () => {\n  return {\n    type: actionTypes.NEXT_WEEK\n  }\n}\n\nexport const prevWeek = () => {\n  return {\n    type: actionTypes.PREV_WEEK\n  }\n}\n\nexport const nextDay = () => {\n  return {\n    type: actionTypes.NEXT_DAY\n  }\n}\n\nexport const prevDay = () => {\n  return {\n    type: actionTypes.PREV_DAY\n  }\n}\n\nexport const nextYear = () => {\n  console.log('nextYear')\n  console.log('herherherherh')\n  return {\n    type: actionTypes.NEXT_YEAR\n  }\n}\n\nexport const prevYear = () => {\n  console.log('prevYear')\n  return {\n    type: actionTypes.PREV_YEAR\n  }\n}\n\nexport const acceptEventShare = (acceptShareObj) => {\n  return {\n    type: actionTypes.ACCEPT_EVENT_SHARE,\n    acceptShareObj: acceptShareObj\n  }\n}\n\nexport const declineElseEventShare = (declineShareObj) => {\n  return{\n    type: actionTypes.DECLINE_ELSE_EVENT_SHARE,\n    declineShareObj: declineShareObj\n  }\n}\n\nexport const declineEventShare = (declineShareObj) => {\n  return {\n    type: actionTypes.DECLINE_EVENT_SHARE,\n    declineShareObj: declineShareObj\n  }\n}\n\nexport const loadEventInfo = (eventInfoObj) => {\n  // This will load the events into the event page, pretty much just holding all\n  // the information, and messages for that one event on the event page\n  return {\n    type: actionTypes.LOAD_EVENT_INFO,\n    eventInfoObj: eventInfoObj\n  }\n}\n\nexport const sendEventMessage = (eventMessageObj) => {\n  // This will be used to send the message into the message field so that it\n  // can show up in the group chats in side the event page\n  return {\n    type: actionTypes.SEND_EVENT_MESSAGE,\n    message: eventMessageObj\n  }\n}\n\n\nexport const openAcceptUnshareModal = (eventObj, tempDifference) => {\n  console.log(tempDifference)\n  return {\n    type: actionTypes.OPEN_ACCEPT_UNSHARE_MODAL,\n    eventObj: eventObj,\n    tempDifference: tempDifference\n  }\n}\n\nexport const closeAcceptUnshareModal = () => {\n  return{\n    type: actionTypes.CLOSE_ACCEPT_UNSHARE_MODAL,\n  }\n}\n\nexport const updateEventPage = (updatedEventObj) => {\n  // This will be used to update the event page when you make an edit, not sure if\n  // it will change it for everyon who is on the page\n  return{\n    type: actionTypes.UPDATE_EVENT_PAGE,\n    updatedEventObj: updatedEventObj\n  }\n}\n\nexport const updateEventBackground = (backgroundPic) => {\n  // This will be used to update the background pic on the event, it will pretty much\n  // take in a string of the location of the image\n  console.log(backgroundPic)\n  return {\n    type: actionTypes.UPDATE_EVENT_BACKGROUND,\n    backgroundPic: backgroundPic\n  }\n}\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/actions/actionTypes.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/utility.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NewsFeedView.js",["728","729","730","731","732","733","734","735","736","737","738","739","740","741"],"import React from 'react';\nimport InfiniteList from './InfiniteScroll';\nimport PostUpload from '../components/Forms2';\nimport NewsFeedFormPost from '../components/NewsFeedFormPost';\nimport NewNewsfeedFormPost from '../components/NewNewsfeedFormPost';\nimport axios from 'axios';\nimport {connect} from 'react-redux';\nimport * as actions from '../store/actions/auth';\nimport Layouts from './Layouts/Layouts.js';\nimport SuggestedFriends from './Layouts/SuggestedFriends.js';\nimport ExploreWebSocketInstance from '../exploreWebsocket';\nimport ProfileCardNewsFeed from '../components/ProfileCardNewsFeed';\nimport TodayEvents from './todayEvents';\nimport { Link } from 'react-router-dom';\nimport { Row, Col, Card, Upload, Divider, Checkbox,\n\t Avatar, Statistic, Button} from 'antd';\nimport { InboxOutlined, UserOutlined } from '@ant-design/icons';\nimport * as dateFns from 'date-fns';\nimport NoFoundPage from './403.jsx';\nimport './NewsFeedView.css'\n// Function: Holds Forms3 and the Infinite scroll\nclass NewsFeedView extends React.Component {\n\n\tstate={\n\t\tprofileList:[],\n\t\tusername: '',\n\t\tid: '',\n\t\tpostShow:false,\n\t\tpicShow:false,\n\t}\n\n\tconstructor(props){\n\t\tsuper(props)\n\t\t// this.initialiseExplore()\n\t}\n\n\tinitialiseExplore(){\n    // This will pretty much be for loading up the users following status, because\n    // later we are gonna have a search function, so you want to throw this in one\n    // of the very first things\n    this.waitForSocketConnection(()=> {\n      // Expl\toreWebSocketInstance.fetchFollowerFollowing()\n\t\t\t// ExploreWebSocketInstance.fetchCurrentUserProfile(this.props.currentUser)\n    })\n  }\n\n\twaitForSocketConnection (callback) {\n    const component = this;\n    setTimeout(\n      function(){\n\n        if (ExploreWebSocketInstance.state() === 1){\n\n          callback();\n          return;\n        } else{\n\n            component.waitForSocketConnection(callback);\n        }\n      }, 100)\n\n  }\n\n\n\tpostCondition = () => {\n    this.setState({\n\t\t\tpicShow:false,\n      postShow: !(this.state.postShow),\n    });\n  };\n\n\n\tpicCondition = () => {\n    this.setState({\n\t\t\tpostShow:false,\n      picShow: !(this.state.picShow),\n    });\n  };\n\n\n\tcomponentWillReceiveProps(newProps){\n\t\tthis.props.grabUserCredentials();\n\t\tconsole.log(newProps);\n\t\tif(newProps.token){\n\t\t\taxios.defaults.headers = {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\tAuthorization: newProps.token,\n\t\t\t}\n\t\t\taxios.get('http://127.0.0.1:8000/userprofile/list/')\n\t\t\t.then(res=> {\n\t\t\t\tthis.setState({\n\t\t\t\t\tprofileList:res.data,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t}\n\n\tonViewAlbum = () => {\n\t\t// This function will be used to open up the current day cal cell modal\n\t\tconsole.log('this props')\n\t}\n\n\trender() {\n\t\tconst { Dragger } = Upload;\n\t\tconst isLoggedIn = this.props.isAuthenticated;\n\t\tconsole.log(this.props)\n\t\tconst curDate = new Date()\n\n\t\tlet username = \"\"\n\t\tconst cellYear = dateFns.getYear(curDate)\n\t\tconst cellMonth = dateFns.getMonth(curDate)+1\n\t\tconst cellDay = dateFns.getDate(curDate)\n\t\tif(this.props.username){\n\t\t\tusername = this.props.username\n\t\t}\n\n\t\tconsole.log(cellYear, cellMonth, cellDay)\n\t\tconst location = this.props.location.pathname;\n\n\t\treturn (\n\t\t\t<div>\n\n\n\t\t\t{isLoggedIn ?\n\n\n\n\n\t\t\t\t<Row style = {{\n\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\tposition: 'relative',\n\t\t\t\t\tmarginTop:'10px',\n\t\t\t\t\tmarginLeft: '350px',\n\t\t\t\t}}>\n\n\n\t\t\t\t<div>\n\t\t\t\t\t<div class=\"headers\">\n\t\t\t\t\t<Col\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\tmarginLeft:'-125px', marginRight:'125px'}}\n\t\t\t\t\t\tspan={5}\n\t\t\t\t\t\tclass=\"scroller\"\n\t\t\t\t\t\t>\n\n\n\n\t\t\t\t\t<ProfileCardNewsFeed\n\t\t\t\t\t\tprofile = {this.props.currentProfile} />\n\n\n\n\n\n\t\t\t\t\t</Col>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<Col style={{}} span={11}>\n\n\n\n\t\t\t\t<div>\n\n\t\t\t\t\t<div>\n\n\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t<Row gutter={20}>\n\n\n\t\t\t\t\t\t\t<Col span={8}>\n\n\n\t\t\t\t\t\t\t\t<div onClick ={this.postCondition} class=\"topCard\">\n\n\n\t\t\t\t\t\t\t\t\t<i class=\"far fa-edit share\" style={{fontSize:'25px', color:'#1890ff'}}></i>\n\t\t\t\t\t\t\t\t\t <p  class=\"cardAlign\"> Write a post </p>\n\n\t\t\t\t\t\t\t\t</div>\n\n\n\t\t\t\t      </Col>\n\n\t\t\t\t\t\t\t<Col span={8}>\n\n\n\t\t\t\t\t\t\t\t<div class=\"topCard\" onClick ={this.picCondition}>\n\n\t\t\t\t\t\t\t\t\t<i class=\"fas fa-plus share\" style={{fontSize:'25px', color:'#1890ff'}}></i>\n\n\t\t\t\t\t\t\t\t\t <p  class=\"cardAlign\"> Create event  </p>\n\n\t\t\t\t\t\t\t\t</div>\n\n\n\t\t\t\t      </Col>\n\n\n\t\t\t\t\t\t\t<Col span={8}>\n\n\t\t\t\t\t\t\t<Link to = {{\n\t\t\t\t\t\t\t\tpathname:\"/socialcal/\"+username+\"/cell/\"+cellYear+\"/\"+cellMonth+\"/\"+cellDay,\n\t\t\t\t\t\t\t\tstate:{pathname:location}\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t >\n\t\t\t\t\t\t\t\t<div class=\"topCard\">\n\n\t\t\t\t\t\t\t\t\t<i class=\"far fa-image share\" style={{fontSize:'25px', color:'#1890ff'}}></i>\n\n\t\t\t\t\t\t\t\t\t <p  class=\"cardAlign\"> View album </p>\n\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</Link>\n\n\t\t\t\t      </Col>\n\n\t\t\t\t\t\t\t<div >\n\n\n\n{\n\tthis.state.postShow?\n\n\t<div style={{marginTop:'50px'}}>\n\n\t<NewNewsfeedFormPost />\n\n\t</div>\n\n\n\n\t:\n\n\t\t\t\t<div>\n\n\t\t\t\t{\n\t\t\t\t\t!this.state.picShow?\n\t\t\t\t\t<div>\n\n\n\n\t\t\t\t\t</div>\n\n\n\t\t\t\t:\n\n\t\t\t\t<div style={{marginTop:'100px'}}>\n\n\n\t\t\t\tdsafsdfasfd\n\n\n\t\t\t\t</div>\n\n\n\t\t\t\t}\n\n\t\t\t\t </div>\n\n\n\t\t\t }\n\n\n\n\n\n\n\n\t\t\t\t\t\t\t <div>\n\n\n\n\t\t\t\t\t\t\t\t\t<div className = 'newsfeed' >\n\t\t\t\t\t\t\t\t\t\t<InfiniteList data={this.props} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t{/*\n\t\t\t\t\t\t\t\t\t\t<div class=\"rightBox\">\n\t\t\t\t\t\t\t\t\t\t <Layouts/>\n\t\t\t\t\t\t\t\t\t </div>\n\t\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t </div>\n\t\t\t\t\t\t\t </div>\n\n\n\t\t\t\t\t\t\t </Row>\n\t\t\t\t\t\t\t </div>\n\t\t\t\t\t </div>\n\n\n\n\t\t\t\t</div>\n\n\t\t\t\tLoading...\n\t\t\t</Col>\n\t\t\t<div style={{marginLeft:'125px'}}>\n\t\t\t\t<div class=\"headers\">\n\t\t\t\t\t<Col style={{}}  span={6}\n\t\t\t\t\t\tclass=\"scroller\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle = {{\n\n\t\t\t\t\t\t\twidth: '400px',\n\t\t\t\t\t\t\tbackground:'white',\n\t\t\t\t\t\t\t// postion: 'fixed',\n\t\t\t\t\t\t\tposition: 'relative',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tclass=\"morePeopleBox\"\n\n\t\t\t\t\t\t>\n\n\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t class=\"morePeopleHeader\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tMore People\n\t\t\t\t\t\t</div>\n\n\n\t\t\t\t\t\t\t\t<div>\n\n\t\t\t\t\t\t\t\t<SuggestedFriends  style={{position:'fixed'}}{...this.props}/>\n\n\t\t\t\t\t\t{/*\n\t\t\t\t\t\t<div class=\"shadowBox suggestFriendsCSS\" style = {{\n\n\t\t\t\t\t\t\theight: '250px',\n\t\t\t\t\t\t\twidth: '400px',\n\n\t\t\t\t\t\t\t// postion: 'fixed',\n\t\t\t\t\t\t\t// overflow: 'hidden',\n\n\t\t\t\t\t\t\tmarginTop:120,\n\t\t\t\t\t\t}}>\n\n\n\n\t\t\t\t\t\t\t<span  style={{textAlign:'center', fontSize:'18px',marginTop:'200px'}}>\n\t\t\t\t\t\t\t\tToday's events\n\n\t\t\t\t\t\t\t</span>\n\n\t\t\t\t\t\t\t<Divider/>\n\t\t\t\t\t\t\t<TodayEvents {...this.props}/>\n\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t*/}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t</Col>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t</Row>\n\n\t\t\t\t\t :\n\n\n\t\t\t\t\t <div>\n\t\t\t\t\t \t\t< NoFoundPage />\n\n\t\t\t\t\t\t</div>}\n\n\n    </div>\n\t\t)\n\t}\n}\n\n\n\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token,\n\t\tcurrentUser: state.auth.username,\n\t\tcurrentProfile: state.explore.profile\n  }\n}\nconst mapDispatchToProps = dispatch => {\n\t// function: grab user ID and username to put into forms\n  return {\n    grabUserCredentials: () => dispatch(actions.grabUserCredentials()),\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(NewsFeedView);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/403.jsx",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/LoginPage/Login.js",["742","743","744","745","746","747","748","749"],"import React from \"react\";\n// import {\n//   Button,\n//   Form,\n//   Grid,\n//   Header,\n//   Message,\n//   Segment\n// } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport { NavLink, Redirect, } from \"react-router-dom\";\nimport { BrowserRouter as Router} from \"react-router-dom\";\nimport { authLogin } from \"../../store/actions/auth\";\nimport NotificationWebSocketInstance from '../../notificationWebsocket';\nimport pic1 from './LoginCalendar.svg';\nimport pic2 from './loginHelloPic2.svg';\nimport 'antd/dist/antd.css';\nimport { Form } from '@ant-design/compatible';\nimport '@ant-design/compatible/assets/index.css';\nimport { Input, Button, Checkbox } from 'antd';\n// Function: logs user in\nclass LoginForm extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  state = {\n    username: \"\",\n    password: \"\",\n    login: false,\n\n  };\n\n  handleUserName = e => {\n     const tempVal = e.target.value;\n     console.log(e.target)\n     console.log(tempVal)\n     console.log(e.target.test)\n    this.setState({ username: tempVal});\n  };\n\n  handlePasword = e => {\n     const tempVal = e.target.value;\n     console.log(e.target)\n     console.log(tempVal)\n     console.log(e.target.test)\n    this.setState({password: tempVal});\n  };\n\n  handleSubmit = e => {\n    const { username, password } = this.state;\n    console.log(username)\n    console.log(password)\n    this.props.login(username, password)\n    this.setState({login: true })\n  };\n\n  render() {\n    console.log(this.state)\n    const { error, loading, token } = this.props;\n    const { username, password } = this.state;\nif (token) {\n       return <Redirect to=\"/home\" />\n    }\n\n    const layout = {\n\n      // controls how far left/right the login is on the page\n      labelCol: {\n        span: 6,\n      },\n      // how long the size of user/pass input box is\n      wrapperCol: {\n        span: 4,\n      },\n    };\n    const tailLayout = {\n      wrapperCol: {\n        offset: 6,\n\n      },\n    };\n\n    return (\n      <div>\n\n        <div>\n\n          <Form\n          {...layout}\n          name=\"basic\"\n          initialValues={{ remember: true }}\n          // onSubmit = {this.handleSubmit}\n          >\n            <Form.Item\n            onChange={this.handleUserName}\n            test=\"username\"\n            label=\"Username\"\n\n            >\n              <Input />\n            </Form.Item>\n\n            <Form.Item\n              onChange={this.handlePasword}\n              value={password}\n              test=\"password\"\n              label=\"Password\"\n            >\n              <Input.Password />\n            </Form.Item>\n\n            <Form.Item {...tailLayout} name=\"remember\" valuePropName=\"checked\">\n              <Checkbox>Remember me</Checkbox>\n            </Form.Item>\n\n            <Form.Item {...tailLayout}>\n              <Button\n               htmlType = 'submit'\n               type=\"primary\"\n               onClick={this.handleSubmit}\n               loading={loading}\n               >\n                Submit\n\n              </Button>\n            </Form.Item>\n\n        </Form>\n      </div>\n\n      <img src={pic1} width=\"30%\" style={{marginRight:\"250px\"}}/>\n      <img src={pic2} width=\"30%\"/>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  // you get the token here\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    token: state.auth.token,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  // the actual login in function is in here and this is from redux (store)\n  return {\n    login: (username, password) => dispatch(authLogin(username, password))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LoginForm);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/SideMenu/SideMenu.js",["750","751","752","753","754","755","756","757","758","759","760","761","762","763","764","765","766","767","768","769","770","771","772","773","774","775","776"],"import React from 'react';\nimport {\n  CalendarOutlined,\n  HeartTwoTone,\n  HomeOutlined,\n  InboxOutlined,\n  LogoutOutlined,\n  MenuFoldOutlined,\n  MenuUnfoldOutlined,\n  SearchOutlined,\n  SettingOutlined,\n  SmileOutlined,\n  UploadOutlined,\n  NotificationOutlined,\n  UserOutlined,\n  VideoCameraOutlined,\n} from '@ant-design/icons';\nimport {Link, withRouter} from 'react-router-dom';\nimport {browserHistory} from 'react-router';\nimport testPic from './antd.png';\nimport {\n  Drawer,\n  Layout,\n  Row,\n  Col,\n  Dropdown,\n  Menu,\n  Breadcrumb,\n  Space,\n  Input,\n  Avatar,\n  Button,\n  Divider,\n  AutoComplete,\n  Badge,\n  Select,\n  Option,\n} from 'antd';\nimport \"./SideMenu.css\"\nimport * as dateFns from 'date-fns';\nimport { authAxios } from '../../components/util';\nimport SuggestedFriends from '../../containers/Layouts/SuggestedFriends.js';\n\nimport * as navActions from '../../store/actions/nav';\nimport * as notificationsActions from '../../store/actions/notifications';\nimport * as actions from '../../store/actions/auth';\nimport PickEventSyncModal from '../../containers/PersonalCalendar/EventSyncForms/PickEventSyncModal';\nimport * as eventSyncActions from '../../store/actions/eventSync';\nimport NotificationsDropDown from '../../containers/NotificationsDropDown';\nimport Notifications from '../../containers/Notifications';\nimport defaultPicture from '../images/default.png';\nimport './style.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\n\n\nimport { connect } from 'react-redux';\nconst { Header, Sider, Content } = Layout;\nconst { Search } = Input;\n\n\n\nclass SideMenu extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      dataSource: [],\n      collapsed:true,\n      profileList:[],\n      name:'',\n    };\n  }\n  toggle = () => {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    });\n  };\n\n\n\n\n  componentDidMount(){\n    authAxios.get('http://127.0.0.1:8000/userprofile/all-users')\n      .then(res=> {\n        console.log(res)\n        this.setState({\n          profileList:res.data,\n       });\n      });\n\n  }\n\n  onSelect = (value) => {\n    console.log('onSelect', value);\n    window.location.href = 'http://localhost:3000/explore/'+value\n  }\n\n  handleSearch = (value) => {\n   this.setState({\n     dataSource: ['test1', 'test2', 'test3']\n   });\n }\n\n\n  onShowNotification = () => {\n    if (this.props.showNotification === true){\n      this.props.closeNotification()\n    }\n    else if (this.props.showNotification === false){\n      this.props.openNotification()\n    }\n  }\n\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  render() {\n    const currentDay = new Date()\n    const selectYear = dateFns.getYear(currentDay).toString()\n    const selectMonth = (dateFns.getMonth(currentDay)+1).toString()\n    const selectDay = dateFns.getDate(currentDay).toString()\n    let profilePic = ''\n    let firstName = ''\n    let lastName = ''\n\n\n    console.log(this.props)\n    if (this.props.profilePic){\n      profilePic = 'http://127.0.0.1:8000'+this.props.profilePic\n    } if (this.props.firstName){\n      firstName = this.props.firstName\n    } if (this.props.lastName){\n      lastName = this.props.lastName\n    }\n\n\n\n\n    const { dataSource } = this.state;\n    const { Option } = Select;\n\n    const temp=[]\n    this.state.profileList.forEach(item => {\n      temp.push(\n        <Option value = {item.username}\n        label = {this.capitalize(item.username)}>\n          <div style={{padding:'10px'}}>\n            <Avatar\n              style={{marginRight:'10px'}}\n              size=\"small\"\n              src={item.profile_picture}/>\n            <span>\n              {this.capitalize(item.first_name)} {this.capitalize(item.last_name)}\n              <br/>\n              <div\n                class=\"headerPostText\"\n                style={{marginLeft:'35px'}}\n              >\n                {\"@\"+item.username}\n              </div>\n            </span>\n          </div>\n\n        </Option>\n      );\n    })\n    console.log(temp)\n\n\n\n\n    return (\n      <div style={{marginBottom:20}}>\n\n\n\n\n      <Layout>\n\n\n\n\n      <Header className=\"site-layout HeaderPosition appearBefore\" style={{    position: 'fixed', background:'white' }}>\n        <p class =\"\">\n                <aside class=\"sidebar\" >\n                <div class=\"toggle\">\n                  {/*\n                    <MenuFoldOutlined\n\n                      >\n                    </MenuFoldOutlined>\n\n\n                    */}\n                  {/*\n                    <a href=\"#collapseExample\" role = \"button\"\n                      class=\"burger js-menu-toggle\" data-toggle=\"collapse\" >\n                          <span></span>\n                    </a>\n                    */}\n                    <span\n\n                      role = \"button\"\n                      class=\" js-menu-toggle\"\n                      data-toggle=\"collapse\"\n                      style = {{\n                      color: 'black',\n                      marginLeft:'20%',\n                      fontSize:'20px',\n                    }}>\n                      {React.createElement(this.state.collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {\n\n                        onClick: this.toggle,\n                      })}\n                    </span>\n\n\n                </div>\n\n                <div class=\"side-inner\">\n\n                  <div class=\"logo-wrap\">\n                    <div class=\"logo\">\n                      <span>S</span>\n                    </div>\n                    <span class=\"logo-text\">hareOrb</span>\n                  </div>\n\n\n                  <div class=\"nav-menu\">\n                    <ul class=\"sidebarList\">\n                      <li><a href=\"/home\" class=\"d-flex align-items-center\"> <HomeOutlined  style={{marginRight:'10px'}}/><span class=\"menu-text\">Home</span></a></li>\n                      {/*<li ><a href=\"/explore\" class=\"d-flex align-items-center\"><UserOutlined style={{marginRight:'10px',}}/><span class=\"menu-text\">Explore</span></a></li>\n                    */}\n                    <li><a href={\"/chat/\"+this.props.curChatId} class=\"d-flex align-items-center\"><InboxOutlined style={{marginRight:'10px'}}/><span class=\"menu-text\">Messages</span></a></li>\n                      <li><a href={\"/personalcalendar/w/\"+selectYear+'/'+selectMonth+'/'+selectDay}\n                        class=\"d-flex align-items-center\">\n                        <CalendarOutlined style={{marginRight:'10px'}}/>\n                        <span class=\"menu-text\">Personal</span>\n                        <span style={{marginLeft:'5px'}} class=\"menu-text\">Calendar</span>\n                      </a></li>\n\n                      <li><a href={\"/explore/\"+this.props.username}\n                        class=\"d-flex align-items-center\">\n                        <SmileOutlined style={{marginRight:'10px'}}/>\n                          <span class=\"menu-text\">Social</span>\n                          <span style={{marginLeft:'5px'}} class=\"menu-text\">Calendar</span></a>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n\n              </aside>\n\n        </p>\n\n        {/*<div class=\"toggle\">\n          <a href=\"#collapseExample\" role = \"button\" class=\"burger js-menu-toggle\" data-toggle=\"collapse\" >\n                <span></span>\n              </a>\n        </div>\n\n\n\n\n        */}\n\n\n\n         <AutoComplete\n           dataSource={temp}\n\n           filterOption={(inputValue, option) =>\n             option.props.children.toUpperCase().\n             indexOf(inputValue.toUpperCase()) !== -1}\n           onSearch={this.handleSearch}\n           onSelect={this.onSelect}\n           dropdownClassName=\"certain-category-search-dropdown\"\n           dropdownMatchSelectWidth={550}\n           style={{\n            // marginLeft:150,\n            marginLeft:'33%',\n            marginRight:'12%', width: 550,\n           // backgroundColor: 'red'\n         }}\n\n         >\n        <Input.Search size=\"large\" placeholder=\"Search\" />\n      </AutoComplete>\n\n\n\n      <span style={{marginRight:'50px'}}>\n        <Badge count={5}>\n        test\n       </Badge>\n      </span>\n\n\n\n\n\n\n\n\n      <Button onClick = {() => this.onShowNotification()}>\n          <Notifications {...this.props}/>\n      </Button>\n\n\n\n\n    <span\n      class=\"pointerEvent\"\n      style = {{\n        float:'right',\n        marginRight:'100px',\n      }}\n    >\n         <Dropdown overlay={\n           <Menu style = {{\n         }}\n         selectedKeys={[]} >\n             { (\n               <Menu.Item style={{marginTop:'-2px'}} key=\"center\">\n                 <Link to={\"/explore/\"+this.props.username}>\n                   <i style={{marginRight:'3px' }} class=\"far fa-user\"></i>\n                   <span style={{marginLeft:'2px'}}> Profile</span>\n\n                 </Link>\n\n               </Menu.Item>\n             )}\n             { (\n               <Menu.Item key=\"settings\">\n                 <i class=\"fas fa-cog\"></i>\n                 <span style={{marginLeft:'2px'}}> Settings</span>\n               </Menu.Item>\n             )}\n             { <Menu.Divider style={{marginTop:'-1px',marginBottom:'-1px'}}/>}\n             <Menu.Item key=\"logout\" onClick={this.props.logout}>\n               <Link to=\"/\">\n                 <i class=\"fas fa-sign-out-alt\"></i>\n                 <span style={{marginLeft:'2px'}}> Logout</span>\n               </Link>\n             </Menu.Item>\n           </Menu>}>\n\n\n\n\n           <span >\n           {\n             profilePic != '' ?\n               <Avatar\n               size=\"large\"\n               src={profilePic}\n               alt=\"avatar\"\n               className = 'miniProfilePic'\n                />\n\n               :\n\n               <Avatar\n               size=\"large\"\n               className = 'miniProfilePic'\n               src={defaultPicture} alt=\"avatar\" />\n           }\n             <span>{this.capitalize(firstName)} {this.capitalize(lastName)}</span>\n           </span>\n\n       </Dropdown>\n       </span>\n\n      </Header>\n\n      // outer boundary\n        <Layout className=\"site-layout\" style={{\n          background:'#f5f5f5',\n          display:'flex',\n\n        }}>\n\n          {/* length of banner from the very top*/}\n\n          <Content\n\n\n            style={{\n\n              // backgroundColor: 'red'\n\n            }}\n          >\n\n\n\n              {this.props.children}\n          </Content>\n        </Layout>\n      </Layout>\n\n\n\n\n\n      <div class=\"newsfeed\">\n\n      </div>\n\n      <div>\n        <PickEventSyncModal\n        // {... this.props}\n        isVisible = {this.props.showPickEventSyncModal}\n        close = {this.props.closePickEventSyncModal} />\n      </div>\n     </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return{\n    firstName: state.auth.firstName,\n    lastName: state.auth.lastName,\n    notificationDrop: state.nav.showPopup,\n    showPickEventSyncModal: state.eventSync.showPickEventSyncModal,\n    id: state.auth.id,\n    username: state.auth.username,\n    showNotification: state.notifications.showNotification,\n    notifications: state.notifications.notifications,\n    profilePic: state.auth.profilePic,\n    curChatId: state.message.curChatId\n  }\n}\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n        closeNotification: () => dispatch(navActions.closePopup()),\n        openNotification: () => dispatch(navActions.openPopup()),\n        logout: () => dispatch(actions.logout()),\n        openPickEventSyncModal: (user, userFriend, minDate, maxDate, notificationId) => dispatch(eventSyncActions.openPickEventSyncModal(\n          user,\n          userFriend,\n          minDate,\n          maxDate,\n          notificationId\n        )),\n        closePickEventSyncModal: () => dispatch(eventSyncActions.closePickEventSyncModal()),\n        openNotification: () =>dispatch(notificationsActions.openNotification()),\n        closeNotification: () => dispatch (notificationsActions.closeNotification())\n    }\n}\n\n\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SideMenu));\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EventPage/EventPage.js",["777","778","779","780","781","782","783"],"import React from 'react';\nimport axios from 'axios';\nimport {Card, Button, Row, Col, Input} from 'antd';\nimport { Link, } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport EventGroupChat from './EventGroupChat';\nimport EventInfo from './EventInfo';\nimport EventPageWebSocketInstance from '../../../eventPageWebsocket';\n\nclass EventPage extends React.Component{\n//this takes each of the value of the individual evnets and\n//returns them\n\n//states are specific objects of a class\n\tstate={\n\t\tprofileInfo:{},\n\t}\n\n\tinitialiseChat() {\n\t\tthis.waitForSocketConnection(()=> {\n\t\t\tEventPageWebSocketInstance.fetchMessages(\n\t\t\t\tthis.props.parameter.eventId\n\t\t\t)\n\t\t})\n\t\tif(this.props.parameter.eventId){\n\t\t\tEventPageWebSocketInstance.connect(this.props.parameter.eventId)\n\n\t\t}\n\n\t}\n\n\tconstructor(props){\n\t\t// Initialise the event page\n\t\tsuper(props)\n\n\t\tconsole.log('hit here too')\n\t}\n\n\tcomponentDidMount (){\n\t\tthis.initialiseChat()\n\t}\n\n\twaitForSocketConnection(callback){\n\t\t// This is pretty much a recursion that tries to reconnect to the websocket\n\t\t// if it does not connect\n\t\tconst component = this;\n\t\tsetTimeout(\n\t\t\tfunction(){\n\t\t\t\tconsole.log(EventPageWebSocketInstance.state())\n\t\t\t\tif (EventPageWebSocketInstance.state() === 1){\n\t\t\t\t\tconsole.log('connection is secure');\n\t\t\t\t\tcallback();\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log('waiting for connection...')\n\t\t\t\t\tcomponent.waitForSocketConnection(callback)\n\t\t\t\t}\n\t\t\t}, 100)\n\t}\n\n\n\tcomponentWillReceiveProps(newProps){\n\t\tconsole.log(newProps)\n\n\t\tif(this.props.parameter.eventId !== newProps.parameter.eventId){\n\t\t\tEventPageWebSocketInstance.disconnect();\n\t\t\tthis.waitForSocketConnection(()=>{\n\t\t\t\tEventPageWebSocketInstance.fetchMessages(\n\t\t\t\t\tnewProps.parameter.eventId\n\t\t\t\t)\n\t\t\t})\n\t\t\tEventPageWebSocketInstance.connect(newProps.parameter.eventId)\n\n\t\t}\n\n\t}\n\n\tcomponentWillUnmount(){\n\t\tEventPageWebSocketInstance.disconnect();\n\n\t}\n\n\trender() {\n\n\t\tconsole.log(this.props)\n\n\t\treturn (\n      <div className = 'eventPageContainer'>\n\n\t\t\t\t<EventInfo\n\t\t\t\tinfo = {this.props.eventInfo}\n\t\t\t\tuserId = {this.props.id}\n\t\t\t\thistory = {this.props.history}\n\t\t\t\t />\n\n\n\t\t\t\t<EventGroupChat\n\t\t\t\tinfo = {this.props.eventInfo}\n\t\t\t\tmessages = {this.props.eventMessages}\n\t\t\t\teventId = {this.props.eventInfo.id}\n\t\t\t\tinviteList = {this.props.eventInfo.invited}\n\t\t\t\t />\n\n\n    </div>\n\n\t\t)\n\t }\n }\n\n const mapStateToProps = state => {\n   return {\n     token: state.auth.token,\n\t\t eventInfo: state.calendar.selectedEvent,\n\t\t eventMessages: state.calendar.eventMessages,\n\t\t id: state.auth.id\n   }\n }\n\nexport default connect(mapStateToProps)(EventPage);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/AllUsersNotCurrNotCurrFriends.js",["784","785","786","787","788","789","790","791","792","793","794","795"],"import React from 'react';\nimport ProfilePost from '../components/Form';\nimport UserProfileCard from '../components/UserProfiles/UserProfileCard.js'\nimport { Image } from 'react-bootstrap';\nimport axios from 'axios';\nimport {connect} from 'react-redux';\nimport { authAxios } from '../components/util';\nimport './Container_CSS/Explore.css';\nimport ava1 from '../components/images/avatar.jpg';\nimport ava2 from '../components/images/avatar2.jpg';\nimport ava3 from '../components/images/avatar3.jpg';\nimport ava4 from '../components/images/avatar4.jpg';\nimport ava5 from '../components/images/avatar5.jpg';\nimport ava6 from '../components/images/avatar6.jpg';\nimport ava7 from '../components/images/avatar7.jpg';\nimport ava8 from '../components/images/avatar8.jpg';\nimport ava9 from '../components/images/avatar9.jpg';\nimport ava10 from '../components/images/avatar10.jpg';\nimport ava11 from '../components/images/avatar11.jpg';\nimport ava12 from '../components/images/avatar12.jpg';\nimport ava13 from '../components/images/avatar13.jpg';\nimport ava14 from '../components/images/avatar14.jpg';\n\n\n\n\nimport { Row, Col, Divider } from 'antd';\n// Function: Gives a list of all users that are not the current user and current user friends\nclass AllUsersNotCurrNotCurrFriends extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  state={\n\t\tprofileList:[],\n\t}\n\n  componentDidMount(){\n    authAxios.get('http://127.0.0.1:8000/userprofile/explore')\n      .then(res=> {\n        console.log(res)\n        this.setState({\n          profileList:res.data,\n       });\n      });\n  }\n\n  componentWillReceiveProps(newProps) {\n    if(newProps.isAuthenticated){\n      authAxios.get('http://127.0.0.1:8000/userprofile/explore')\n        .then(res=> {\n          console.log(res)\n          this.setState({\n            profileList:res.data,\n         });\n        });\n    }\n  }\n\n  renderFriendList () {\n    const {profileList} = this.state\n    let peopleList = []\n    const images = [ava1, ava2, ava3, ava4, ava5, ava6, ava7, ava8, ava9, ava10 ,ava11 ,ava12, ava13, ava14]\n    {profileList.map((j,index) => {\n      console.log(j)\n      peopleList.push(\n        <UserProfileCard data = {j}/>\n      )\n    })}\n    return peopleList\n  }\n\n// the map((j,index) => {}) will loop through all the objects\n\trender() {\n    const {profileList} = this.state\n    console.log(this.props)\n\t\treturn (\n      <div className = 'people-grid'>\n        {this.renderFriendList()}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\nexport default AllUsersNotCurrNotCurrFriends;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/Signup.js",["796","797"],"import React from 'react';\nimport 'antd/dist/antd.css';\nimport { Form } from '@ant-design/compatible';\nimport '@ant-design/compatible/assets/index.css';\nimport { Input, Button } from 'antd';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport * as actions from '../store/actions/auth';\nimport { LockOutlined, MailOutlined, QuestionCircleOutlined, UserOutlined } from '@ant-design/icons';\n\nconst FormItem = Form.Item;\n\nclass Signup extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n    state = {\n      confirmDirty: false,\n    };\n    //this handle submit is a funciton that handles\n    // the all functions from here down is use to put restrictions on fields of the signup\n    compareToFirstPassword = (rule, value, callback) => {\n      debugger;\n      const form = this.props.form;\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords do not match')\n      } else {\n        callback();\n      }\n    }\n\n    validateToNextPassword = (rule, value, callback) => {\n      debugger;\n      const form = this.props.form;\n      if (value && this.state.confirmDirty) {\n        form.validateFields(['confirm'], {force: true});\n      }\n      callback();\n    }\n\n    validateLength = (rule, value, callback) => {\n      if (value.length < 8 && value.length > 1) {\n        callback('Password must be at least 8 characters!')\n      } else {\n      callback();\n      }\n    }\n\n    validateUpper = (rule, value, callback) => {\n      if(value.search(/[A-Z]/) < 0) {\n        return callback('Password must have a upper case letter!')\n      }else {\n        callback();\n        }\n      }\n\n    validateNumeric = (rule, value, callback) => {\n      if(value.search(/[0-9]/) < 0) {\n        return callback('Password must have a number!')\n      }else {\n        callback();\n        }\n      }\n\n    handleSubmit = (e) => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err && values.password.length > 8) {\n          this.props.onAuth(\n            values.first_name,\n            values.last_name,\n            values.dob,\n            values.bio,\n            values.email,\n            values.phone_number,\n            values.password,\n            values.confirm,\n          );\n          this.props.history.push('/home');\n        }\n    });\n  }\n\n\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n      return (\n        <Form onSubmit={this.handleSubmit}>\n\n        <FormItem>\n            {getFieldDecorator('first_name', {\n                rules: [{ required: true, message: 'Please input your first name!' }],\n            })(\n                <Input prefix={<UserOutlined style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder=\"First Name\" />\n            )}\n        </FormItem>\n        <FormItem>\n            {getFieldDecorator('last_name', {\n                rules: [{ required: true, message: 'Please input your last name!' }],\n            })(\n                <Input prefix={<UserOutlined style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder=\"Last Name\" />\n            )}\n        </FormItem>\n\n        <FormItem>\n            {getFieldDecorator('dob', {\n                rules: [{ required: true, message: 'Please input your date of birth!' }],\n            })(\n                <Input prefix={<UserOutlined style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder=\"Date of Birth\" />\n            )}\n        </FormItem>\n\n        <FormItem>\n            {getFieldDecorator('bio', {\n                rules: [{ required: true, message: 'Please input your bio!' }],\n            })(\n                <Input prefix={<UserOutlined style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder=\"Biography\" />\n            )}\n        </FormItem>\n        <FormItem>\n\n          {getFieldDecorator('email', {\n            rules: [{\n              type: 'email', message: 'The input is not valid E-mail!',\n            }, {\n              required: true, message: 'Please input your E-mail!',\n            }],\n          })(\n            <Input prefix={<MailOutlined style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder=\"Email\" />\n          )}\n        </FormItem>\n        <FormItem>\n            {getFieldDecorator('phone_number', {\n                rules: [{ required: true, message: 'Please input your phone number!' }],\n            })(\n                <Input prefix={<UserOutlined style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder=\"Phone Number\" />\n            )}\n        </FormItem>\n        <FormItem>\n          {getFieldDecorator('password', {\n            rules: [{\n              required: true, message: 'Please input your password!',\n            }, {\n              validator: this.validateToNextPassword,\n            }, {\n              validator: this.validateLength,\n            }, {\n              validator: this.validateUpper,\n            }, {\n              validator: this.validateNumeric,\n            }],\n          })(\n            <Input prefix={<LockOutlined style={{ color: 'rgba(0,0,0,.25)' }} />} type=\"password\" placeholder=\"Password\"/>\n          )}\n        </FormItem>\n\n        <FormItem>\n          {getFieldDecorator('confirm', {\n            rules: [{\n              required: true, message: 'Please confirm your password!',\n            }, {\n              validator: this.compareToFirstPassword,\n            }],\n          })(\n            <Input prefix={<LockOutlined style={{ color: 'rgba(0,0,0,.25)' }} />} type=\"password\" placeholder=\"Password\" onBlur={this.handleConfirmBlur} />\n          )}\n        </FormItem>\n\n        <FormItem>\n          <Button type=\"primary\" htmlType=\"submit\" style={{marginRight: '10px'}}>\n              Signup\n          </Button>\n          Or\n          <NavLink\n              style={{marginRight: '10px'}}\n              to='/login/'> login\n          </NavLink>\n        </FormItem>\n        </Form>\n      );\n  }\n}\n\nconst WrappedSignup = Form.create()(Signup);\n\n\nconst mapStateToProps = (state) => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n  // this is where the actual sign up fucntion is called\n    return {\n        onAuth: (first_name, last_name, dob, bio, email, phone_number, password1, password2) => dispatch(actions.authSignup(first_name, last_name, dob, bio, email, phone_number, password1, password2)),\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WrappedSignup);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/Explore.js",["798","799","800","801"],"import React from 'react';\nimport './Container_CSS/Explore.css';\nimport ExploreWebSocketInstance from '../exploreWebsocket';\nimport { connect } from 'react-redux';\nimport AllUsersNotCurrNotCurrFriends from './AllUsersNotCurrNotCurrFriends'\n\n\n\nclass Explore extends React.Component {\n  constructor(props){\n    super(props);\n  }\n\n  state = {\n\n  }\n\n  // initialiseExplore(){\n  //   this.waitForSocketConnection(()=> {\n  //     ExploreWebSocketInstance.fetchFollowerFollowing(\n  //       this.props.id\n  //     )\n  //   })\n  // }\n\n  componentDidMount(){\n    // ExploreWebSocketInstance.connect(this.props.username)\n    this.showPanel(0, 'transparent')\n    var tabs = document.getElementsByClassName('Tab');\n    Array.prototype.forEach.call(tabs, function(tab) {\n\t       tab.addEventListener('click', setActiveClass);\n    });\n\n    function setActiveClass(evt) {\n\t       Array.prototype.forEach.call(tabs, function(tab) {\n\t\t          tab.classList.remove('active');\n\t           });\n\n\t            evt.currentTarget.classList.add('active');\n            }\n\n  }\n\n  // waitForSocketConnection (callback) {\n  //   const component = this;\n  //   setTimeout(\n  //     function(){\n  //\n  //       if (ExploreWebSocketInstance.state() === 1){\n  //\n  //         callback();\n  //         return;\n  //       } else{\n  //\n  //           component.waitForSocketConnection(callback);\n  //       }\n  //     }, 100)\n  //\n  // }\n\n  showPanel = (panelIndex, colorCode) =>{\n    var tabButtons= document.querySelectorAll('.tabContainer .buttonContainer .Tab')\n    var tabPanels= document.querySelectorAll('.tabContainer .tabPanel')\n    if (tabButtons.length > 0 && tabPanels.length > 0){\n      tabButtons.forEach(function(node){\n        node.style.backgroundColor = \"\";\n        node.style.color = \"\";\n      })\n      tabButtons[panelIndex].style.backgroundColor = colorCode;\n      tabButtons[panelIndex].style.color = '#363636';\n      tabPanels.forEach(function(node){\n        node.style.display = 'none'\n      })\n      tabPanels[panelIndex].style.display = 'block';\n      tabPanels[panelIndex].style.backgroundColor = colorCode;\n\n    }\n\n  }\n\n\n\n\n\n  render() {\n\n    var tabs = document.getElementsByClassName('Tab');\n    Array.prototype.forEach.call(tabs, function(tab) {\n\t       tab.addEventListener('click', setActiveClass);\n    });\n\n    function setActiveClass(evt) {\n\t       Array.prototype.forEach.call(tabs, function(tab) {\n\t\t          tab.classList.remove('active');\n\t           });\n\n\t            evt.currentTarget.classList.add('active');\n            }\n\n\n    return (\n      <div className = 'tabContainer'>\n        <div className = 'buttonContainer'>\n          <div className = 'description_tab active Tab' onClick = {() => this.showPanel(0, 'transparent')} > People</div>\n          <div className = 'description_tab Tab' onClick = {() => this.showPanel(1, 'transparent')}> Posts </div>\n          <div className = 'description_tab Tab' onClick = {() => this.showPanel(2, 'transparent')}> Events </div>\n          <div className = 'slider'></div>\n        </div>\n        <div className = 'tabPanel'>\n          <AllUsersNotCurrNotCurrFriends />\n         </div>\n        <div className = 'tabPanel'> Tab 2: Content </div>\n        <div className = 'tabPanel'> Tab 3: Content </div>\n      </div>\n    )\n\n\n  }\n\n\n\n}\n\nconst mapStateToProps = state =>{\n  return {\n    id: state.auth.id,\n    username: state.auth.username\n  }\n}\n\nexport default Explore;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/ArticleDetailView.js",["802"],"import React from 'react';\nimport axios from 'axios';\nimport {Card, Button} from 'antd';\nimport ProfilePost from '../components/Form';\nimport { Link, } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\n\nclass ArticleDetail extends React.Component{\n//this takes each of the value of the individual profiles and\n//returns them\n\n//states are specific objects of a class\n\tstate={\n\t\tprofileInfo:{},\n\t}\n//componentDidMount will be mounted the first thing as a class get run\n//const articleID will take id values\n\n//axios will then get the specific profiles from the backend using the\n//url\n\n//when getting each profile by the appropriate id, set state will then\n//update the state with res.data (this is where all the profile data inspect\n// is stored)\n\ncomponentWillReceiveProps(newProps){\n\tconsole.log(newProps);\n\tif(newProps.token){\n\t\taxios.defaults.headers = {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tAuthorization: newProps.token,\n\t\t}\n\t\t\tconsole.log(\"made it to aricle detailncompoennt\");\n\t    const articleID = this.props.match.params.id;\n\n\t\t\taxios.get('http://127.0.0.1:8000/api/newsfeed/'+articleID)\n\t\t\t\t.then(res=> {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tprofileInfo:res.data,\n\t\t\t\t });\n\t\t\t\t});\n\t}\n}\n\n\n\thandleDelete= (event) => {\n\t\tif(this.props.token !== null){\n\t\t\tevent.preventDefault();\n\t\t\tconst articleID = this.props.match.params.id;\n\t\t\taxios.defaults.headers = {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\tAuthorization: this.props.token,\n\t\t\t}\n\t\t\tconsole.log(\"This is deleted article ID: \"+ articleID);\n\n\t\t} else {\n\t\t\t\t// message\n\t\t}\n\t  // ADD AXIOS IN HERE DIRECTLY IN THE COMPONENT DID MOUTN METHOD\n\t}\n\n\n\n\t// promise and event listener\n\n//this will return a card with the card title being the profile first name\n//the paragraph inside will be the last time (these are taken from viewsets)\n\trender() {\n\t\tconsole.log(\"BUTTON!!!\t\")\n\t\tconsole.log(this.props)\n\t\tvar temp=document.getElementById('buttonPush');\n\t\tif(temp){\n\t\t\ttemp.addEventListener('click', function(){\n\t\t\tconsole.log(\"tewst\");\n\n\t\t\tdocument.location.href = '/';\n\n\n\t\t\t})\n\t\t\tconst articleID = this.props.match.params.id;\n\t\t\taxios.delete('http://127.0.0.1:8000/api/profiles/'+articleID);\n\t\t}\n\n\n\t\treturn (\n\t\t\t<div>\n\t      <Card title = { this.state.profileInfo.first_name } >\n\t        <p> { this.state.profileInfo.last_name } </p>\n\t\t\t\t\t<ProfilePost\n\t\t\t\t\t\trequestType = \"put\"\n\t\t\t\t\t\tarticleID = {this.props.match.params.id}\n\t\t\t\t\t\tbtnText = 'Update'\n\t\t\t\t\t/>\n\t\t\t\t\t<form name=\"buttonDelete\" onSubmit={this.handleDelete}>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t type= \"danger\"\n\t\t\t\t\t\t\t htmlType=\"submit\"\n\t\t\t\t\t\t\t id=\"buttonPush\"\n\t\t\t\t\t\t\t >\n\t\t\t\t\t\t\t Delete\n\t\t\t\t\t\t\t </Button>\n\t\t\t\t\t</form>\n\t      </Card>\n\t\t\t</div>\n\t\t)\n\t }\n }\n\n const mapStateToProps = state => {\n   return {\n     token: state.auth.token\n   }\n }\n\nexport default connect(mapStateToProps)(ArticleDetail);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/InfiniteScroll.js",["803"],"\nimport React from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport NewsFeedPost from '../containers/NewsfeedItems/NewsFeedPost';\nimport { authAxios } from '../components/util';\nimport './InfiniteScroll.css';\nimport WebSocketPostsInstance from  '../postWebsocket';\n\n\n// Fucntion: take in all the post and then put them in an infinite scroll list\nclass InfiniteList extends React.Component {\n  constructor(props){\n    super(props);\n    this.initialisePost()\n    this.state = {\n      error: false,\n      loading: false,\n      post: [],\n      hasMore: true,\n      offset: 0,\n      limit: 3,\n    };\n    window.onscroll = () => {\n      const {\n        loadPost,\n        state: { error, loading, hasMore} } = this;\n      if (error || loading || !hasMore) return;\n      if (document.documentElement.scrollHeight -\n        document.documentElement.scrollTop ===\n        document.documentElement.clientHeight\n      ) {  //call some loading METHOD\n        loadPost();\n      }\n    };\n  }\n\n  initialisePost(){\n    this.waitForSocketConnection(() =>{\n      WebSocketPostsInstance.fetchPosts(this.props.id)\n      // WebSocketPostsInstance.fetchComments(this.props.data.id)\n    })\n  }\n\n  waitForSocketConnection(callback){\n    const component = this\n    setTimeout(\n      function(){\n        if(WebSocketPostsInstance.state() ===1){\n          callback();\n          return;\n        } else {\n          component.waitForSocketConnection(callback);\n        }\n      }, 100)\n  }\n\n\n  componentDidMount() {\n    WebSocketPostsInstance.connect()\n\n  }\n\n  componentWillMount() {\n    this.loadPost();\n    // WebSocketPostsInstance.connect()\n\n  };\n\n  loadPost = () => {\n     this.setState({loading: true}, () => {\n       const {offset, limit} = this.state;\n       authAxios.get(\n         'http://127.0.0.1:8000/userprofile/infinite-post/?limit='+limit+'&offset='+offset\n\n       )\n       .then(res => {\n         const newPost = res.data.post;\n         const hasMore = res.data.has_more;\n         this.setState({\n           hasMore,\n           loading: false,\n           post:  [...this.state.post, ...newPost],\n           offset: offset + limit,\n         });\n       })\n       .catch(err => {\n         this.setState({\n           error: err.message,\n           loading: false\n         });\n       });\n     });\n  };\n\n  render () {\n    console.log(this.props)\n    // const { error, hasMore, loading, post} = this.state\n    let post = this.props.posts\n\n    // {error  && <div>{error}</div>}\n    // {loading && <div>Loading...</div>}\n    // {!hasMore && <div>No more results</div>}\n\n    return (\n\n\n      <div style={{ flex: 1}}>\n\n        <div class=\"intro\" style={{color:'black', fontSize:25, marginTop:'40px'}}>\n          Welcome, {this.props.data.username}. Here's what's going on today! </div>\n\n      <hr />\n\n      {post.map((j,index) => {\n        return <NewsFeedPost\n          history = {this.props.data.history}\n         data = {j}  />\n      })}\n\n     </div>\n   );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    id: state.auth.id,\n    friends: state.auth.friends,\n    posts: state.newsfeed.posts\n  }\n}\n\nexport default connect(mapStateToProps)(InfiniteList);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/FriendsList.js",["804","805","806","807","808"],"import React from 'react';\nimport ProfilePost from '../components/Form';\nimport {connect} from 'react-redux';\nimport FriendProfileCard from '../components/FriendsProfileCard'\nimport axios from 'axios';\nimport { Image } from 'react-bootstrap';\nimport { authAxios } from '../components/util';\n\n// Function: holds the profile cards all the friends of the current user\nclass FriendsList extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  state={\n\t\tfriendList:[],\n\t}\n\n  componentDidMount(){\n        authAxios.get('http://127.0.0.1:8000/userprofile/current-user')\n        .then(res=> {\n          console.log(res.data)\n          this.setState({\n            friendList:res.data.friends,\n         });\n        });\n  }\n\n  componentWillReceiveProps(newProps) {\n    console.log(newProps)\n    if(newProps.isAuthenticated){\n      authAxios.get('http://127.0.0.1:8000/userprofile/current-user')\n        .then(res=> {\n          console.log(res.data)\n          this.setState({\n            friendList:res.data.friends,\n         });\n        });\n    }\n  }\n\n// the map((j,index) => {}) will loop through all the objects\n\trender() {\n    const {friendList} = this.state\n    console.log('here')\n\t\treturn (\n      <div>\n      Hi there\n        {friendList.map((j,index) => {\n          return <FriendProfileCard data = {j} key ={index} />\n        })}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\nexport default FriendsList;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/Chat.js",["809","810","811"],"import React from 'react';\nimport './Container_CSS/Chat.css';\nimport Sidepanel from './ChatComponents/Sidepanel';\nimport TopPanel from './ChatComponents/Toppanel';\nimport WebSocketInstance from '../websocket';\nimport { authAxios } from '../components/util';\nimport axios from 'axios';\nimport AddChatModal from './Popup';\nimport * as navActions from '../store/actions/nav'\nimport { connect } from 'react-redux';\n\n\nclass Chat extends React.Component{\n  // the add callbacks basically calls the commands\n  state= {\n    messages: [],\n    friendList:[],\n    chatList:[]\n  }\n// the id is taken from the slug made by Contact.js\n  initialiseChat() {\n    this.waitForSocketConnection(()=> {\n      // WebSocketInstance.addCallbacks(\n      //   this.setMessages.bind(this),\n      //   this.addMessages.bind(this));\n      WebSocketInstance.fetchMessages(\n        this.props.username,\n        this.props.parameter.id\n      )\n    })\n    WebSocketInstance.connect(this.props.parameter.id)\n  }\n    constructor(props){\n      super(props)\n      this.initialiseChat()\n      // these will give the commands the function --> this is similar to the command\n      // array in the consumer.py\n    }\n\n\n// Check the state of the socket, and if it is equal to one shits good\n    waitForSocketConnection (callback) {\n      const component = this;\n      setTimeout(\n        function(){\n          console.log(WebSocketInstance.state())\n          if (WebSocketInstance.state() === 1){\n            console.log('connection is secure');\n            callback();\n            return;\n          } else{\n              console.log('waiting for connection...')\n              component.waitForSocketConnection(callback);\n          }\n        }, 100)\n\n    }\n\n    // the second parameter of that is what you will add in\n//     addMessages(message){\n//       this.setState({\n//         messages: [...this.state.messages, message]\n//       })\n//     }\n//\n// // this to have all the messages you have been typing back and forth\n//     setMessages(messages) {\n//       this.setState({\n//         messages: messages.reverse()\n//       });\n//     }\n// the reason why two messages show up is because you intialized it once but then the props updated again\n// so the intialized chat gets called mutliple times\n// so basically you send the message and connecting to a new websocket when you change urls and not\n// when the props are updated\n\n\n    componentWillReceiveProps(newProps) {\n      if(this.props.parameter.id !== newProps.parameter.id){\n        WebSocketInstance.disconnect();\n        this.waitForSocketConnection(()=> {\n          WebSocketInstance.fetchMessages(\n            this.props.username,\n            newProps.parameter.id\n          )\n        })\n        WebSocketInstance.connect(newProps.parameter.id)\n      }\n      const username = newProps.username\n      if(newProps.isAuthenticated){\n      axios.all([\n        authAxios.get('http://127.0.0.1:8000/userprofile/current-user'),\n        authAxios.get('http://127.0.0.1:8000/chat/?username='+username)\n      ])\n      .then(axios.spread((get1, get2)=> {\n            this.setState({\n              friendList:get1.data.friends,\n              chatList:get2.data,\n           });\n         }));\n      }\n    }\n\n    // Whenever you want to add anything you have to do it in an object format\n    // have to name the from\n    // you would then set the message state back to empty\n    sendMessageHandler = e => {\n      e.preventDefault();\n      const messageObject = {\n        from: this.props.username,\n        content: this.state.message,\n        chatId: this.props.parameter.id\n      }\n      WebSocketInstance.newChatMessage(messageObject);\n      this.setState({\n        message: ''\n      })\n\n    }\n\n    messageChangeHandler = event => {\n      this.setState({\n        message: event.target.value\n      })\n    }\n\n\n    // return a list of list item which will render in the unorder friendList\n    // basically run the previous messages\n    // this one is linked to the backend websocket and renders the messages\n    renderTimestamp = timestamp =>{\n      let prefix = '';\n      const timeDiff = Math.round((new Date().getTime() - new Date(timestamp).getTime())/60000)\n      if (timeDiff < 1 ) {\n        prefix = `Just now`;\n      } else if (timeDiff < 60 && timeDiff >1 ) {\n        prefix = `${timeDiff} minutes ago`;\n      }else if (timeDiff < 24*60 && timeDiff > 60) {\n        prefix = `${Math.round(timeDiff/60)} hours ago`;\n      } else if (timeDiff < 31*24*60 && timeDiff > 24*60) {\n        prefix = `${Math.round(timeDiff/(60*24))} days ago`;\n      } else {\n          prefix = `${new Date(timestamp)}`;\n      }\n\n      return prefix;\n    }\n\n\n    renderMessages = (messages) => {\n      const currentUser = 'admin';\n      return messages.map(message =>(\n        <li\n          key = {message.id}\n          className= {message.author === this.props.username ? 'sent' : 'replies'}>\n          <img src = 'http://emilcarlsson.se/assets/mikeross.png' />\n          <p>\n            {message.content}\n            <br />\n            <small>\n            { this.renderTimestamp(message.timestamp)}\n            </small>\n          </p>\n\n\n        </li>\n      ));\n    }\n\n    scrollToBottom = () => {\n      this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n    }\n\n    componentDidMount() {\n      this.scrollToBottom();\n    }\n\n    componentDidUpdate() {\n      this.scrollToBottom();\n    }\n\n    render(){\n      console.log(this.props)\n      const messages = this.state.messages;\n      return(\n        <div id=\"frame\">\n          <Sidepanel {...this.props} {...this.state}/>\n          <AddChatModal\n          isVisible ={this.props.showPopup}\n          close = {() => this.props.closePopup()} />\n         <div className=\"content\">\n          <TopPanel />\n            <div className=\"messages\">\n              <ul id=\"chat-log\">\n                {\n                    this.props.messages &&\n                    this.renderMessages(this.props.messages)\n                }\n                <div style={{ float:\"left\", clear: \"both\" }}\n                    ref={(el) => { this.messagesEnd = el; }}>\n               </div>\n              </ul>\n            </div>\n            <div className=\"message-input\">\n            <form onSubmit = {this.sendMessageHandler}>\n                <div className=\"wrap\">\n                <input\n                 onChange = {this.messageChangeHandler}\n                 value = {this.state.message}\n                 id=\"chat-message-input\"\n                 type=\"text\"\n                 placeholder=\"Write your message...\" />\n                <i className=\"fa fa-paperclip attachment\" aria-hidden=\"true\"></i>\n                <button id=\"chat-message-submit\" className=\"submit\">\n                  <i className=\"fa fa-paper-plane\" aria-hidden=\"true\"></i>\n                </button>\n                </div>\n              </form>\n            </div>\n          </div>\n      </div>\n      )\n    }\n}\n\nconst mapStateToProps = state => {\n  return {\n    showPopup: state.nav.showPopup,\n    messages: state.message.messages\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    closePopup: () => dispatch(navActions.closePopup())\n  }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Chat);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/Notifications.js",["812","813","814","815"],"import React from 'react';\nimport NotificationWebSocketInstance from '../notificationWebsocket';\nimport { authAxios } from '../components/util';\nimport axios from 'axios';\nimport { List, Avatar, Button, Skeleton } from 'antd';\nimport { connect } from 'react-redux';\nimport './Container_CSS/Notifications.css';\nimport NotificationsDropDown from './NotificationsDropDown'\n\n\nconst count = 3;\n// This one is mostly for just pulling and working with the information\n\nclass Notifications extends React.Component{\n  state = {\n    notifications: []\n  }\n\n// remember that you can add the call backs in using redux\n// you like the functions in the notificationWebsocket to the notificaiton.js through callbacks and bind\n// baically the information will be called to the states\n  initialiseNotification(){\n    this.waitForSocketConnection(() => {\n      // when you do the fetchFriendRequests it already called the actions\n      NotificationWebSocketInstance.fetchFriendRequests(\n        this.props.id\n      )\n      })\n      // NotificationWebSocketInstance.connect(this.props.match.params.username)\n    }\n\n    constructor(props){\n      super(props)\n      this.initialiseNotification()\n      // these will give the commands the function --> this is similar to the command\n      // array in the consumer.py\n    }\n\n  componentDidMount(){\n    NotificationWebSocketInstance.connect(this.props.username)\n\n\n  }\n\n  waitForSocketConnection (callback) {\n    const component = this;\n    setTimeout(\n      function(){\n\n        if (NotificationWebSocketInstance.state() === 1){\n\n          callback();\n          return;\n        } else{\n\n            component.waitForSocketConnection(callback);\n        }\n      }, 100)\n\n  }\n\n  onAccept = (actor, recipient) => {\n    // this function will delete the notification that you accept and then send a notification\n    // to the other person that they have accepted their frined reuqest\n    // In the accept, the actor would be the person accepting and the recipient will be\n    // the person that sent the request\n    console.log(actor)\n    console.log(recipient)\n    authAxios.post('http://127.0.0.1:8000/userprofile/friend-request/accept/'+recipient)\n    const acceptNotificationObject = {\n\n      command: 'accept_friend_request_notification',\n      actor: actor,\n      // the actor is an id of the recipient of the friend request\n      recipient: recipient\n      // the recipient is the actor that sent the friend request\n    }\n    NotificationWebSocketInstance.sendNotification(acceptNotificationObject)\n  }\n\n  onDecline = (actor, recipient) => {\n    authAxios.post('http://127.0.0.1:8000/userprofile/friend-request/delete/'+recipient)\n    const declineNotificationObject = {\n      command: 'decline_friend_request_notification',\n      actor: actor,\n      recipient: recipient,\n    }\n    NotificationWebSocketInstance.sendNotification(declineNotificationObject)\n  }\n\n  renderTimestamp = (timestamp) => {\n    let prefix = '';\n    const timeDiff = Math.round((new Date().getTime() - new Date(timestamp).getTime())/60000)\n    if (timeDiff < 1 ) {\n      prefix = `Just now`;\n    } else if (timeDiff < 60 && timeDiff >1 ) {\n      prefix = `${timeDiff} minutes ago`;\n    }else if (timeDiff < 24*60 && timeDiff > 60) {\n      prefix = `${Math.round(timeDiff/60)} hours ago`;\n    } else if (timeDiff < 31*24*60 && timeDiff > 24*60) {\n      prefix = `${Math.round(timeDiff/(60*24))} days ago`;\n    } else {\n        prefix = `${new Date(timestamp)}`;\n    }\n\n    return prefix;\n  }\n\n  // renderNotifications = (notifications) => {\n  //   return notifications.map(notification => (\n  //     <li class=\"list\">\n  //         <a href=\"#\" title=\"\">\n  //             <img src=\"images/resources/thumb-1.jpg\" alt=\"\"/>\n  //             <div class=\"mesg-meta\">\n  //                 <div> This is the actor (person sending) [{notification.actor.username}] sent recepient (person receiving) [{notification.recipient}] </div>\n  //                 <div>  </div>\n  //                 <div> This is the message: [{notification.description}] </div>\n  //                   <i>The time of this notification: {this.renderTimeStamp(notification.timestamp)}</i>\n  //\n  //\n  //             </div>\n  //         </a>\n  //      </li>;\n  //\n  //    )\n  //   )\n  // }\n\n  onLoadMore = () => {\n    this.setState({\n      loading: true,\n      list: this.state.data.concat([...new Array(count)].map(() => ({ loading: true, name: {} }))),\n    });\n    this.getData(res => {\n      const data = this.state.data.concat(res.results);\n      this.setState(\n        {\n          data,\n          list: data,\n          loading: false,\n        },\n        () => {\n          // Resetting window's offsetTop so as to display react-virtualized demo underfloor.\n          // In real scene, you can using public method of react-virtualized:\n          // https://stackoverflow.com/questions/46700726/how-to-use-public-method-updateposition-of-react-virtualized\n          window.dispatchEvent(new Event('resize'));\n        },\n      );\n    });\n  };\n\n  componentWillReceiveProps(newProps){\n    console.log(newProps)\n    if(this.props.username !== newProps.username){\n      NotificationWebSocketInstance.disconnect()\n      NotificationWebSocketInstance.connect(newProps.username)\n    }\n\n\n  }\n\n  NotificationListRender (notifications) {\n    const notification_list = []\n    for (let i = 0; i< notifications.length; i++) {\n      console.log(notifications[i].actor.username)\n      console.log(notifications[i].type)\n      if(notifications[i].type === 'friend'){\n        notification_list.push(\n          <div className = 'listNotification'>\n            {notifications[i].actor.username} sent you a friend request.\n            <br />\n            <Button type =\"primary\" onClick = {()=> this.onAccept(notifications[i].recipient, notifications[i].actor.username)}> Accept</Button>\n            <Button type =\"priamry\" onClick = {()=> this.onDecline(notifications[i].recipient, notifications[i].actor.username)}> Decline </Button>\n          </div>\n        )\n      }\n      if (notifications[i].type === 'accepted_friend') {\n        notification_list.push(\n          <div className = 'listNotification'>\n              {notifications[i].actor.username} accepted your friend request.\n          </div>\n        )\n      }\n      if (notifications[i].type === 'declined_friend'){\n        notification_list.push(\n          <div className = 'listNotification'>\n              {notifications[i].actor.username} declined your friend request.\n          </div>\n        )\n      }\n      if (notifications[i].type === 'send_friend_event_sync'){\n        notification_list.push(\n          <div className = 'listNotification'>\n            {notifications[i].actor.username} wants to event sync with you.\n            <br />\n            <Button type =\"primary\" > Accept</Button>\n            <Button type =\"priamry\" > Decline </Button>\n          </div>\n        )\n      }\n    }\n    return <div> {notification_list} </div>\n  }\n\n  // <List\n  //   className=\"demo-loadmore-list\"\n  //\n  //   itemLayout=\"horizontal\"\n  //\n  //   dataSource={this.props.notifications}\n  //   renderItem={item => (\n  //\n  //\n  //     <List.Item>\n  //       <List.Item.Meta\n  //         avatar={<Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />}\n  //         title={<a href=\"https://ant.design\">{item.title}</a>}\n  //\n  //         description={\"This is the description [\"+item.description+\"    ]  \\n\"+\n  //           \"This is the recipientID    \"+item.recipient+\"    This is the actor \"+item.actor.username}\n  //       />\n  //       <Button type =\"primary\" onClick = {()=> this.onAccept(item.recipient,item.actor.username)}> Accept</Button>\n  //       <Button type =\"priamry\" onClick = {()=> this.onDecline(item.actor.username)}> Decline </Button>\n  //     </List.Item>\n  //   )}\n  // />\n\n  render(){\n    console.log(this.props.notifications)\n    console.log(this.props)\n    // <div>\n    // HI HI HI\n    // {this.NotificationListRender(this.props.notifications)}\n    // </div>\n    return (\n          <NotificationsDropDown {...this.props}/>\n      )\n\n    }\n  }\n\n  const mapStateToProps = state => {\n    return {\n      notifications: state.notifications.notifications,\n      username: state.auth.username\n    }\n  }\n\nexport default connect(mapStateToProps)(Notifications);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/FriendRequestList.js",["816","817"],"import { List, Typography, Avatar, Button} from 'antd';\nimport React from 'react';\nimport { authAxios } from '../components/util';\n\n\n\nclass FriendRequestList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      friendrequestlist: [],\n\n    };\n\n\n    // this.onClickAccept = this.onClickAccept.bind(this);\n    // this.onClickDecline = this.onClickDecline.bind(this);\n  }\n\n  componentDidMount(){\n    authAxios.get('http://127.0.0.1:8000/userprofile/current-user/friends')\n    .then(res =>{\n      console.log(res)\n      this.setState({\n        friendrequestlist:res.data,\n        })\n      }\n    )\n  }\n\n  onClickAccept = (userID) => {\n    const user = userID\n    console.log(userID)\n    authAxios.post('http://127.0.0.1:8000/userprofile/friend-request/accept/'+user)\n    }\n\n\n  onClickDecline = (userID) => {\n    const user = userID\n    console.log(userID)\n    authAxios.post('http://127.0.0.1:8000/userprofile/friend-request/delete/'+user)\n    }\n// you do the {() => this.WHATEVER FUNCTION ()} this will allow you to add parameters into your function and\n// allow you to do a onclick as well\n  render() {\n    const friendrequestlist = this.state\n    console.log(this.state.friendrequestlist.from_user)\n    return(\n      <List\n        itemLayout=\"horizontal\"\n        dataSource={this.state.friendrequestlist}\n        renderItem={item => (\n      <List.Item>\n        <List.Item.Meta\n          avatar={<Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />}\n          title={<a href=\"https://ant.design\">{item.from_user}</a>}\n          description=\"Suggested for you\"\n        />\n\n        <Button type=\"primary\" onClick ={() =>this.onClickAccept(item.from_user)}>Accept</Button>\n        <Button danger style={{ background: \"white\", color: \"red\" }} onClick ={() =>this.onClickDecline(item.from_user)}>Decline</Button>\n      </List.Item>\n    )}\n     />\n    )\n  }\n}\n\n\n\nexport default FriendRequestList;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/util.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/MonthCalendar.js",["818","819","820","821","822","823","824","825","826","827","828","829","830","831","832","833","834","835","836","837","838","839","840","841","842","843","844","845","846","847","848","849","850","851","852","853"],"import React from 'react';\nimport * as dateFns from 'date-fns';\nimport moment from 'moment';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { NavLink } from 'react-router-dom';\nimport { UserOutlined } from '@ant-design/icons';\nimport { authAxios } from '../../components/util';\nimport Liking from '../NewsfeedItems/Liking';\nimport { Input,\n   Drawer,\n    message,\n    List,\n    Avatar,\n    Divider,\n    Col,\n    Row,\n    Tag,\n    Button,\n    Tooltip,\n    Progress,\n    DatePicker,\n    AvatarGroup,\n    notification,\n    Popover } from 'antd';\nimport * as navActions from '../../store/actions/nav';\nimport * as calendarEventActions from '../../store/actions/calendarEvent';\nimport * as calendarActions from '../../store/actions/calendars';\nimport * as eventSyncActions from '../../store/actions/eventSync';\nimport EventModal from './AddCalEventForms/EventModal';\nimport EventSyncModal from './EventSyncForms/EventSyncModal';\nimport MiniCalendar from './MiniCalendar';\nimport EditEventPopUp from './EditCalEventForms/EditEventPopUp';\nimport CalendarViewDropDown from './CalendarViewDropDown';\nimport './PersonalCalCSS/NewCalendar.css';\n\n\n\nclass PersonalCalendar extends React.Component{\n// new Date is form DateFns and it give you the current date and month\n// SelectedDate will be the first day of the month\n  state = {\n    currentMonth: new Date(),\n    selectedDate: new Date(),\n    events: [],\n  }\n\n  // showDrawer = (e) => {\n  //   e.preventDefault()\n  //   this.setState({\n  //     drawerVisible: true,\n  //   });\n  // };\n\n  onClose = () => {\n    this.setState({\n      drawerVisible: false,\n    });\n  };\n  componentDidMount(){\n    const selectedYear = this.props.parameter.year;\n    const selectedMonth = this.props.parameter.month;\n    const newDate = [selectedYear, selectedMonth]\n    const newSelectedDate = new Date(newDate)\n    this.props.getSelectedDate(newSelectedDate)\n    this.props.getEvents()\n  }\n\n  componentWillReceiveProps(newProps){\n    // you bascially want to check if the date in props and the date in\n    // the url is the safe, if they are not --> you gotta change it\n    if (this.props.currentDate !== newProps.currentDate){\n\n      const year = dateFns.getYear(newProps.currentDate)\n      const month = dateFns.getMonth(newProps.currentDate)\n      this.props.history.push('/personalcalendar/'+year+'/'+(month+1))\n    }\n    // Instead of reloading the data everytime, the editing of the events is done in the\n    // redux\n  }\n  // When working with dates it is important that you format the\n  // the date properly\n  renderHeader() {\n    const dateFormat = \"MMMM yyyy\"\n    // for formatting using moment or whatever you do\n    // .format('give a date here', what kind of formatting here)\n    return (\n      <div style={{width:'550px'}} className= \"header row flex-middle\">\n        <div className = \"col col-start\">\n          <div className = \"icon\" onClick ={this.prevMonth}>\n            <i style={{fontSize:'20px', color:'#1890ff'}} class=\"fas fa-chevron-circle-left\"></i>\n          </div>\n        </div>\n        <div className = \"col col-center\">\n          <span>\n           {dateFns.format(this.props.currentDate, dateFormat)}\n          </span>\n        </div>\n        <div className= \"col col-end\" onClick = {this.nextMonth}>\n          <div className = \"icon\">\n            <i style={{fontSize:'20px', color:'#1890ff'}} class=\"fas fa-chevron-circle-right\"></i>\n           </div>\n        </div>\n      </div>\n    );\n  }\n\n  renderDays() {\n    const dateFormat = \"iiii\"\n    const days = []\n    // this will get the date of the first week given the date of the current month\n    let startDate = dateFns.startOfWeek(this.props.currentDate);\n    // for loop that loops through from 0-6 and add the days accordingly\n    // to the start date which is the start of the day in the current date\n    for (let i= 0; i<7; i++){\n      days.push(\n        <div className =\"col col-center\" key = {i}>\n          {dateFns.format(dateFns.addDays(startDate, i), dateFormat)}\n          </div>\n      )\n    }\n    // the days will be a list of dates that are put in by the for loops\n     // and then the return will return all those days out\n    return <div className = \"days row\"> {days} </div>\n  }\n\n  checkArrays = (array1, array2) => {\n\n  }\n\n  renderColor = () => {\n    const color = [\"green\",\"yellow\",\"red\",\"blue\",\"orange\",\"pink\",\"cyan\"]\n    const len = color.length\n    const randomNum = Math.floor(Math.random()*len)\n    const pickcolor = color[randomNum]\n    return pickcolor\n\n  }\n\n  renderNumber = () => {\n    const randomNum = Math.floor(Math.random()*7)\n    console.log(randomNum)\n    const gridColumn = randomNum + '/8'\n    console.log(gridColumn)\n    return gridColumn\n  }\n\n\n  renderSide() {\n    // So what you want is to get the date of the first day of each week\n    // so that you can pass it into the tab so it can open up the selected week\n    const currentMonth = this.state.currentMonth;\n    const selectedDate = this.props.currentDate;\n    const startDateMonth = dateFns.startOfMonth(selectedDate);\n    const endDateMonth = dateFns.endOfMonth(selectedDate);\n    // this will give us the first day of the week fo the month\n    const startFirstWeek = dateFns.startOfWeek(startDateMonth);\n    // this will give us the first day of the week of the last week in the chart\n    const startLastWeek = dateFns.startOfWeek(endDateMonth);\n    // because the strt of first week changes with the loop we have to save it as\n    // let\n    let date = startFirstWeek;\n    let formattedWeek = '';\n    const weekFormat = 'dd mmmm yyyy'\n    // this is to store all the tabs to click on\n    const week = []\n    while (date <= startLastWeek){\n      formattedWeek = dateFns.format(date, weekFormat)\n      const cloneDate = date\n      week.push(\n        <div className = 'holder'>\n        <div\n        onClick = {() => this.onWeekClick(cloneDate)}\n        className = 'tabs'\n        >\n          <span></span>\n        </div>\n        </div>\n      )\n      date = dateFns.addWeeks(date, 1)\n    }\n    return <div className ='sideBar'> {week} </div>\n  }\n\n\n\n\n\n  renderCells(events) {\n    console.log(events)\n    // startOfMonth() will give you the date of the first day of the current month\n    // endOfMonth() will give you the date of the last day of the current month\n    // the const start date is to fill in the days of the week of the previous month\n    // similarly as the end date\n    const currentMonth = this.state.currentMonth;\n    const selectedDate = this.props.currentDate;\n    const monthStart = dateFns.startOfMonth(selectedDate);\n    const monthEnd = dateFns.endOfMonth(monthStart);\n    const startDate = dateFns.startOfWeek(monthStart);\n    const endDate = dateFns.endOfWeek(monthEnd);\n    const text = \"You're host\"\n    // Once you have your start date and end date you want to loop through\n    // all the days in between\n    // then we have to subtract the start of the month with the startoftheweek\n    // if they are not the same so that they are unclickable\n\n    const dateFormat = \"d\";\n    const rows = []\n    let toDoStuff = []\n    let days = [];\n    // day is the startday, which starts at the first day of the week\n    // for the 42 block of time\n    let day = startDate;\n    let formattedDate = \"\";\n    // this loop will loop through all the days of the month\n    while (day <=endDate){\n\n\n      // we make it smaller than 7 because we still want to keep the index of the\n      // weekdays the same\n      for (let i= 0; i<7; i++){\n\n        for (let item = 0; item < events.length; item++){\n          // So the time we put in is the UTC time (universal time ) but when you\n          // put moment or new Date it gives you your time zome date so that is why you\n          // have to convert it\n          const startDate = new Date(events[item].start_time)\n          const endDate = new Date(events[item].end_time)\n          const utcStart = dateFns.addHours(startDate, startDate.getTimezoneOffset()/60)\n          const utcEnd = dateFns.addHours(endDate, endDate.getTimezoneOffset()/60)\n          if (events[item].repeatCondition === 'weekly'){\n            // This will be on the every day of the week\n            const eventDay = dateFns.getDay(startDate);\n            const cloneDay = dateFns.getDay(day);\n            if (eventDay === cloneDay){\n              toDoStuff.push(\n                events[item]\n              )\n            }\n          } else if (events[item].repeatCondition === 'daily'){\n            toDoStuff.push(\n              events[item]\n            )\n          }\n\n          else if (events[item].repeatCondition === 'none'){\n            if (dateFns.isSameDay(startDate, day)){\n              toDoStuff.push(\n                events[item]\n              )\n            }\n            if (dateFns.isAfter(day, startDate)\n            && dateFns.isBefore(day, endDate)\n            // && dateFns.isSameDay(day, endDate)\n            && dateFns.isSameDay(day, dateFns.startOfWeek(day))\n          ){\n              console.log(day)\n\n                toDoStuff.push(\n                  events[item]\n                )\n              }\n          }\n\n\n\n        }\n        // this give the date will give the day numnber in 1-365\n\n        formattedDate = dateFns.format(day, dateFormat);\n        // used clone day so that it would do the selected day and not the endDay\n        // because the loop will end on end day and it w3il always click that day\n        const cloneDay = day;\n        // the classname in the bottom is to check if its not in the smae month\n        // the cell will be disabled\n        // It is also to check if the day is the smae as the current day\n        if (toDoStuff.length > 0){\n\n          days.push(\n            <div className = {` ${dateFns.isSameDay(cloneDay, new Date()) ? 'calendarNumCur' : 'calendarNum'}`}\n            onClick = { () => this.onDateClick(cloneDay)}>\n            <span className = \"number\">{formattedDate}</span>\n            </div>,\n              toDoStuff.map(item => (\n                <Popover placement=\"right\"  content={\n                  <div style={{padding:20, width:450}}>\n                    <p style={{display:'inline-block'}}>\n\n                    </p>\n\n                      {\n                        (item.invited.length==0)?\n                        <Tag style={{fontSize:'15px', display:'inline-block'}} color={item.color}> private</Tag>\n\n                        :\n                        <Tag style={{fontSize:'15px', display:'inline-block'}} color={item.color}> public</Tag>\n                      }\n\n\n\n\n                    <span style={{color:'black', marginBottom:'10px'}}>\n                    {\n                      (item.title.length>20)?\n                      <p style={{fontSize:'24px', display:'inline-block'}}>{item.title.substring(0,20)}...</p>\n\n                      :\n                      <p style={{fontSize:'24px', display:'inline-block'}}>\n                        {item.title.substring(0,20)}\n                      </p>\n                    }\n\n\n                    </span>\n\n                    <p style={{marginTop:'5px', fontSize:'14px'}}>\n                      <i style={{marginRight:'10px', marginTop:'15px'}} class=\"far fa-calendar-alt\"></i>\n                      <span style={{marginRight:'3px'}}>\n                        {dateFns.format(selectedDate, 'iiii')},\n\n\n                      </span>\n                      {dateFns.format(new Date(item.start_time), 'MMMM')}\n                      &nbsp;\n                      {dateFns.format(new Date(item.start_time), 'd')}\n\n\n\n                      <br/>\n                      <i style={{marginRight:'10px', marginTop:'10px'}} class=\"fas fa-clock\"></i>\n                      <span>\n                          {dateFns.format(new Date(item.start_time),'h:mm a')}\n                          -\n                          {dateFns.format(new Date(item.end_time),'h:mm a')}\n                        </span>\n                      <br/>\n                      {\n                        (item.repeatCondition==\"weekly\")?\n                        <span>\n                          <i class=\"fas fa-redo-alt\" style={{marginRight:'10px'}}></i>\n                          Occurs every\n\n                          <span>\n                            &nbsp;\n                            {dateFns.format(selectedDate, 'iiii')}\n                            &nbsp;\n                          </span>\n\n                        </span>\n\n                        :\n                        <div>\n\n                          {\n                            (item.repeatCondition==\"daily\")?\n                            <span>\n                              <i class=\"fas fa-redo-alt\" style={{marginRight:'10px'}}></i>\n                              Occurs every day\n\n                            </span>\n                            :\n                            <div>\n\n\n                              {\n                                (item.repeatCondition==\"monthly\")?\n                                <span>\n                                  <i class=\"fas fa-redo-alt\" style={{marginRight:'10px'}}></i>\n                                  Occurs every month\n\n                                </span>\n                                :\n                                <div></div>\n                              }\n\n\n\n\n                            </div>\n                          }\n                       </div>\n\n                      }\n\n                      <div>\n                        <i class=\"fas fa-user-friends\" style={{marginRight:'5px'}}></i>\n                        {\n                          (item.invited.length==0)?\n                            <span> Just You</span>\n\n                          :\n                              <span>   {item.invited.length+1} people</span>\n\n                        }\n                      </div>\n                    </p>\n                    {\n                      (item.backgroundImg)?\n                      <img\n                        style={{display:'inline-block', float:'right'}}\n                      src = {item.backgroundImg}\n                      className = 'popoverPic'\n                       />\n                       :\n                       <div></div>\n                    }\n\n                    {/* if person is host*\n                      item.host\n                      {item.person.length==1 && item.host.username==this.props.username}\n\n\n                    */}\n\n                      {/* for private events and person is host*/}\n                    <div>\n                      {\n\n\n\n                        (item.invited.length==0 && item.host.id==this.props.id)?\n\n                        <span style={{float:'right', padding:'15px', marginTop:'-45px'}}>\n\n                          <Tooltip placement=\"bottomLeft\" title=\"View event\">\n                            <Button\n                            onClick = {() => this.onEventPage(item.id)}\n                            shape=\"circle\"\n                            size=\"large\"\n                            type=\"primary\">\n                               <i class=\"fas fa-eye\"></i>\n                            </Button>\n                          </Tooltip>\n                          <Tooltip placement=\"bottomLeft\" title=\"Remove event\">\n                            <Button\n                            onClick ={() => this.onDeleteEvent(item.id, 'single')}\n                            shape=\"circle\"\n                            size=\"large\"\n                            type=\"primary\"\n                            style={{marginLeft:'10px'}}>\n                               <i class=\"fas fa-times\"></i>\n                            </Button>\n                          </Tooltip>\n                        </span>\n\n                        :\n\n                        <div>\n                          <Divider style={{marginTop:'-1px', marginBottom:'-1px'}}/>\n\n                          <div style={{marginTop:'50px'}} class=\"outerContainerPeople\">\n\n                            <div class=\"innerContainerPeople\" style={{display:'inline-block'}}>\n\n                              <Avatar\n                                shape=\"circle\"\n                                size={60}\n                                src={'http://127.0.0.1:8000'+item.host.profile_picture}\n                                style={{display:'inline-block'}}\n                               />\n                             {\n\n                                 (item.host.username==this.props.username)?\n                                   <p class=\"highlightWord\" style={{marginLeft:'15px', fontSize:'16px', color:'black', display:'inline-block'}}\n                                     onClick = {() => this.onProfileClick(item.host.username)}\n                                   >\n\n                                     {text}\n                                   </p>\n                                 :\n\n\n                                   <p class=\"highlightWord\" style={{marginLeft:'15px', fontSize:'16px', color:'black', display:'inline-block'}}\n                                     onClick = {() => this.onProfileClick(item.host.username)}\n                                   >\n\n                                     {item.host.first_name} {item.host.last_name}\n                                   </p>\n\n                             }\n\n\n                            </div>\n\n                             <span class=\"innerContainerPeople\" style={{ width: 150, display:'inline-block', float:'right', marginRight:'10px'}}>\n                               {/* going to need a if condition checking if not 100 then you can make status active:\n                                  status=\"exception\"\n                                  <Progress percent={50} size=\"small\" status=\"active\" />\n                                 */}\n                               <Progress percent={Math.floor(100*(((item.accepted.length-1)+item.decline.length)/item.invited.length))} size=\"small\" status=\"active\" gap/>\n                               <Progress percent={Math.floor(100*((item.accepted.length-1)/(item.invited.length)))} size=\"small\" />\n                               {\n                                 (Math.floor(100*(item.decline.length/item.invited.length))<100)?\n\n                                  <Progress percent={Math.floor(100*(item.decline.length/item.invited.length))} size=\"small\"/>\n                                 :\n                                 <Progress percent={Math.floor(100*(item.decline.length/item.invited.length))} size=\"small\" status=\"exception\" />\n                               }\n\n\n                             </span>\n                          </div>\n                          <div>\n\n\n                            <Avatar.Group>\n                              <div style={{float:'right', marginRight:'50px'}}>\n\n\n                                {\n                                  (item.host.username==this.props.username|| (item.accepted.some(e => e.id == this.props.id))\n\n                                  ||(item.host.username==this.props.username))\n                                  ?\n                                  <div style={{marginRight:'100px', marginTop:'-10px'}}>\n                                    <Tooltip placement=\"bottomLeft\" title=\"View event\">\n                                      <Button\n                                      onClick = {() => this.onEventPage(item.id)}\n                                      shape=\"circle\"\n                                      size=\"large\"\n                                      type=\"primary\">\n                                         <i class=\"fas fa-eye\"></i>\n                                      </Button>\n                                    </Tooltip>\n                                    <Tooltip placement=\"bottomLeft\" title=\"Remove event\">\n                                      <Button\n                                      onClick ={() => this.onDeleteEvent(item.id, 'shared', item.host)}\n                                      shape=\"circle\"\n                                      size=\"large\"\n                                      type=\"primary\"\n                                      style={{marginLeft:'10px'}}>\n                                         <i class=\"fas fa-times\"></i>\n                                      </Button>\n                                    </Tooltip>\n                                  </div>\n                                  :\n                                  <div style={{marginRight:'50px'}}>\n                                    <Tooltip placement=\"bottomLeft\" title=\"View event\">\n                                      <Button\n                                      onClick = {() => this.onEventPage(item.id)}\n                                      shape=\"circle\"\n                                      size=\"large\"\n                                      type=\"primary\">\n                                         <i class=\"fas fa-eye\"></i>\n                                      </Button>\n                                    </Tooltip>\n                                    <Tooltip placement=\"bottomLeft\" title=\"Remove event\">\n                                      <Button\n                                      onClick ={() => this.onDeleteEvent(item.id, 'shared', item.host)}\n                                      shape=\"circle\"\n                                      size=\"large\"\n                                      type=\"primary\"\n                                      style={{marginLeft:'10px'}}>\n                                         <i class=\"fas fa-times\"></i>\n                                      </Button>\n                                    </Tooltip>\n                                    <span>\n                                      <Tooltip placement=\"bottomLeft\" title=\"Accept Invite\">\n                                        <Button\n                                        type=\"primary\"\n                                        shape=\"circle\"\n                                        size=\"large\"\n                                        style={{marginLeft:'10px'}}\n                                        onClick = {() => this.onAcceptShare(item.id, item.host, item.start_time)}\n                                        >\n                                           <i style={{fontSize:'20px'}} class=\"fas fa-user-check\"></i>\n                                        </Button>\n                                      </Tooltip>\n                                      <Tooltip placement=\"bottomLeft\" title=\"Decline Invite\">\n                                        <Button\n                                        shape=\"circle\"\n                                        type=\"primary\"\n                                        size=\"large\"\n                                        danger\n                                        style={{marginLeft:'10px'}}\n                                        onClick = {() => this.onDeclineShare(item.id, item.host, item.start_time)}\n                                        >\n                                           <i class=\"fas fa-user-times\"></i>\n                                        </Button>\n                                        </Tooltip>\n                                      </span>\n                                    </div>\n\n                                  }\n                              </div>\n                              <Liking like_people={item.invited}/>\n                            </Avatar.Group>\n\n\n                          </div>\n                        </div>\n\n                      }\n                    </div>\n                  </div>\n\n                  }\n                >\n                {\n\n                (item.accepted.includes(this.props.id)||(item.invited.length === 0)||(item.host.username===this.props.username)) ?\n                <div key={item.content}\n                  className = 'weekEvent'\n                  style = {{\n                    gridColumn: this.eventIndex(item.start_time, item.end_time, day, i+1),\n                    backgroundColor: item.color\n                  }}>\n                  <div onClick = {() => this.onClickItem(item)}>\n                  <span className = ''> {dateFns.format(new Date(item.start_time),'hh:mm a')}</span>\n                  <span className = ' ' > {item.content} </span>\n                  </div>\n                </div>\n\n                :\n\n                <div key={item.content}\n                  className = 'weekEventAccept testLook'\n                  style = {{\n                    gridColumn: this.eventIndex(item.start_time, item.end_time, day, i+1),\n                    color:'white',\n                    backgroundColor: item.color,\n                  }}>\n                  <div onClick = {() => this.onClickItem(item)}>\n                  <span className = ''> {dateFns.format(new Date(item.start_time),'hh:mm a')}</span>\n                  <span className = ' ' > {item.content} </span>\n                  </div>\n                </div>\n\n\n                }\n\n              </Popover>\n\n              ))\n        )}\n      else {days.push(\n          <div className = {` ${dateFns.isSameDay(cloneDay, new Date()) ? 'calendarNumCur' : 'calendarNum'}`}\n          onClick = { () =>this.onDateClick(cloneDay)}>\n          <span className = \"number\">{formattedDate}</span>\n          </div>\n        )}\n      toDoStuff = []\n      day = dateFns.addDays(day, 1);\n      }\n      // so this will start at the start of the week and then loop through the 7 days\n      // once done it will push the list into the rows\n      // so there will be a list of list and each list would be a week\n      rows.push(\n        <div className='row' key ={day}>\n          {days}\n        </div>\n      );\n      // once the list filled with each day is filled he empties the list and\n      // does it again in the loop\n      days = []\n    }\n    // now this will return a list of list and each week representing a week\n    // with each item as the day\n\n    return <div className = \"body\"> {rows} </div>\n  }\n\n  // renderCells(events) {\n  //     console.log(events)\n  //     // startOfMonth() will give you the date of the first day of the current month\n  //     // endOfMonth() will give you the date of the last day of the current month\n  //     // the const start date is to fill in the days of the week of the previous month\n  //     // similarly as the end date\n  //     const currentMonth = this.state.currentMonth;\n  //     const selectedDate = this.props.currentDate;\n  //     const monthStart = dateFns.startOfMonth(selectedDate);\n  //     const monthEnd = dateFns.endOfMonth(monthStart);\n  //     const startDate = dateFns.startOfWeek(monthStart);\n  //     const endDate = dateFns.endOfWeek(monthEnd);\n  //\n  //     // Once you have your start date and end date you want to loop through\n  //     // all the days in between\n  //     // then we have to subtract the start of the month with the startoftheweek\n  //     // if they are not the same so that they are unclickable\n  //\n  //     const dateFormat = \"d\";\n  //     const rows = []\n  //     let toDoStuff = []\n  //     let days = [];\n  //     // day is the startday, which starts at the first day of the week\n  //     // for the 42 block of time\n  //     let day = startDate;\n  //     let formattedDate = \"\";\n  //     // this loop will loop through all the days of the month\n  //     while (day <=endDate){\n  //\n  //\n  //       // we make it smaller than 7 because we still want to keep the index of the\n  //       // weekdays the same\n  //       for (let i= 0; i<7; i++){\n  //         for (let item = 0; item < events.length; item++){\n  //           // So the time we put in is the UTC time (universal time ) but when you\n  //           // put moment or new Date it gives you your time zome date so that is why you\n  //           // have to convert it\n  //           const date = new Date(events[item].start_time)\n  //           const utc = dateFns.addHours(date, date.getTimezoneOffset()/60)\n  //           if (dateFns.isSameDay(utc, day)){\n  //             toDoStuff.push(\n  //               events[item]\n  //             )\n  //           }\n  //         }\n  //         // this give the date will give the day numnber in 1-365\n  //\n  //         formattedDate = dateFns.format(day, dateFormat);\n  //         // used clone day so that it would do the selected day and not the endDay\n  //         // because the loop will end on end day and it w3il always click that day\n  //         const cloneDay = day;\n  //         // the classname in the bottom is to check if its not in the smae month\n  //         // the cell will be disabled\n  //         // It is also to check if the day is the smae as the current day\n  //         if (toDoStuff.length > 0){\n  //           days.push(\n  //             <div\n  //               className ={`col cell ${!dateFns.isSameMonth(day,monthStart) ? \"disabled\"\n  //               : dateFns.isSameDay(day, currentMonth) ?\n  //             \"selected\": \"\"\n  //               }`}\n  //               key = {day}\n  //             >\n  //             <div className = 'uppertab'>\n  //               <div className = 'circle' onClick = { () =>\n  //                 this.onDateClick(cloneDay)}>\n  //                 <span className = \"number\">{formattedDate}</span>\n  //               </div>\n  //             </div>\n  //             <span className = \"bg\"> {formattedDate}</span>\n  //             <ul className = 'monthList'>\n  //               {toDoStuff.map(item => (\n  //                 <li key={item.content} className = 'monthListItem'>\n  //                   <div onClick = {() => this.onClickItem(item)}>\n  //                   <span className = ''> {dateFns.format(dateFns.addHours(new Date(item.start_time),new Date(item.start_time).getTimezoneOffset()/60),\n  //                      'HH:mm a')}</span>\n  //                   <span className = ' ' > {item.content} </span>\n  //                   </div>\n  //                 </li>\n  //               ))}\n  //             </ul>\n  //           </div>\n  //         )} else {days.push(\n  //           <div\n  //             className ={`col cell ${!dateFns.isSameMonth(day,monthStart) ? \"disabled\"\n  //             : dateFns.isSameDay(day, currentMonth) ?\n  //           \"selected\": \"\"\n  //             }`}\n  //             key = {day}\n  //           >\n  //           <div className = 'circle' onClick = { () =>\n  //             this.onDateClick(cloneDay)}>\n  //           <span className = \"number\">{formattedDate}</span>\n  //           </div>\n  //           <span className = \"bg\"> {formattedDate}</span>\n  //         </div>\n  //         )}\n  //       toDoStuff = []\n  //       day = dateFns.addDays(day, 1);\n  //       }\n  //       // so this will start at the start of the week and then loop through the 7 days\n  //       // once done it will push the list into the rows\n  //       // so there will be a list of list and each list would be a week\n  //       rows.push(\n  //         <div className='row' key ={day}>\n  //           {days}\n  //         </div>\n  //       );\n  //       // once the list filled with each day is filled he empties the list and\n  //       // does it again in the loop\n  //       days = []\n  //     }\n  //     // now this will return a list of list and each week representing a week\n  //     // with each item as the day\n  //\n  //     return <div className = \"body\"> {rows} </div>\n  //   }\n\n  // so we need function to deal with cell click to change the date\n  // Then you need function to show previous and next monthly\n  onDateClick = day => {\n    const selectYear = dateFns.getYear(day).toString()\n    const selectMonth = (dateFns.getMonth(day)+1).toString()\n    const selectDay = dateFns.getDate(day).toString()\n  this.props.history.push('/personalcalendar/'+selectYear+'/'+selectMonth+'/'+selectDay)\n  }\n\n// So what are going to do with this is get the selected month and get the first day of the\n// month and then get the first day of the week and loop through it till you get the first day\n// of the week for the end of the month\n\n  onWeekClick = startDayWeek => {\n    const selectedYear = dateFns.getYear(startDayWeek).toString()\n    const selectedMonth = (dateFns.getMonth(startDayWeek)+1).toString()\n    const selectedDay = dateFns.getDate(startDayWeek).toString()\n    this.setState({\n      selectedDate: startDayWeek\n    })\n    this.props.history.push('/personalcalendar/w/'+selectedYear+'/'+selectedMonth+'/'+selectedDay)\n  }\n\n\n\n  // You can use the addMonths function to add one month to the\n  // current month\n  nextMonth = () => {\n    this.props.nextMonth();\n  }\n\n  prevMonth = () => {\n    this.props.prevMonth()\n  }\n\n\n  onClickItem = oneEvent =>{\n    console.log(oneEvent)\n    this.props.openModal(oneEvent)\n  }\n\n  onYearClick = () => {\n    const selectedYear = this.props.parameter.year\n    this.props.history.push('/personalcalendar/'+selectedYear)\n  }\n\n  openEventSyncModal = () => {\n    this.props.openEventSyncModal()\n  }\n\n  eventIndex = (start_time, end_time, day, start_index) => {\n    // so the days are basically the days that the events land on and they are either on the day\n    // you have the event on or the start of the week\n    const start = new Date(start_time)\n    const end = new Date (end_time)\n    const eventDay = new Date (day)\n\n    console.log(day)\n    if (dateFns.isSameWeek(start, end)){\n     const sameWeekDifference = Math.abs(dateFns.differenceInDays(start, end))+1\n     const ratio = start_index + '/' + (sameWeekDifference+start_index)\n     console.log(start_index)\n     console.log(ratio)\n     return ratio\n    } else {\n        if (dateFns.isSameWeek(eventDay, end)){\n          // This one is for the last slot where the week that contains the end date\n          // The plus 2 is for the 1 starting index and 1 for the extra index that make it fall\n          // in the correct position\n          const differentWeekDifference = Math.abs(dateFns.differenceInDays(eventDay, end))+2\n          console.log(Math.abs(differentWeekDifference))\n          return '1/'+differentWeekDifference\n      } if (dateFns.isSameWeek(start, eventDay)){\n        // This is for the event that only spans the start date but the end date is not in the same week\n        const ratio = start_index+'/'+8\n        return ratio\n      } else {\n        // These are for the weeks that doenst have the start or end date\n        const ratio = 1/8\n        return '1/8'\n      }\n    }\n    console.log(start_time)\n    console.log(end_time)\n    console.log(day)\n  }\n\n\n  render(){\n    console.log(this.props)\n    return(\n      <div className = 'calendarContainer'>\n        <EventSyncModal\n          {...this.props}\n          isVisble = {this.props.showEventSyncModal}\n          close = {() => this.props.closeEventSyncModal()}\n        />\n\n        <div className = 'mainCalContainer'>\n          <EventModal visible={this.props.showDrawer} onClose={this.props.closeDrawer} {...this.props} />\n\n        <div className = 'flex-container'>\n          <div className = 'sidecol'>\n          {this.renderSide()}\n          </div>\n          <div className = 'weekCalendar'>\n            <div style={{display: 'inline-block'}}>\n              {this.renderHeader()}\n            </div>\n            <div style={{display: 'inline-block'}}>\n              <CalendarViewDropDown\n              calType = \"month\"\n              history = {this.props.history}\n              matchPara = {this.props.parameter} />\n            </div>\n            <div className = 'calendar'>\n\n              {this.renderDays()}\n              {this.renderCells(this.props.events)}\n            </div>\n\n          </div>\n        </div>\n\n        </div>\n        <div className = 'miniCalContainer'>\n          <Button\n            type=\"primary\"\n            className = 'miniEventSyncButton'\n            onClick = {this.onAddEvent}>\n            Create Event\n          </Button>\n          <MiniCalendar {...this.props}/>\n          <Button\n            style={{marginTop:'40px'}}\n            type = 'primary'\n            className = 'miniEventSyncButton'\n            onClick = {this.openEventSyncModal}>\n              Event Sync\n          </Button>\n          {/*\n          <div className = 'timeLayerCon'>\n            list of people to be added!\n          </div>\n          */}\n        </div>\n        </div>\n    )\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return{\n    showDrawer: state.nav.showPopup,\n    showModal: state.calendarEvent.showModal,\n    currentDate: state.calendar.date,\n    events: state.calendar.events,\n    showEventSyncModal: state.eventSync.showEventSyncModal,\n    id: state.auth.id\n  }\n}\n\n// getSelectedDate will get the date from the url\n// it will help with the lagging of the state so when we put it in\nconst mapDispatchToProps = dispatch => {\n  return {\n    closeDrawer: () => dispatch(navActions.closePopup()),\n    openDrawer: () => dispatch(navActions.openPopup()),\n    openModal: oneEvent => dispatch(calendarEventActions.openEventModal(oneEvent)),\n    closeModal: () => dispatch(calendarEventActions.closeEventModal()),\n    getSelectedDate: selectedDate => dispatch(calendarActions.getDate(selectedDate)),\n    nextMonth: () => dispatch(calendarActions.nextMonth()),\n    prevMonth: () => dispatch(calendarActions.prevMonth()),\n    getEvents: () => dispatch(calendarActions.getUserEvents()),\n    openEventSyncModal: () => dispatch(eventSyncActions.openEventSyncModal()),\n    closeEventSyncModal: () => dispatch(eventSyncActions.closeEventSyncModal())\n  }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(PersonalCalendar);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/YearCalendar.js",["854","855","856","857","858","859","860","861","862","863"],"import React from 'react';\nimport * as dateFns from 'date-fns';\nimport moment from 'moment';\nimport { connect } from 'react-redux';\nimport { Drawer, List, Avatar, Divider, Col, Row, Tag, Button } from 'antd';\nimport * as calendarActions from '../../store/actions/calendars';\nimport * as navActions from '../../store/actions/nav';\nimport * as calendarEventActions from '../../store/actions/calendarEvent';\nimport * as eventSyncActions from '../../store/actions/eventSync';\nimport EventSyncModal from './EventSyncForms/EventSyncModal';\nimport EventModal from './AddCalEventForms/EventModal';\nimport MiniCalendar from './MiniCalendar';\nimport CalendarViewDropDown from './CalendarViewDropDown';\nimport './PersonalCalCSS/NewCalendar.css';\n\n\n\n\n\nclass YearCalendar extends React.Component{\n  state = {\n    currentYear: new Date(),\n  }\n\n  componentDidMount () {\n    const selectedYear = this.props.parameter.year;\n    const newDate = [selectedYear]\n    console.log(newDate)\n    const newSelectedDate = dateFns.addYears(new Date (newDate),1)\n    console.log(newSelectedDate)\n    this.props.getSelectedDate(newSelectedDate)\n  }\n\n  componentWillReceiveProps(newProps){\n    if (this.props.currentDate !== newProps.currentDate){\n\n      const year = dateFns.getYear(newProps.currentDate)\n      this.props.history.push('/personalcalendar/'+year)\n    }\n  }\n\n  renderColor = () => {\n    const color = [\"green\",\"yellow\",\"red\",\"blue\",\"orange\",\"pink\",\"cyan\"]\n    const len = color.length\n    const randomNum = Math.floor(Math.random()*len)\n    const pickcolor = color[randomNum]\n    return pickcolor\n\n  }\n\n  renderHeader() {\n    // This is used to render the year\n    const dateFormat = 'yyyy'\n\n    return(\n      <div style={{width:'550px'}} className = \"header row flex-middle\">\n        <div className = \"col col-start\">\n          <div className = \"icon\" onClick = {this.prevYear} >\n          <i style={{fontSize:'20px', color:'#1890ff'}} class=\"fas fa-chevron-circle-left\"></i>\n          </div>\n        </div>\n        <div className = \"col col-center\">\n          <span\n          >\n            {dateFns.format(this.props.currentDate, dateFormat)}\n          </span>\n        </div>\n        <div className = 'col col-end' onClick = {this.nextYear}>\n          <div className = 'icon'>\n            <i style={{fontSize:'20px', color:'#1890ff'}} class=\"fas fa-chevron-circle-right\"></i>\n          </div>\n        </div>\n\n      </div>\n    )\n  }\n\n  renderMonthCell() {\n    // To render each cell, you would want each cell to hold the months and the days\n    // of that month so you first have to loop through each month and print out the\n    // months then with in that month, since you get the first day of the month you\n    // have to get the start of the week then you get the last day of the month\n    // then get the last day of the week then render through every single day\n    const dateFormat = 'MMMM'\n    const selectedDate = this.props.currentDate;\n    const yearStart = dateFns.startOfYear(selectedDate)\n    const yearEnd = dateFns.endOfYear(selectedDate)\n    // we can make a list that holds all the months then make another function\n    // to put into this function to render out the days\n\n    // The const year is just a list that holds every month\n    const year = []\n\n    let month = yearStart;\n\n    // You will loop through each month until you hit the last month, and after each\n    // loop you will add one month in until you hit the last yearEnd\n    while (month <= yearEnd){\n      const monthCopy = month\n        year.push(\n        <div className = 'yearcol yearcell'>\n          <div\n          className = 'monthBox'\n          onClick = {() => this.onMonthClick(monthCopy)}\n          >\n            <span\n            className = 'monthText'\n            >\n            {dateFns.format(month, dateFormat)}\n            </span>\n          </div>\n          {this.renderDayName()}\n          {this.renderDayInMonth(month)}\n        </div>\n      )\n      month = dateFns.addMonths(month, 1)\n    }\n    return <div className = 'body yearRow'>{year}</div>\n  }\n\n  renderDayName() {\n    const dateFormat = \"iiiii\"\n    const days = []\n    // this will get the date of the first week given the date of the current month\n    let startDate = dateFns.startOfWeek(this.props.currentDate);\n    // for loop that loops through from 0-6 and add the days accordingly\n    // to the start date which is the start of the day in the current date\n    for (let i= 0; i<7; i++){\n      days.push(\n        <div className =\"monthCellCol monthDayCell\" key = {i}>\n          {dateFns.format(dateFns.addDays(startDate, i), dateFormat)}\n          </div>\n      )\n    }\n    // the days will be a list of dates that are put in by the for loops\n     // and then the return will return all those days out\n    return <div className = \"dayYearRow\"> {days} </div>\n  }\n\n  renderDayInMonth = (month) =>{\n    // you would baiscally make this how you made the month view\n    const currentMonth = new Date()\n    const monthStart = dateFns.startOfMonth(month)\n    const endMonth = dateFns.endOfMonth(monthStart)\n    const startWeek = dateFns.startOfWeek(monthStart)\n    const endWeek = dateFns.endOfWeek(endMonth)\n    const rows = []\n    let week = []\n    let day = startWeek;\n    const dateFormat = 'd';\n\n\n    // The while loop is for each week\n     // The for loop how ever is for each day of the week\n     // Basically a 2D loop of the months that hold each week\n    while (day <= endWeek){\n      for (let i= 0; i<7; i++){\n        const cloneDay = day\n        week.push(\n          <div\n          className ='monthCellCol monthDayCell'\n          key = {day}\n          onClick = {() => this.onSelectedDate(cloneDay)}\n          >\n          <span\n          className = 'dayText'\n          >\n          {dateFns.format(day, dateFormat)}\n          </span>\n          </div>\n        )\n        day = dateFns.addDays(day, 1)\n      }\n      rows.push(\n        <div className = 'yearRow' style = {{}}>\n          {week}\n        </div>\n      )\n      week = []\n    }\n\n    return <div className = 'monthcell'> {rows} </div>\n  }\n\n  getMonthColor = (month) => {\n    console.log(month)\n    let monthNum = ''\n    if (month){\n      monthNum = dateFns.getMonth(month)\n      console.log(monthNum)\n    }\n    console.log(monthNum)\n    const listColor = [\n      'linear-gradient(to bottom right, #00008B , #8B0000)',\n      'linear-gradient(to bottom right, #ADD8E6 , #FFFF00)',\n      'linear-gradient(to bottom right, #ADD8E6 , #FFFFFF)',\n      'linear-gradient(to bottom right, #FFFF00 , #FF0000)',\n      'linear-gradient(to bottom right, #FFFF00 , #32CD32)',\n      'linear-gradient(to bottom right, #fffdd0 , #0000FF)',\n      'linear-gradient(to bottom right, #80461b , #FF0000)',\n      'linear-gradient(to bottom right, #FF0000 , #90EE90)',\n      'linear-gradient(to bottom right, #A0522D , #00008B)',\n      'linear-gradient(to bottom right, #FFA500 , #FFFF00)',\n      'linear-gradient(to bottom right, #FFD700 , #A52A2A)',\n      'linear-gradient(to bottom right, #4B0082 , #185a9d)',\n    ]\n\n    if (monthNum !== ''){\n      return listColor[monthNum]\n    }\n\n  }\n\n  prevYear = () =>{\n    this.props.prevYear()\n  }\n\n  nextYear = () => {\n    this.props.nextYear()\n  }\n\n  openEventSyncModal = () => {\n    this.props.openEventSyncModal()\n  }\n\n  onMonthClick = (month) => {\n    const selectedMonth = dateFns.getMonth(month)+1\n    const selectedYear = this.props.parameter.year\n    this.props.history.push('/personalcalendar/'+selectedYear+'/'+selectedMonth)\n  }\n\n  onSelectedDate = date => {\n    const selectYear = dateFns.getYear(date).toString()\n    const selectMonth = (dateFns.getMonth(date)+1).toString()\n    const selectDay = dateFns.getDate(date).toString()\n    console.log(selectYear, selectMonth, selectDay)\n    this.props.history.push('/personalcalendar/'+selectYear+'/'+selectMonth+'/'+selectDay)\n  }\n\n  render(){\n    console.log(this.getMonthColor())\n    return(\n      <div className = 'calendarContainer'>\n      <EventSyncModal\n        {...this.props}\n        isVisble = {this.props.showEventSyncModal}\n        close = {() => this.props.closeEventSyncModal()}\n      />\n\n        <div className = 'mainCalContainer'>\n        <EventModal visible={this.props.showDrawer} onClose={this.props.closeDrawer} {...this.props} />\n\n          <div className = 'flex-container'>\n            <div className = 'calendar'>\n              <div style={{display: 'inline-block'}}>\n                {this.renderHeader()}\n              </div>\n              <div style={{display: 'inline-block'}}>\n                <CalendarViewDropDown\n                calType = \"year\"\n                history = {this.props.history}\n                matchPara = {this.props.parameter} />\n              </div>\n            {this.renderMonthCell()}\n            </div>\n          </div>\n        </div>\n        <div className = 'miniCalContainer'>\n          <Button\n            type=\"primary\"\n            className = 'miniEventSyncButton'\n            onClick = {this.onAddEvent}>\n            Create Event\n          </Button>\n          <MiniCalendar {...this.props}/>\n          <Button\n            style={{marginTop:'40px'}}\n            type = 'primary'\n            className = 'miniEventSyncButton'\n            onClick = {this.openEventSyncModal}>\n              Event Sync\n          </Button>\n          {/*\n          <div className = 'timeLayerCon'>\n            list of people to be added!\n          </div>\n          */}\n        </div>\n      </div>\n    )\n  }\n\n}\n\nconst mapStateToProps = state =>{\n  return {\n    showDrawer: state.nav.showPopup,\n    showModal: state.calendarEvent.showModal,\n    currentDate: state.calendar.date,\n    events: state.calendar.events,\n    showEventSyncModal: state.eventSync.showEventSyncModal\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    closeDrawer: () => dispatch(navActions.closePopup()),\n    closeDrawer: () => dispatch(navActions.closePopup()),\n    openDrawer: () => dispatch(navActions.openPopup()),\n    openModal: oneEvent => dispatch(calendarEventActions.openEventModal(oneEvent)),\n    closeModal: () => dispatch(calendarEventActions.closeEventModal()),\n    getSelectedDate: selectedDate => dispatch(calendarActions.getDate(selectedDate)),\n    nextYear: () => dispatch(calendarActions.nextYear()),\n    prevYear: () => dispatch(calendarActions.prevYear()),\n    openEventSyncModal: () => dispatch(eventSyncActions.openEventSyncModal()),\n    closeEventSyncModal: () => dispatch(eventSyncActions.closeEventSyncModal())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(YearCalendar);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/ProfileCardNewsFeed.js",["864","865","866"],"import React from 'react';\nimport { EnvironmentOutlined, MoreOutlined } from '@ant-design/icons';\nimport './ProfileCardNewsFeed.css';\nimport ava1 from './images/avatar.jpg';\nimport defaultPic from './images/default.png';\nimport { connect } from \"react-redux\";\nimport FollowList from './UserProfiles/FollowList';\nimport { Modal, Avatar, Row, Col, Statistic} from 'antd';\n\n\n\n\n\nclass ProfileCardNewsFeed extends React.Component{\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  state = {\n    followerShow: false,\n    followingShow: false,\n  }\n\n  onFollowerOpen = () => {\n    // This is used to open up the follower list\n    this.setState({\n      followerShow: true\n    })\n  }\n\n  onFollowerCancel = () => {\n    // This is used to close the follower list\n    this.setState({\n      followerShow: false\n    })\n  }\n\n  onFollowingOpen = () => {\n    // This is used to open up the following list\n    this.setState({\n      followingShow: true\n    })\n  }\n\n  onFollowingCancel = () => {\n    // This is to close the following list\n    this.setState({\n      followingShow: false\n    })\n  }\n\n\n\n  render(){\n    console.log(this.props)\n    let firstName = ''\n    let lastName = ''\n    let followers = []\n    let following = []\n    let profilePic = ''\n\n    if (this.props.firstName){\n      firstName = this.props.firstName\n    } if (this.props.lastName){\n      lastName = this.props.lastName\n    } if (this.props.followers){\n      followers = this.props.followers\n    } if (this.props.following){\n      following = this.props.following\n    } if (this.props.profilePic){\n      profilePic = 'http://127.0.0.1:8000'+this.props.profilePic\n    }\n\n\n\n    return (\n      <div className = \"profileCard-NF\">\n        <div className = 'image-box-NF'>\n          <Avatar\n            style={{left:'30%', top:'5%'}}\n            size = {125} shape = 'circle'\n            src = {profilePic} />\n\n        </div>\n        <div className = 'top-NF'>\n        <MoreOutlined />\n        </div>\n        <div className = 'bottom-NF'>\n          <div className = 'name-NF'> {this.capitalize(firstName)} {this.capitalize(lastName)}</div>\n\n        </div>\n        <Row gutter={12} style={{marginTop:'50px'}}>\n          <Col\n            offset={3}\n            span={10}\n            onClick = {() => this.onFollowerOpen()}\n            class=\"clickable\"\n          >\n          <Statistic\n\n            valueStyle={{ marginLeft:'25px',fontSize:'18px', color:'black'}}\n            title={<span style={{fontSize:'16px',}}>Following</span>}\n           value={following.length} loading />\n\n          </Col>\n          <Col\n            onClick = {() => this.onFollowingOpen()}\n            span={10}\n            class=\"clickable\"\n          >\n          <Statistic\n\n            class=\"statisticTest\"\n            valueStyle={{ marginLeft:'25px',fontSize:'18px', color:'black'}}\n            title={<span style={{fontSize:'16px',}}>Followers</span>}\n            value={followers.length} />\n          </Col>\n        </Row>\n        <Modal\n        visible ={this.state.followerShow}\n        onCancel = {this.onFollowerCancel}\n        footer = {null}\n        >\n        <span className ='followWord'> Followers</span>\n        <FollowList follow = {followers} />\n        </Modal>\n\n\n\n        <Modal\n        visible = {this.state.followingShow}\n        onCancel = {this.onFollowingCancel}\n        footer = {null}\n        >\n        <span className = 'followWord'>Following</span>\n        <FollowList follow = {following}/>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport const mapStateToProps = state => {\n  return {\n    firstName: state.auth.firstName,\n    lastName: state.auth.lastName,\n    profilePic: state.auth.profilePic,\n    following: state.auth.following,\n    followers: state.auth.followers\n  }\n}\n\nexport default connect(mapStateToProps)(ProfileCardNewsFeed);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/DayCalendar.js",["867","868","869","870","871","872","873","874","875","876","877","878","879","880","881","882","883","884","885","886","887","888","889","890","891","892","893","894","895","896","897","898","899","900"],"import React from 'react';\nimport * as dateFns from 'date-fns';\nimport axios from 'axios';\nimport { authAxios } from '../../components/util';\nimport Liking from '../NewsfeedItems/Liking';\nimport { Input,\n   Drawer,\n    message,\n    List,\n    Avatar,\n    Divider,\n    Col,\n    Row,\n    Tag,\n    Button,\n    Tooltip,\n    Progress,\n    DatePicker,\n    AvatarGroup,\n    notification,\n    Popover } from 'antd';\nimport { connect } from 'react-redux';\nimport * as navActions from '../../store/actions/nav'\nimport * as calendarEventActions from '../../store/actions/calendarEvent';\nimport * as calendarActions from '../../store/actions/calendars';\nimport * as eventSyncActions from '../../store/actions/eventSync';\nimport EventModal from './AddCalEventForms/EventModal';\nimport MiniCalendar from './MiniCalendar';\nimport EventSyncModal from './EventSyncForms/EventSyncModal';\nimport EditEventPopUp from './EditCalEventForms/EditEventPopUp';\nimport CalendarViewDropDown from './CalendarViewDropDown';\nimport './PersonalCalCSS/NewCalendar.css';\n\n\n\n\nclass DayCalendar extends React.Component{\n  state ={\n      currentDay: new Date(),\n      selectedDate: new Date(),\n      events: [],\n      activeX: null,\n  }\n\n  onDayHourClick = (positionX) => {\n    console.log(positionX)\n    if(this.state.activeX == positionX){\n      this.setState({\n        activeX: null,\n      })\n    } else {\n      this.setState({\n        activeX: positionX\n      })\n    }\n  }\n\n  color = (positionX) => {\n    if(this.state.activeX === positionX){\n      return '#91d5ff'\n    }\n    return '';\n  }\n\n  componentDidMount(){\n    const selectedYear = this.props.parameter.year;\n    const selectedMonth = this.props.parameter.month;\n    const selectedDay = this.props.parameter.day;\n    const newDate = [selectedYear, selectedMonth, selectedDay]\n    const newsSelectedDate = new Date(newDate)\n    this.props.getSelectedDate(newsSelectedDate)\n    this.props.getEvents()\n  }\n\n\n  componentWillReceiveProps(newProps){\n    if (this.props.currentDate !== newProps.currentDate){\n      const year = dateFns.getYear(newProps.currentDate)\n      const month = dateFns.getMonth(newProps.currentDate)\n      const day = dateFns.getDate(newProps.currentDate)\n      this.props.history.push('/personalcalendar/'+year+'/'+(month+1)+'/'+day)\n    }\n  }\n\n\n\n// render the date on top\n  renderHeader(){\n    return (\n      <div style={{width:'550px', marginBottom:'-100px'}} className = 'header row'>\n        <div className = 'col col-start'>\n          <div className = \"icon\" onClick = {this.prevDay}>\n            <i style={{fontSize:'20px', color:'#1890ff'}} class=\"fas fa-chevron-circle-left\"></i>\n          </div>\n        </div>\n        <div className = \"col col-center\">\n          <span>\n            {dateFns.format(this.props.currentDate, 'iiii MMMM dd, yyyy')}\n          </span>\n        </div>\n        <div className = \"col col-end\" onClick = {this.nextDay}>\n          <div className = \"icon\">\n            <i style={{fontSize:'20px', color:'#1890ff'}} class=\"fas fa-chevron-circle-right\"></i>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  renderDays() {\n    const dateFormat = 'iiii'\n    const dayFormat = 'd'\n    const days = []\n\n    let startDate = dateFns.startOfWeek(this.props.currentDate)\n    let cloneStartDate = dateFns.startOfWeek(this.props.currentDate)\n    for (let i = 0; i<7; i++){\n      const cloneCloneStartDate = cloneStartDate\n\n      days.push(\n        <div\n        className = {`weekcol col-center`}\n        key = {i}\n        onClick = {() => this.onDateClick(cloneCloneStartDate)}\n        >\n\n        </div>\n      )\n      cloneStartDate = dateFns.addDays(cloneStartDate, 1)\n    };\n\n    return (\n      <div className = 'dayDays'>\n      {days}\n      </div>\n      )\n  }\n\n// render the time on the side\n  renderHours() {\n    // this format is to render it by hour and am pm\n    // the hours will store the divs\n    const dateFormat = \"h a\"\n    const hours = []\n\n    // starttime will be the start of the day where the time is 00:00\n    // then you will loop loop from 1 am to 11 pm\n    let startTime = dateFns.addHours(dateFns.startOfDay(this.props.currentDate),1);\n    for(let i = 0; i<23; i++){\n      const formattedHour = dateFns.format(startTime, dateFormat)\n      hours.push(\n        <div className = 'cell' key = {i}>\n          <span className = 'number'> {formattedHour}</span>\n        </div>\n      )\n      startTime = dateFns.addHours(startTime, 1)\n    }\n    // render it our but you have to fix the css\n    return <div className = 'body'>{hours}</div>\n  }\n\n\n\n  renderColor = () => {\n    const color = [\"green\",\"yellow\",\"red\",\"blue\",\"orange\",\"pink\",\"cyan\"]\n    const len = color.length\n    const randomNum = Math.floor(Math.random()*len)\n    const pickcolor = color[randomNum]\n    return pickcolor\n\n  }\n\n  onDateClick = (date) => {\n    console.log(date)\n  }\n\n// render all the hour cell within each day\n  renderCells(events) {\n\n    console.log(events)\n    const selectedDate = this.props.currentDate\n    const startHourDay = dateFns.startOfDay(selectedDate)\n    const endHourDay = dateFns.endOfDay(selectedDate)\n\n    // So you have the current day and the selected day\n    // The you get the day, and then you get the first hour of that day\n     // You will do the same with the endHourDay\n     // You will want to loop through all the hours of that day starting with\n     // startHourDay and ending with endHourDay\n    let border = []\n    // The border is to draw the lines for the calendars\n    let toDoStuff = []\n    const hourFormat = \"h a\"\n    // Since there will only be the hours we wont be need a row list\n    let hours = [];\n    // Start of the hour and then loop through all the 24 hours\n    let hour = startHourDay;\n    let formattedHour = \"\";\n    // they are the same time because when you do a new date it goes on the GM time\n    const text = \"You're host\"\n    // Hour is in a date format with the day and time and it will go till the\n    // Same day(endHourday) but till the last sec of the day\n    // Since we are not doing a list of list and there is just days we do not\n    // need the while statment, just a list\n    for (let hourIndex = 0; hourIndex<48; hourIndex++){\n      formattedHour = dateFns.format(hour, hourFormat)\n\n      const cloneHourIndex = hourIndex;\n      const cloneHour = hour\n      for(let item = 0; item < events.length; item ++){\n        // For the if statements and what you put into the calendar depends on\n        // if the day is on the day or if the day and time falls between the two days and\n        // times\n        const startDate = new Date(events[item].start_time)\n        const endDate = new Date(events[item].end_time)\n        const utcStart = dateFns.addHours(startDate, startDate.getTimezoneOffset()/60)\n        const utcEnd = dateFns.addHours(endDate, endDate.getTimezoneOffset()/60)\n\n        if (events[item].repeatCondition === 'weekly'){\n          // This will be the day of the week (0-6)\n          const startEventDayWeek = dateFns.getDay(startDate)\n          const endEventDayWeek = dateFns.getDay(endDate)\n          const cloneDayWeek = dateFns.getDay(cloneHour)\n          const eventDayHour = dateFns.getHours(startDate)\n          const cloneDayHour = dateFns.getHours(cloneHour)\n          const eventDayMinute = dateFns.getMinutes(startDate)\n          const cloneDayMinute = dateFns.getMinutes(cloneHour)\n          console.log('hit here')\n          console.log(startEventDayWeek, cloneDayWeek )\n          if (\n            // startEventDayWeek === cloneDayWeek\n            eventDayHour === cloneDayHour\n            && eventDayMinute === cloneDayMinute\n            && startEventDayWeek <= cloneDayWeek\n            && endEventDayWeek >= cloneDayWeek\n          ){\n\n            toDoStuff.push(\n              events[item]\n            )\n          }\n\n\n        } else if (events[item].repeatCondition === 'daily'){\n          const eventDayHour = dateFns.getHours(startDate)\n          const cloneDayHour = dateFns.getHours(cloneHour)\n          const eventDayMinute = dateFns.getMinutes(startDate)\n          const cloneDayMinute = dateFns.getMinutes(cloneHour)\n\n          if (\n            eventDayHour === cloneDayHour\n            && eventDayMinute === cloneDayMinute\n          ) {\n            toDoStuff.push(\n              events[item]\n            )\n          }\n        } else if (events[item].repeatCondition === 'none'){\n          if (dateFns.isSameHour(startDate, cloneHour)\n              && dateFns.isSameDay(startDate, cloneHour)\n              && dateFns.isSameMinute(startDate, cloneHour)\n             ){\n            toDoStuff.push(\n              events[item]\n            )\n          } if (dateFns.isAfter(cloneHour, startDate)\n          && dateFns.isBefore(cloneHour, endDate)\n          && dateFns.getHours(startDate) === dateFns.getHours(cloneHour)\n          && dateFns.getMinutes(startDate) === dateFns.getMinutes(cloneHour)\n        ){\n          console.log(cloneHour, endDate)\n            toDoStuff.push(\n              events[item]\n            )\n          }\n        }\n\n      }\n\n      const cloneToDoStuff = toDoStuff\n      console.log(cloneToDoStuff)\n      if (toDoStuff.length > 0){\n        hours.push(\n            toDoStuff.map(item => (\n\n              <Popover content={\n                <div style={{padding:20, width:450}}>\n                  <p style={{display:'inline-block'}}>\n\n                  </p>\n\n                    {\n                      (item.invited.length==0)?\n                      <Tag style={{fontSize:'15px', display:'inline-block'}} color={item.color}> private</Tag>\n\n                      :\n                      <Tag style={{fontSize:'15px', display:'inline-block'}} color={item.color}> public</Tag>\n                    }\n\n\n\n\n                  <span style={{color:'black', marginBottom:'10px'}}>\n                  {\n                    (item.title.length>20)?\n                    <p style={{fontSize:'24px', display:'inline-block'}}>{item.title.substring(0,20)}...</p>\n\n                    :\n                    <p style={{fontSize:'24px', display:'inline-block'}}>\n                      {item.title.substring(0,20)}\n                    </p>\n                  }\n\n\n                  </span>\n\n                  <p style={{marginTop:'5px', fontSize:'14px'}}>\n                    <i style={{marginRight:'10px', marginTop:'15px'}} class=\"far fa-calendar-alt\"></i>\n                    <span style={{marginRight:'3px'}}>\n                      {dateFns.format(selectedDate, 'iiii')},\n\n\n                    </span>\n                    {dateFns.format(new Date(item.start_time), 'MMMM')}\n                    &nbsp;\n                    {dateFns.format(new Date(item.start_time), 'd')}\n\n\n\n                    <br/>\n                    <i style={{marginRight:'10px', marginTop:'10px'}} class=\"fas fa-clock\"></i>\n                    <span>\n                        {dateFns.format(new Date(item.start_time),'h:mm a')}\n                        -\n                        {dateFns.format(new Date(item.end_time),'h:mm a')}\n                      </span>\n                    <br/>\n                    {\n                      (item.repeatCondition==\"weekly\")?\n                      <span>\n                        <i class=\"fas fa-redo-alt\" style={{marginRight:'10px'}}></i>\n                        Occurs every\n\n                        <span>\n                          &nbsp;\n                          {dateFns.format(selectedDate, 'iiii')}\n                          &nbsp;\n                        </span>\n\n                      </span>\n\n                      :\n                      <div>\n\n                        {\n                          (item.repeatCondition==\"daily\")?\n                          <span>\n                            <i class=\"fas fa-redo-alt\" style={{marginRight:'10px'}}></i>\n                            Occurs every day\n\n                          </span>\n                          :\n                          <div>\n\n\n                            {\n                              (item.repeatCondition==\"monthly\")?\n                              <span>\n                                <i class=\"fas fa-redo-alt\" style={{marginRight:'10px'}}></i>\n                                Occurs every month\n\n                              </span>\n                              :\n                              <div></div>\n                            }\n\n\n\n\n                          </div>\n                        }\n                     </div>\n\n                    }\n\n                    <div>\n                      <i class=\"fas fa-user-friends\" style={{marginRight:'5px'}}></i>\n                      {\n                        (item.invited.length==0)?\n                          <span> Just You</span>\n\n                        :\n                            <span>   {item.invited.length+1} people</span>\n\n                      }\n                    </div>\n                  </p>\n                  {\n                    (item.backgroundImg)?\n                    <img\n                      style={{display:'inline-block', float:'right'}}\n                    src = {item.backgroundImg}\n                    className = 'popoverPic'\n                     />\n                     :\n                     <div></div>\n                  }\n\n                  {/* if person is host*\n                    item.host\n                    {item.person.length==1 && item.host.username==this.props.username}\n\n\n                  */}\n\n                    {/* for private events and person is host*/}\n                  <div>\n                    {\n\n\n\n                      (item.invited.length==0 && item.host.id==this.props.id)?\n\n                      <span style={{float:'right', padding:'15px', marginTop:'-45px'}}>\n\n                        <Tooltip placement=\"bottomLeft\" title=\"View event\">\n                          <Button\n                          onClick = {() => this.onEventPage(item.id)}\n                          shape=\"circle\"\n                          size=\"large\"\n                          type=\"primary\">\n                             <i class=\"fas fa-eye\"></i>\n                          </Button>\n                        </Tooltip>\n                        <Tooltip placement=\"bottomLeft\" title=\"Remove event\">\n                          <Button\n                          onClick ={() => this.onDeleteEvent(item.id, 'single')}\n                          shape=\"circle\"\n                          size=\"large\"\n                          type=\"primary\"\n                          style={{marginLeft:'10px'}}>\n                             <i class=\"fas fa-times\"></i>\n                          </Button>\n                        </Tooltip>\n                      </span>\n\n                      :\n\n                      <div>\n                        <Divider style={{marginTop:'-1px', marginBottom:'-1px'}}/>\n\n                        <div style={{marginTop:'50px'}} class=\"outerContainerPeople\">\n\n                          <div class=\"innerContainerPeople\" style={{display:'inline-block'}}>\n\n                            <Avatar\n                              shape=\"circle\"\n                              size={60}\n                              src={'http://127.0.0.1:8000'+item.host.profile_picture}\n                              style={{display:'inline-block'}}\n                             />\n                           {\n\n                               (item.host.username==this.props.username)?\n                                 <p class=\"highlightWord\" style={{marginLeft:'15px', fontSize:'16px', color:'black', display:'inline-block'}}\n                                   onClick = {() => this.onProfileClick(item.host.username)}\n                                 >\n\n                                   {text}\n                                 </p>\n                               :\n\n\n                                 <p class=\"highlightWord\" style={{marginLeft:'15px', fontSize:'16px', color:'black', display:'inline-block'}}\n                                   onClick = {() => this.onProfileClick(item.host.username)}\n                                 >\n\n                                   {item.host.first_name} {item.host.last_name}\n                                 </p>\n\n                           }\n\n\n                          </div>\n\n                           <span class=\"innerContainerPeople\" style={{ width: 150, display:'inline-block', float:'right', marginRight:'10px'}}>\n                             {/* going to need a if condition checking if not 100 then you can make status active:\n                                status=\"exception\"\n                                <Progress percent={50} size=\"small\" status=\"active\" />\n                               */}\n                             <Progress percent={Math.floor(100*(((item.accepted.length-1)+item.decline.length)/item.invited.length))} size=\"small\" status=\"active\" gap/>\n                             <Progress percent={Math.floor(100*((item.accepted.length-1)/(item.invited.length)))} size=\"small\" />\n                             {\n                               (Math.floor(100*(item.decline.length/item.invited.length))<100)?\n\n                                <Progress percent={Math.floor(100*(item.decline.length/item.invited.length))} size=\"small\"/>\n                               :\n                               <Progress percent={Math.floor(100*(item.decline.length/item.invited.length))} size=\"small\" status=\"exception\" />\n                             }\n\n\n                           </span>\n                        </div>\n                        <div>\n\n\n                          <Avatar.Group>\n                            <div style={{float:'right', marginRight:'50px'}}>\n\n\n                              {\n                                (item.host.username==this.props.username|| (item.accepted.some(e => e.id == this.props.id))\n\n                                ||(item.host.username==this.props.username))\n                                ?\n                                <div style={{marginRight:'100px', marginTop:'-10px'}}>\n                                  <Tooltip placement=\"bottomLeft\" title=\"View event\">\n                                    <Button\n                                    onClick = {() => this.onEventPage(item.id)}\n                                    shape=\"circle\"\n                                    size=\"large\"\n                                    type=\"primary\">\n                                       <i class=\"fas fa-eye\"></i>\n                                    </Button>\n                                  </Tooltip>\n                                  <Tooltip placement=\"bottomLeft\" title=\"Remove event\">\n                                    <Button\n                                    onClick ={() => this.onDeleteEvent(item.id, 'shared', item.host)}\n                                    shape=\"circle\"\n                                    size=\"large\"\n                                    type=\"primary\"\n                                    style={{marginLeft:'10px'}}>\n                                       <i class=\"fas fa-times\"></i>\n                                    </Button>\n                                  </Tooltip>\n                                </div>\n                                :\n                                <div style={{marginRight:'50px'}}>\n                                  <Tooltip placement=\"bottomLeft\" title=\"View event\">\n                                    <Button\n                                    onClick = {() => this.onEventPage(item.id)}\n                                    shape=\"circle\"\n                                    size=\"large\"\n                                    type=\"primary\">\n                                       <i class=\"fas fa-eye\"></i>\n                                    </Button>\n                                  </Tooltip>\n                                  <Tooltip placement=\"bottomLeft\" title=\"Remove event\">\n                                    <Button\n                                    onClick ={() => this.onDeleteEvent(item.id, 'shared', item.host)}\n                                    shape=\"circle\"\n                                    size=\"large\"\n                                    type=\"primary\"\n                                    style={{marginLeft:'10px'}}>\n                                       <i class=\"fas fa-times\"></i>\n                                    </Button>\n                                  </Tooltip>\n                                  <span>\n                                    <Tooltip placement=\"bottomLeft\" title=\"Accept Invite\">\n                                      <Button\n                                      type=\"primary\"\n                                      shape=\"circle\"\n                                      size=\"large\"\n                                      style={{marginLeft:'10px'}}\n                                      onClick = {() => this.onAcceptShare(item.id, item.host, item.start_time)}\n                                      >\n                                         <i style={{fontSize:'20px'}} class=\"fas fa-user-check\"></i>\n                                      </Button>\n                                    </Tooltip>\n                                    <Tooltip placement=\"bottomLeft\" title=\"Decline Invite\">\n                                      <Button\n                                      shape=\"circle\"\n                                      type=\"primary\"\n                                      size=\"large\"\n                                      danger\n                                      style={{marginLeft:'10px'}}\n                                      onClick = {() => this.onDeclineShare(item.id, item.host, item.start_time)}\n                                      >\n                                         <i class=\"fas fa-user-times\"></i>\n                                      </Button>\n                                      </Tooltip>\n                                    </span>\n                                  </div>\n\n                                }\n                            </div>\n                            <Liking\n                            history = {this.props.history}\n                            like_people={item.invited}/>\n                          </Avatar.Group>\n\n\n                        </div>\n                      </div>\n\n                    }\n                  </div>\n                </div>\n\n                }\n\n\n\n            >\n            {\n\n\n              (item.accepted.includes(this.props.id)||(item.invited.length === 0)||(item.host.username===this.props.username)) ?\n\n              <div className = \"weekEvent\"\n              style = {{\n                gridRow: this.dayEventIndex(item.start_time, item.end_time, cloneHourIndex),\n                backgroundColor: item.color\n              }}\n              onClick = {() => this.onClickItem(item)}>\n              <span > {dateFns.format(new Date(item.start_time),'hh:mm a')} - {dateFns.format(new Date(item.end_time),'hh:mm a')}</span>\n              <span className = ' ' > {item.content} </span>\n              </div>\n\n              :\n\n              <div className = \"weekEventAccept testLook\"\n              style = {{\n                gridRow: this.dayEventIndex(item.start_time, item.end_time, cloneHourIndex),\n                color:'white',\n                backgroundColor: item.color,\n              }}\n              onClick = {() => this.onClickItem(item)}>\n              <span > {dateFns.format(new Date(item.start_time),'hh:mm a')} - {dateFns.format(new Date(item.end_time),'hh:mm a')}</span>\n              <span className = ' ' > {item.content} </span>\n              </div>\n\n\n\n\n            }\n\n\n\n\n          </Popover>\n\n            ))\n        )}\n\n\n      {/*\n        //used to popover for edit form when youre selecting empty\n        // for var dayDay\n        const selectedDate=this.props.currentDate\n        const weekStart = dateFns.startOfWeek(selectedDate);\n        date=weekStart\n        dayday=date\n        // for var hourHour\n        const selectedDate=this.props.currentDate\n        const weekStart = dateFns.startOfWeek(selectedDate);\n        date=weekStart\n        const startHourDay = dateFns.startOfDay(date);\n        let hour = startHourDay;\n        hourHour = hour\n\n        <Popover trigger=\"click\"  placement=\"right\" onClick = {() =>\n        this.addEventClick(dayDay, hourHour)}  content={<div>\n          <EditEventPopUp\n          isVisible = {this.props.showModal}\n          close = {() => this.props.closeModal()}\n          dayNum={dateFns.format(cloneDay, 'd')}\n\n          />\n          </div>}>\n\n\n        </Popover>\n        */}\n      border.push(\n        <Popover trigger=\"click\" onClick = {() =>\n            this.addEventClick(selectedDate, cloneHour)}  content={<div>\n          <EditEventPopUp\n          isVisible = {this.props.showModal}\n          close = {() => this.props.closeModal()}\n          dayNum={dateFns.format(selectedDate, 'd')}\n\n          />\n          </div>}>\n\n            <div\n            style = {{background: this.color(hourIndex)}}\n            onClick = {(e)=> this.onDayHourClick(hourIndex)}\n            className = {`${(hourIndex%2 === 0)? 'dayCellT' : 'dayCellB'}`}\n            // onClick = {() => this.onHourClick(cloneHour)}\n            >\n            </div>\n\n          </Popover>\n      )\n      toDoStuff = []\n      hour = dateFns.addMinutes(hour, 30);\n    }\n    return(\n      <div className = 'scrollBody'>\n      <div className = 'backDayBody'>\n      {border}\n      </div>\n      <div className = 'dayBody'>\n      {hours}\n      </div>\n      </div>\n    )\n  }\n\n\n  addEventClick = (day, hour) => {\n    console.log(day, hour)\n    // So we will be using the edit modal to add a new event in\n    // but because it requres certain objects we need to have a\n    // dicitonary that holds those specitic attribute so that we can\n    //  meet those requirements\n    // We only need the start and end time tho so all the other fields can\n    // be empty\n    let endDate = ''\n    const specificHour = dateFns.getHours(hour)\n    const specificMinute = dateFns.getMinutes(hour)\n    const startDate = dateFns.addHours (day, specificHour)\n    const newStartDate = dateFns.addMinutes(startDate, specificMinute)\n    console.log(dateFns.getHours(newStartDate));\n    if (dateFns.getHours(newStartDate) === 23 && dateFns.getMinutes(newStartDate) === 30){\n      endDate = dateFns.addMinutes(newStartDate, 30);\n    } else {\n      endDate = dateFns.addHours(newStartDate, 1);\n    }\n\n    const finalStart = dateFns.format(newStartDate, 'yyyy-MM-dd HH:mm:ss')\n    const finalEnd = dateFns.format(endDate, 'yyyy-MM-dd HH:mm:ss')\n    console.log(specificHour, specificMinute)\n    if(specificMinute==0){\n      console.log(\"made it\")\n      this.setState({\n        selectCondition:true,\n      });\n    }\n    console.log(this.state.selectCondition)\n    const subInEvent = {\n      addEvent: true,\n      title: '',\n      content: '',\n      start_time: finalStart,\n      end_time: finalEnd,\n      location: '',\n      color: '#1890ff',\n      calendarId: ''\n    }\n    console.log(subInEvent)\n    this.props.openModal(subInEvent)\n\n  }\n\n\n  dayEventIndex = (start_time, end_time, start_index) =>{\n    // This function is used to get the index for the grid values for each of the events\n    // you will basically get the differnece between the start and end time and add it to the\n    // starting index and then you will then add one for any extra 30 mins (there is more math involved\n    // but that is the gist of it)\n    console.log(start_time,end_time, start_index)\n    let bottomIndex = ''\n    const start = new Date(start_time)\n    const end = new Date(end_time)\n    const actualStartIndex = (start_index)+1\n    const startHour = dateFns.getHours(start)\n    const endHour = dateFns.getHours(end)\n    const startMin = dateFns.getMinutes(start)\n    const endMin = dateFns.getMinutes(end)\n    // for the numberator of the index you want to go from the starting index\n    // and then decide if you add 1 or not depending if there is a 30 mins\n    const topIndex = (actualStartIndex)\n    // For the denominator you have to start from the starting index and then add\n    // the number of indexes depending on the hour and then add one if there is a\n    // 30 min mark\n\n    if (startMin === 30 && endMin === 0){\n      if (endHour === startHour +1){\n        bottomIndex = topIndex+(Math.abs(endMin-startMin)/30)\n      }\n      else {\n        bottomIndex = topIndex + ((endHour - startHour))+(Math.abs(endMin-startMin)/30)\n      }\n    } else {\n        bottomIndex = topIndex + ((endHour - startHour)*2)+(Math.abs(endMin - startMin)/30)\n    }\n\n    const ratio = topIndex + '/' + bottomIndex\n    console.log(ratio)\n    return ratio\n  }\n\n\n  onHourClick = (hour) =>{\n    // console.log(day)\n    // console.log(events)\n    const finalStart = dateFns.format(hour, 'yyyy-MM-dd HH:mm:ss')\n    const endDate = dateFns.addHours(hour, 1)\n    const finalEnd = dateFns.format(endDate, 'yyyy-MM-dd HH:mm:ss')\n    console.log(finalStart, finalEnd)\n\n    const subInEvent = {\n      addEvent: true,\n      title: '',\n      content: '',\n      start_time: finalStart,\n      end_time: finalEnd,\n      location: '',\n      color: '#01D4F4',\n      calendarId: ''\n    }\n\n    this.props.openModal(subInEvent)\n\n\n  }\n\n// Use addDays function to change the day\n//This will pretty much push all the render cell and stuff on top by 1 day\n  nextDay = () => {\n    this.props.nextDay()\n  }\n\n  prevDay = () => {\n    this.props.prevDay()\n  }\n\n  onMonthClick = () => {\n    const selectYear = dateFns.getYear(this.props.currentDate).toString()\n    const selectMonth = (dateFns.getMonth(this. props.currentDate)+1).toString()\n    this.props.history.push('/personalcalendar/'+selectYear+'/'+selectMonth)\n  }\n\n  onWeekClick = () => {\n    const week = dateFns.startOfWeek(this.props.currentDate)\n    const selectYear = dateFns.getYear(week).toString()\n    const selectMonth = (dateFns.getMonth(week)+1).toString()\n    const selectDay = dateFns.getDate(week).toString()\n    console.log(selectYear, selectMonth, selectDay)\n    this.props.history.push('/personalcalendar/w/'+selectYear+'/'+selectMonth+'/'+selectDay)\n  }\n\n  onClickItem = oneEvent =>{\n    this.props.openModal(oneEvent)\n  }\n\n  onOpenEvent = () => {\n    this.props.openDrawer()\n  }\n\n  onYearClick = () => {\n    const selectYear = this.props.parameter.year\n    this.props.history.push('/personalcalendar/'+selectYear)\n  }\n\n  openEventSyncModal = () => {\n    this.props.openEventSyncModal()\n  }\n\n  onEventPage = (eventId) => {\n    this.props.history.push('/personalcal/event/'+eventId)\n  }\n\n  render() {\n\n    console.log(this.props)\n    console.log(this.props.currentDate)\n    return (\n      <div className = 'calendarContainer'>\n        <EventSyncModal\n          {...this.props}\n          isVisble = {this.props.showEventSyncModal}\n          close = {() => this.props.closeEventSyncModal()}\n        />\n\n        <div className ='mainCalContainer'>\n          <EventModal visible={this.props.showDrawer} onClose={this.props.closeDrawer} {...this.props} />\n            <div className = 'weekCalendar'>\n              <div style={{display: 'inline-block'}}>\n                {this.renderHeader()}\n              </div>\n              <div style={{display: 'inline-block'}}>\n                <CalendarViewDropDown\n                  class=\"CalendarViewCSS\"\n                  calType = \"day\"\n                  curDate = {this.props.currentDate}\n                  history = {this.props.history}\n                  matchPara = {this.props.parameter} />\n              </div>\n              {this.renderDays()}\n            </div>\n          <div className = 'testBox'>\n          <div className = 'dayFlex-Container'>\n            <div className = 'timecol'>\n              {this.renderHours()}\n            </div>\n            <div className = 'calendar'>\n\n              {this.renderCells(this.props.events)}\n              </div>\n            </div>\n            <EditEventPopUp\n            isVisible = {this.props.showModal}\n            close = {() => this.props.closeModal()}\n            />\n          </div>\n          </div>\n\n\n          <div className = 'miniCalContainer'>\n            <Button\n              type=\"primary\"\n              className = 'miniEventSyncButton'\n              onClick = {this.onAddEvent}>\n              Create Event\n            </Button>\n            <MiniCalendar {...this.props}/>\n            <Button\n              style={{marginTop:'40px'}}\n              type = 'primary'\n              className = 'miniEventSyncButton'\n              onClick = {this.openEventSyncModal}>\n                Event Sync\n            </Button>\n            {/*\n            <div className = 'timeLayerCon'>\n              list of people to be added!\n            </div>\n            */}>\n          </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return{\n    showDrawer: state.nav.showPopup,\n    showModal: state.calendarEvent.showModal,\n    currentDate: state.calendar.date,\n    events: state.calendar.events,\n    showEventSyncModal: state.eventSync.showEventSyncModal,\n    id: state.auth.id\n\n\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    closeDrawer: () => dispatch(navActions.closePopup()),\n    openDrawer: () => dispatch(navActions.openPopup()),\n    openModal: oneEvent => dispatch(calendarEventActions.openEventModal(oneEvent)),\n    closeModal: () => dispatch(calendarEventActions.closeEventModal()),\n    getSelectedDate: selectedDate => dispatch(calendarActions.getDate(selectedDate)),\n    nextDay: () => dispatch(calendarActions.nextDay()),\n    prevDay: () => dispatch(calendarActions.prevDay()),\n    getEvents: () => dispatch(calendarActions.getUserEvents()),\n    openEventSyncModal: () => dispatch(eventSyncActions.openEventSyncModal()),\n    closeEventSyncModal: () => dispatch(eventSyncActions.closeEventSyncModal())\n  }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps) (DayCalendar);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/WeekCalendar.js",["901","902","903","904","905","906","907","908","909","910","911","912","913","914","915","916","917","918","919","920","921","922","923","924","925","926","927","928","929","930","931","932","933","934","935","936","937","938","939","940","941","942","943","944","945"],"import React from 'react';\nimport * as dateFns from 'date-fns';\nimport moment from 'moment';\nimport axios from 'axios';\nimport { authAxios } from '../../components/util';\nimport { Input,\n   Drawer,\n    message,\n    List,\n    Avatar,\n    Divider,\n    Col,\n    Row,\n    Tag,\n    Button,\n    Tooltip,\n    Progress,\n    DatePicker,\n    AvatarGroup,\n    notification,\n    Popover } from 'antd';\nimport { UserOutlined, AntDesignOutlined } from '@ant-design/icons';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { NavLink } from 'react-router-dom';\nimport * as navActions from '../../store/actions/nav';\nimport * as calendarEventActions from '../../store/actions/calendarEvent';\nimport * as calendarActions from '../../store/actions/calendars';\nimport * as eventSyncActions from '../../store/actions/eventSync';\nimport EditEventPopUp from './EditCalEventForms/EditEventPopUp';\nimport MiniCalendar from './MiniCalendar';\nimport EventSyncModal from './EventSyncForms/EventSyncModal';\nimport EventModal from './AddCalEventForms/EventModal';\nimport CalendarViewDropDown from './CalendarViewDropDown';\nimport CalendarEventWebSocketInstance from '../../calendarEventWebsocket';\nimport NotificationWebSocketInstance from '../../notificationWebsocket';\nimport './PersonalCalCSS/NewCalendar.css';\nimport 'antd/dist/antd.css';\nimport Liking from '../NewsfeedItems/Liking';\nimport RemoveEventModal from './EditCalEventForms/RemoveEventModal';\nimport DetailEditEventForm from './EventPage/DetailEditEventForm';\n\n\nconst { Group } = Avatar\n\nclass WeekCalendar extends React.Component{\n  // So when ever you do calendars, for states  you always want\n  // to set the currentWeek as the current day because, you can use\n  // get current week to get the firstday\n  constructor(props) {\n        super(props)\n        this.myRef = React.createRef()\n    }\n  state = {\n    currentWeek: new Date(),\n    selectedDate: new Date(),\n    events: [],\n    activeX: null,\n    activeY: null,\n  }\n  scrollToMyRef = (ref) => {\n    if(ref){\n    ref.scrollIntoView({ behavior: 'smooth', block: 'start' })\n    }\n  }\n  onProfileClick = (username) => {\n    console.log(username)\n    if (username === this.props.currentUser){\n      window.location.href = 'current-user/'\n    } else {\n      window.location.href = 'explore/'+username\n    }\n  }\n\n  declineEventMessage = () => {\n    message.success('You have declined the event' , 2);\n  };\n\n  acceptEventMessage = () => {\n    message.success('You have accepted the event' , 2);\n  };\n\n\n  onDayHourClick = (positionX, positionY) => {\n\n    if (this.state.activeX==positionX && this.state.activeY === positionY){\n      this.setState({\n        activeX: null,\n        activeY: null,\n        selectedDate: null\n      })\n    } else {\n      this.setState({\n        activeX: positionX,\n        activeY: positionY,\n\n      })\n    }\n\n  }\n\n  color = (positionX, positionY) => {\n    // Just the color of the selected time on the pick event sync calendar\n    if (this.state.activeX === positionX &&this.state.activeY === positionY){\n      return '#91d5ff';\n    }\n    if(this.state.activeX === positionX && this.state.activeY === positionY-1){\n      return '#91d5ff';\n    }\n    return '';\n  }\n  componentDidMount(){\n    //I will be pulling the first day of the week to set the week\n    const selectedYear = this.props.parameter.year;\n    const selectedMonth = this.props.parameter.month;\n    // This will pretty much be the first day of the week\n    const startWeekDay = this.props.parameter.day;\n    // this is just to put things in a format so we can get the date working\n    const newWeek = [selectedYear, selectedMonth, startWeekDay]\n    const newSelectedDate = new Date(newWeek)\n    this.props.getSelectedDate(newSelectedDate)\n    // you want to call the events from the redux instead of the states\n    this.props.getEvents()\n\n  }\n\n  componentWillReceiveProps(newProps){\n    console.log(this.props.currentDate, newProps.currentDate)\n    // you bascially want to check if the date in props and the date in\n    // the url is the safe, if they are not --> you gotta change it\n    // We would use new props here is because when you go to the nextWeek\n    // or previous week the props changes\n    if (this.props.currentDate !== newProps.currentDate) {\n      const year = dateFns.getYear(newProps.currentDate)\n      const month = dateFns.getMonth(newProps.currentDate)\n      const day = dateFns.getDate(newProps.currentDate)\n      this.props.history.push('/personalcalendar/w/'+year+'/'+(month+1)+'/'+day)\n    }\n  }\n\n\n\n  // This will be rending the header of the view, for weekly view, it will be\n  // the start week to the end of the start week and start of the week\n  renderHeader() {\n    const dateFormat = 'MMMM, yyyy'\n    const startWeek = dateFns.startOfWeek(this.props.currentDate)\n    const endWeek = dateFns.endOfWeek(this.props.currentDate)\n    return(\n\n      <div style={{width:'550px'}} className = 'header row'>\n        <div className = 'col col-start'>\n          <div className = 'icon' onClick = {this.prevWeek}>\n            <i style={{fontSize:'20px', color:'#1890ff'}} class=\"fas fa-chevron-circle-left\"></i>\n          </div>\n        </div>\n        <div className = 'col col-center'>\n          <span>\n            {dateFns.format(startWeek, dateFormat)}\n          </span>\n        </div>\n        <div className = 'col col-end' onClick = {this.nextWeek}>\n          <div className = 'icon'>\n            <i style={{fontSize:'20px', color:'#1890ff'}} class=\"fas fa-chevron-circle-right\"></i>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n\n\n  // This is to render the days on top (like Mon, tuesday etc)\n  renderDays(){\n    // so iiii format actually renders the name of the day\n    const dateFormat = 'iiii'\n    const dayFormat = 'd'\n    const days = []\n\n    let startDate = dateFns.startOfWeek(this.props.currentDate)\n    let cloneStartDate = dateFns.startOfWeek(this.props.currentDate)\n    for (let i = 0; i<7; i++){\n      const cloneCloneStartDate = cloneStartDate\n      days.push(\n        <div\n        className = {`weekcol col-center\n          ${dateFns.isSameDay(cloneCloneStartDate, new Date()) ? 'cellBorder' : ''} `}\n        key = {i}\n\n        >\n          {dateFns.format(dateFns.addDays(startDate, i), dateFormat)}\n          <br />\n          <span class=\"weekDayHover\" onClick = {() => this.onDateClick(cloneCloneStartDate)}>\n          {dateFns.format(dateFns.addDays(startDate, i), dayFormat)}\n          </span>\n        </div>\n      )\n      cloneStartDate = dateFns.addDays(cloneStartDate, 1)\n    };\n\n    return (\n      <div className = 'weekDays row'>\n      {days}\n      </div>\n      )\n  }\n\n  // This is to show the time on the side instead of in each box\n  // It is too cluttered\n\n  renderSide() {\n    const dateFormat = 'h a'\n    const hour = []\n    let startHour = dateFns.addHours(dateFns.startOfDay(this.props.currentDate),1)\n    for (let i = 0; i<23; i++){\n      const formattedHour = dateFns.format(startHour, dateFormat)\n      hour.push(\n        <div\n          className = 'cell'\n          key = {hour}\n        >\n        <span className = 'number'>{formattedHour}</span>\n        </div>\n      )\n      startHour = dateFns.addHours(startHour, 1)\n    }\n    return <div className= 'body'> {hour} </div>\n  }\n\n\n  // USE THIS\n  renderWeekCell(events){\n    console.log(events)\n    // To explain the grid --> there is a big container that holds many rows and each\n    // row is split into 7 columns and 2 rows and there is 24 rows and you will place the\n    // information\n    // So what you wanted to do for this is that you will make a list of lsit\n    // so the first list is the list of the same hour for multiple day so it\n    // will be a list of 7 items of all the same time, and the big list will have\n    // 24 items\n    const currentWeek = this.state.currentWeek;\n    const selectedDate = this.props.currentDate;\n    // this will give you the first day of the week\n    const weekStart = dateFns.startOfWeek(selectedDate);\n    const weekEnd = dateFns.endOfWeek(selectedDate);\n\n    const hourFormat = 'h a'\n    const dayFormat = 'd MMMM'\n    // So this list will hold 24 items, each list for each hour\n    const hours = []\n    const borderHolder = []\n    let border = []\n    // this list will hold all the events\n    let toDoStuff = []\n    // This will be the list of events that will render in the weekBody\n    // And then you can sort it out in the weekBody using the index\n    let days = []\n    // The things we need is the start day and then we need the start of the\n    // hour so we can loop through it\n    let date = weekStart\n    const startHourDay = dateFns.startOfDay(date);\n    const endHourDay = dateFns.endOfDay(date);\n\n    // Just for the development, we want to show the hourt=\n    let formattedDay = '';\n\n    let hour = startHourDay;\n    let formattedHour = '';\n    // Day difference is to see how long the week days are\n    const dayDifference = dateFns.differenceInDays(weekEnd, weekStart)+1\n  // So the plan for the week is to make one big container that is 7x24\n  // and to loop through each day by doing a while loop that runs through each day\n  // and in each day it will run through each hour, basically what we do is that if the events fit in\n  // to the range of time then we put the events into that one container and then use index to just figure out\n  // where to place them\n  // The way I will track the event is by having a time \"index\" running as the loop is running\n\n  for (let dayIndex = 0; dayIndex < 7; dayIndex++){\n\n    for (let hourIndex = 0; hourIndex< 48; hourIndex++){\n\n\n        const clonedayIndex = dayIndex\n        const clonehourIndex = hourIndex\n        const cloneDay = date\n        const cloneHour = hour\n      for(let item = 0; item < events.length;item ++){\n\n        // Each event will be added in if it falls within the certain time or hour that\n        // is looped through, and when you loop through, there will be an index that will be\n        // associated with that area so then you would use that index to place where the item is\n        const startDate = new Date(events[item].start_time)\n        const endDate = new Date(events[item].end_time)\n\n        // DONT NEED TO USE THIS\n        // const utcStart = dateFns.addHours(startDate, startDate.getTimezoneOffset()/60)\n        // const utcEnd = dateFns.addHours(endDate, endDate.getTimezoneOffset()/60)\n\n        // This will be for the reoccuring events that happens weekly, monthly and yearly\n        // and since from now on each event will have a assocated occurancd type, we can use\n        // that to decided where the event can go. We will be using the format day to get out\n        // the day of the week of the current day and of the event and then try to just match it but\n        // this time, any days that have similar day of the week, you will just add that day in,\n        // it is like you are repeating it\n\n        if (events[item].repeatCondition === 'weekly'){\n          // This will be the day of the week (0-6)\n          const eventDayWeek = dateFns.getDay(startDate);\n          const cloneDayWeek = dateFns.getDay(cloneDay);\n          const eventDayHour = dateFns.getHours(startDate);\n          const cloneDayHour = dateFns.getHours(cloneHour);\n          const eventDayMinute = dateFns.getMinutes(startDate);\n          const cloneDayMinute = dateFns.getMinutes(cloneHour);\n\n          console.log(eventDayWeek)\n\n          if (eventDayWeek === cloneDayWeek\n          && eventDayHour === cloneDayHour\n          && eventDayMinute === cloneDayMinute\n        ){\n          console.log(eventDayWeek, cloneDayWeek)\n          // This if statement has to do more with events that span ususally one day or within\n          // one week\n\n            // So unlike the previous week calendar, we do not need to have a box on every grid\n            // we just need to have all the events that fall into that week on that week and then with the\n            // index we can start rearragning the events in that week calendar\n            toDoStuff.push(\n              events[item]\n            )\n          }\n        //   if(dateFns.isAfter(cloneDay, startDate) && dateFns.isBefore(cloneDay, endDate)\n        //   && dateFns.isSameDay(cloneDay, dateFns.startOfWeek(cloneDay))\n        //   && dateFns.getHours(startDate) === dateFns.getHours(cloneHour)\n        //   && dateFns.getMinutes(startDate) === dateFns.getMinutes(cloneHour)\n        // ){\n        //   console.log(cloneHour, endDate)\n        //\n        //   // This if statement has more to do with the events that span multiple days\n        //     toDoStuff.push(\n        //       events[item]\n        //     )\n        //   }\n\n\n      } else if (events[item].repeatCondition === 'daily'){\n        const eventDayHour = dateFns.getHours(startDate);\n        const cloneDayHour = dateFns.getHours(cloneHour);\n        const eventDayMinute = dateFns.getMinutes(startDate);\n        const cloneDayMinute = dateFns.getMinutes(cloneHour);\n\n      if (eventDayHour === cloneDayHour\n        && eventDayMinute === cloneDayMinute\n      ) {\n        toDoStuff.push(\n          events[item]\n        )\n      }\n\n\n\n      } else if(events[item].repeatCondition === 'none'){\n              if (dateFns.isSameDay(startDate,cloneDay) && dateFns.isSameHour(startDate,cloneHour)\n              && dateFns.isSameMinute(startDate, cloneHour)\n            ){\n              // This if statement has to do more with events that span ususally one day or within\n              // one week\n\n                // So unlike the previous week calendar, we do not need to have a box on every grid\n                // we just need to have all the events that fall into that week on that week and then with the\n                // index we can start rearragning the events in that week calendar\n                toDoStuff.push(\n                  events[item]\n                )\n              }if(dateFns.isAfter(cloneDay, startDate) && dateFns.isBefore(cloneDay, endDate)\n              && dateFns.isSameDay(cloneDay, dateFns.startOfWeek(cloneDay))\n              && dateFns.getHours(startDate) === dateFns.getHours(cloneHour)\n              && dateFns.getMinutes(startDate) === dateFns.getMinutes(cloneHour)\n            ){\n              console.log(cloneHour, endDate)\n\n              // This if statement has more to do with the events that span multiple days\n                toDoStuff.push(\n                  events[item]\n                )\n              }\n\n        }\n\n\n\n      }\n\n        if (toDoStuff.length > 0){\n          // This one is to render each of the events (like the event boxes)\n          // So since this is a \"list\" for a grid--> so you would sort the events\n          // out in the weekBody\n\n          // The day index represents the start column and the hour index represent the start row\n          let startDate = dateFns.startOfWeek(this.props.currentDate)\n          console.log(toDoStuff)\n          const text = \"You're host\"\n          days.push(\n\n            toDoStuff.map(item =>  (\n\n              <Popover placement=\"right\"  content={\n                <div style={{padding:20, width:450}}>\n                  <p style={{display:'inline-block'}}>\n\n                  </p>\n\n                    {\n                      (item.invited.length==0)?\n                      <Tag style={{fontSize:'15px', display:'inline-block'}} color={item.color}> private</Tag>\n\n                      :\n                      <Tag style={{fontSize:'15px', display:'inline-block'}} color={item.color}> public</Tag>\n                    }\n\n\n\n\n                  <span style={{color:'black', marginBottom:'10px'}}>\n                  {\n                    (item.title.length>20)?\n                    <p style={{fontSize:'24px', display:'inline-block'}}>{item.title.substring(0,20)}...</p>\n\n                    :\n                    <p style={{fontSize:'24px', display:'inline-block'}}>\n                      {item.title.substring(0,20)}\n                    </p>\n                  }\n\n\n                  </span>\n\n                  <p style={{marginTop:'5px', fontSize:'14px'}}>\n                    <i style={{marginRight:'10px', marginTop:'15px'}} class=\"far fa-calendar-alt\"></i>\n                    <span style={{marginRight:'3px'}}>\n                      {dateFns.format(cloneDay, 'iiii')},\n\n\n                    </span>\n                    {dateFns.format(new Date(item.start_time), 'MMMM')}\n                    &nbsp;\n                    {dateFns.format(new Date(item.start_time), 'd')}\n\n\n\n                    <br/>\n                    <i style={{marginRight:'10px', marginTop:'10px'}} class=\"fas fa-clock\"></i>\n                    <span>\n                        {dateFns.format(new Date(item.start_time),'h:mm a')}\n                        -\n                        {dateFns.format(new Date(item.end_time),'h:mm a')}\n                      </span>\n                    <br/>\n                    {\n                      (item.repeatCondition==\"weekly\")?\n                      <span>\n                        <i class=\"fas fa-redo-alt\" style={{marginRight:'10px'}}></i>\n                        Occurs every\n\n                        <span>\n                          &nbsp;\n                          {dateFns.format(cloneDay, 'iiii')}\n                          &nbsp;\n                        </span>\n\n                      </span>\n\n                      :\n                      <div>\n\n                        {\n                          (item.repeatCondition==\"daily\")?\n                          <span>\n                            <i class=\"fas fa-redo-alt\" style={{marginRight:'10px'}}></i>\n                            Occurs every day\n\n                          </span>\n                          :\n                          <div>\n\n\n                            {\n                              (item.repeatCondition==\"monthly\")?\n                              <span>\n                                <i class=\"fas fa-redo-alt\" style={{marginRight:'10px'}}></i>\n                                Occurs every month\n\n                              </span>\n                              :\n                              <div></div>\n                            }\n\n\n\n\n                          </div>\n                        }\n                     </div>\n\n                    }\n\n                    <div>\n                      <i class=\"fas fa-user-friends\" style={{marginRight:'5px'}}></i>\n                      {\n                        (item.invited.length==0)?\n                          <span> Just You</span>\n\n                        :\n                            <span>   {item.invited.length+1} people</span>\n\n                      }\n                    </div>\n                  </p>\n                  {\n                    (item.backgroundImg)?\n                    <img\n                      style={{display:'inline-block', float:'right', marginRight:'25px'}}\n                    src = {item.backgroundImg}\n                    className = 'popoverPic'\n                     />\n                     :\n                     <div></div>\n                  }\n\n                  {/* if person is host*\n                    item.host\n                    {item.person.length==1 && item.host.username==this.props.username}\n\n\n                  */}\n\n                    {/* for private events and person is host*/}\n                  <div>\n                    {\n\n\n\n                      (item.invited.length==0 && item.host.id==this.props.id)?\n\n                      <span style={{float:'right',\n                        marginTop:'-25px', marginRight:'25px'}}>\n\n                        <Tooltip placement=\"bottomLeft\" title=\"View event\">\n                          <Button\n                          onClick = {() => this.onEventPage(item.id)}\n                          shape=\"circle\"\n                          size=\"large\"\n                          type=\"primary\">\n                             <i class=\"fas fa-eye\"></i>\n                          </Button>\n                        </Tooltip>\n                        <Tooltip placement=\"bottomLeft\" title=\"Remove event\">\n                          <Button\n                          onClick ={() => this.onDeleteEvent(item.id, 'single')}\n                          shape=\"circle\"\n                          size=\"large\"\n                          type=\"primary\"\n                          style={{marginLeft:'10px'}}>\n                             <i class=\"fas fa-times\"></i>\n                          </Button>\n                        </Tooltip>\n                      </span>\n\n                      :\n\n                      <div>\n                        <Divider style={{marginTop:'-1px', marginBottom:'-1px'}}/>\n\n                        <div style={{marginTop:'50px'}} class=\"outerContainerPeople\">\n\n                          <div class=\"innerContainerPeople\" style={{display:'inline-block'}}>\n\n                            <Avatar\n                              shape=\"circle\"\n                              size={60}\n                              src={'http://127.0.0.1:8000'+item.host.profile_picture}\n                              style={{display:'inline-block'}}\n                             />\n                           {\n\n                               (item.host.username==this.props.username)?\n                                 <p class=\"highlightWord\" style={{marginLeft:'15px', fontSize:'16px', color:'black', display:'inline-block'}}\n                                   onClick = {() => this.onProfileClick(item.host.username)}\n                                 >\n\n                                   {text}\n                                 </p>\n                               :\n\n\n                                 <p class=\"highlightWord\" style={{marginLeft:'15px', fontSize:'16px', display:'inline-block'}}\n                                   onClick = {() => this.onProfileClick(item.host.username)}\n                                 >\n\n                                   {item.host.first_name} {item.host.last_name}\n                                 </p>\n\n                           }\n\n\n                          </div>\n\n                           <span class=\"innerContainerPeople\" style={{ width: 150, display:'inline-block', float:'right', marginRight:'10px'}}>\n                             {/* going to need a if condition checking if not 100 then you can make status active:\n                                status=\"exception\"\n                                <Progress percent={50} size=\"small\" status=\"active\" />\n                               */}\n                             <Progress percent={Math.floor(100*(((item.accepted.length-1)+item.decline.length)/item.invited.length))} size=\"small\" status=\"active\" gap/>\n                             <Progress percent={Math.floor(100*((item.accepted.length-1)/(item.invited.length)))} size=\"small\" />\n                             {\n                               (Math.floor(100*(item.decline.length/item.invited.length))<100)?\n\n                                <Progress percent={Math.floor(100*(item.decline.length/item.invited.length))} size=\"small\"/>\n                               :\n                               <Progress percent={Math.floor(100*(item.decline.length/item.invited.length))} size=\"small\" status=\"exception\" />\n                             }\n\n\n                           </span>\n                        </div>\n                        <div>\n\n\n                          <Avatar.Group>\n                            <div style={{float:'right', marginRight:'50px'}}>\n\n\n                              {\n                                (item.host.username==this.props.username|| (item.accepted.some(e => e.id === this.props.id))\n\n                                ||(item.host.username==this.props.username))\n                                ?\n                                <div style={{marginRight:'100px', marginTop:'-10px'}}>\n                                  <Tooltip placement=\"bottomLeft\" title=\"View event\">\n                                    <Button\n                                    onClick = {() => this.onEventPage(item.id)}\n                                    shape=\"circle\"\n                                    size=\"large\"\n                                    type=\"primary\">\n                                       <i class=\"fas fa-eye\"></i>\n                                    </Button>\n                                  </Tooltip>\n                                  <Tooltip placement=\"bottomLeft\" title=\"Remove event\">\n                                    <Button\n                                    onClick ={() => this.onDeleteEvent(item.id, 'shared', item.host)}\n                                    shape=\"circle\"\n                                    size=\"large\"\n                                    type=\"primary\"\n                                    style={{marginLeft:'10px'}}>\n                                       <i class=\"fas fa-times\"></i>\n                                    </Button>\n                                  </Tooltip>\n                                </div>\n                                :\n                                <div style={{marginRight:'50px'}}>\n                                  <Tooltip placement=\"bottomLeft\" title=\"View event\">\n                                    <Button\n                                    onClick = {() => this.onEventPage(item.id)}\n                                    shape=\"circle\"\n                                    size=\"large\"\n                                    type=\"primary\">\n                                       <i class=\"fas fa-eye\"></i>\n                                    </Button>\n                                  </Tooltip>\n                                  <Tooltip placement=\"bottomLeft\" title=\"Remove event\">\n                                    <Button\n                                    onClick ={() => this.onDeleteEvent(item.id, 'shared', item.host)}\n                                    shape=\"circle\"\n                                    size=\"large\"\n                                    type=\"primary\"\n                                    style={{marginLeft:'10px'}}>\n                                       <i class=\"fas fa-times\"></i>\n                                    </Button>\n                                  </Tooltip>\n                                  <span>\n                                    <Tooltip placement=\"bottomLeft\" title=\"Accept Invite\">\n                                      <Button\n                                      type=\"primary\"\n                                      shape=\"circle\"\n                                      size=\"large\"\n                                      style={{marginLeft:'10px'}}\n                                      onClick = {() => this.onAcceptShare(item.id, item.host, item.start_time)}\n                                      >\n                                         <i style={{fontSize:'20px'}} class=\"fas fa-user-check\"></i>\n                                      </Button>\n                                    </Tooltip>\n                                    <Tooltip placement=\"bottomLeft\" title=\"Decline Invite\">\n                                      <Button\n                                      shape=\"circle\"\n                                      type=\"primary\"\n                                      size=\"large\"\n                                      danger\n                                      style={{marginLeft:'10px'}}\n                                      onClick = {() => this.onDeclineShare(item.id, item.host, item.start_time)}\n                                      >\n                                         <i class=\"fas fa-user-times\"></i>\n                                      </Button>\n                                      </Tooltip>\n                                    </span>\n                                  </div>\n\n                                }\n                            </div>\n                            <Liking num={5} like_people={item.accepted}/>\n                          </Avatar.Group>\n\n\n                        </div>\n                      </div>\n\n                    }\n                  </div>\n\n\n\n            </div>\n\n            }\n\n\n\n        >\n\n        {/* color on week calendar */}\n              {   (\n                  (item.accepted.some(e => e.id === this.props.id))\n                  ||(item.invited.length==0)\n                  ||(item.host.username==this.props.username)\n                  )\n\n                 ?\n                <div\n                   key= {item.title}\n                    onClick = {() => this.onClickItem(item)}\n                     className = \"weekEvent\"\n                     style = {{\n                      gridColumn: this.dayEventIndex(item.start_time, item.end_time, date, dayIndex) ,\n                      // gridRow: 15/17,\n                      gridRow: this.hourEventIndex(item.start_time, item.end_time, clonehourIndex),\n\n                      backgroundColor: item.color\n                    }}>\n\n\n                        <span style={{marginLeft:'10px'}}  className=\"pointerEvent\">\n                          <span sclassName = 'pointerEvent' > {item.title.substring(0,25)} </span>\n                          <br/>\n                          <span style={{marginLeft:'10px'}}  className = 'pointerEvent'>\n                            {dateFns.format(new Date(item.start_time),'h:mm a')}\n                            -\n                            {dateFns.format(new Date(item.end_time),'h:mm a')}\n\n                          </span>\n\n                        </span>\n\n\n                </div>\n\n                :\n\n                <div\n                   key= {item.title}\n                    onClick = {() => this.onClickItem(item)}\n                     className = \"weekEventAccept testLook\"\n                     style = {{\n                      gridColumn: this.dayEventIndex(item.start_time, item.end_time, date, dayIndex) ,\n                      // gridRow: 15/17,\n                      gridRow: this.hourEventIndex(item.start_time, item.end_time, clonehourIndex),\n                      color:'white',\n                      backgroundColor: item.color,\n                    }}>\n\n\n                        <span className=\"pointerEvent\">\n                          <span className = 'pointerEvent' > {item.title.substring(0,25) } </span>\n                          <br/>\n                          <span className = 'pointerEvent'>\n                            {dateFns.format(new Date(item.start_time),'h:mm a')}\n                            -\n                            {dateFns.format(new Date(item.end_time),'h:mm a')}\n\n                          </span>\n\n                        </span>\n\n\n                </div>\n              }\n\n\n\n\n\n              </Popover>\n            ))\n\n          )\n        }\n        border.push(\n          <Popover trigger=\"click\"  placement=\"right\" onClick = {() => this.addEventClick(cloneDay, cloneHour)}  content={<div>\n            <EditEventPopUp\n            isVisible = {this.props.showModal}\n            close = {() => this.props.closeModal()}\n            dayNum={dateFns.format(cloneDay, 'd')}\n\n            />\n            </div>}>\n\n\n            <div\n              style={{background: this.color(dayIndex, hourIndex)}}\n              onClick = {(e) => this.onDayHourClick(dayIndex, hourIndex)}\n            className = {`col ${hourIndex % 2 === 0 ? 'hourcellT' : 'hourcellB' }\n\n            ` }\n            >\n\n\n            </div>\n\n\n              </Popover>\n\n        )\n        toDoStuff =[]\n        hour = dateFns.addMinutes(hour, 30)\n\n      }\n      // borderHolder.push(\n      //   <div className = ''>\n      //   {border}\n      //   </div>\n      // )\n      // border = []\n      date = dateFns.addDays(date, 1)\n\n    }\n\n    return(\n      <div className = 'scrollBody'>\n      <div className = 'backWeekBody'>\n      {border}\n      </div>\n      <div className= 'weekBody'>\n          {days}\n      </div>\n      </div>\n    )\n\n\n  }\n\n  addEventClick = (day, hour) => {\n    console.log(day, hour)\n    // So we will be using the edit modal to add a new event in\n    // but because it requres certain objects we need to have a\n    // dicitonary that holds those specitic attribute so that we can\n    //  meet those requirements\n    // We only need the start and end time tho so all the other fields can\n    // be empty\n    let endDate = ''\n    const specificHour = dateFns.getHours(hour)\n    const specificMinute = dateFns.getMinutes(hour)\n    const startDate = dateFns.addHours (day, specificHour)\n    const newStartDate = dateFns.addMinutes(startDate, specificMinute)\n    console.log(dateFns.getHours(newStartDate));\n    if (dateFns.getHours(newStartDate) === 23 && dateFns.getMinutes(newStartDate) === 30){\n      endDate = dateFns.addMinutes(newStartDate, 30);\n    } else {\n      endDate = dateFns.addHours(newStartDate, 1);\n    }\n\n    const finalStart = dateFns.format(newStartDate, 'yyyy-MM-dd HH:mm:ss')\n    const finalEnd = dateFns.format(endDate, 'yyyy-MM-dd HH:mm:ss')\n    console.log(specificHour, specificMinute)\n    if(specificMinute==0){\n      console.log(\"made it\")\n      this.setState({\n        selectCondition:true,\n      });\n    }\n    console.log(this.state.selectCondition)\n    const subInEvent = {\n      addEvent: true,\n      title: '',\n      content: '',\n      start_time: finalStart,\n      end_time: finalEnd,\n      location: '',\n      color: '#1890ff',\n      calendarId: ''\n    }\n    console.log(subInEvent)\n    this.props.openModal(subInEvent)\n\n  }\n\n\n  dayEventIndex = (start_time, end_time, day, start_index) => {\n    // day index you will get the start and end days and also the start_index by getting the\n    // index of the loops\n    // You will need the day here so that you can extend the event to multiple weeks\n    // The day index --> 3 senarios\n    // *** The event range falls on the same day\n    // *** The event range falls on different day but the same week\n    // *** The event range falls on different weeks (This senarios has other senarios too)\n        // The start day is in the week but not the end day\n        // The start nor end day is in the week (gotta make preperations for this up on the place where the events gets filtered out)\n        // The end day is in the week but not the start day\n    const start = new Date(start_time)\n    const end = new Date(end_time)\n    const eventDay = new Date(day)\n    const index = start_index + 1\n    if (dateFns.isSameWeek(start, end)){\n      const sameWeekDifference = Math.abs(dateFns.differenceInDays(start, end))+1\n      const ratio = index + '/' + (index+sameWeekDifference)\n      return ratio\n    } else {\n       if(dateFns.isSameWeek(start, eventDay)){\n         const ratio = index+ '/'+8\n         return ratio\n       } else if (dateFns.isSameWeek(end, eventDay)){\n         const differentWeekDifference = Math.abs(dateFns.differenceInDays(eventDay, end))+2\n         return '1/'+differentWeekDifference\n       } else {\n         return '1/8'\n       }\n    }\n\n  }\n\n  hourEventIndex = (start_time, end_time, start_index ) => {\n    // This is to set the event in the right rows\n    // The grid index start from 1-48 and when you do a grid ratio\n    // it will start from the first interval and the denominator is not included\n    console.log(start_time, end_time, start_index)\n    let bottomIndex = ''\n    const start = new Date(start_time)\n    const end = new Date(end_time)\n    console.log(start, end)\n    // When you convert to the time, the time becomes a 0-23 hour time\n    const topIndex = start_index+1 //Good up to here\n    const startHour = dateFns.getHours(start)\n    const endHour = dateFns.getHours(end)\n    // So there is obvious gonna be issue with this when we do 11:30 pm to 12:00 AM\n\n    const startMin = dateFns.getMinutes(start)\n    const endMin = dateFns.getMinutes(end)\n\n\n\n    console.log(endHour, startHour, endMin, startMin)\n    // for the numberator of the index you want to go from the starting index\n    // and then decide if you add 1 or not depending if there is a 30 mins\n    console.log(Math.abs(endMin-startMin)/30)\n    // if (startMin === 30 && endMin === 0){\n    //      if (endHour === startHour+1){\n    //        bottomIndex = topIndex +(Math.abs(endMin-startMin)/30)\n    //\n    //      }\n    //      else {\n    //        bottomIndex = topIndex + ((endHour - startHour))+(Math.abs(endMin-startMin)/30)\n    //      }\n    // } else {\n    //      bottomIndex = topIndex + ((endHour - startHour)*2)+(Math.abs(endMin-startMin)/30)\n    // }\n    if (startHour === 23 && startMin === 30){\n      bottomIndex = 49;\n    } else if (startHour === 23 && startMin === 0) {\n      if (endMin === 30){\n        bottomIndex = 48\n      } else {\n        bottomIndex = 49\n      }\n\n    }else {\n      bottomIndex = (2*(endHour)+1)+(endMin/30)\n\n    }\n\n\n    // For the denominator you have to start from the starting index and then add\n    // the number of indexes depending on the hour and then add one if there is a\n    // 30 min mark\n    const ratio = topIndex + '/' + bottomIndex\n    console.log(ratio)\n\n    return ratio\n    // return '20/49'\n  }\n\n\n\n  // this is a onclick function that goes to the next week\n  nextWeek =() =>{\n    this.props.nextWeek()\n  }\n\n\n  // onClick function that goes to the prvious week\n  prevWeek = () => {\n    this.props.prevWeek()\n  }\n\n  onYearClick = () => {\n    const selectYear = dateFns.getYear(this.props.currentDate).toString()\n    this.props.history.push('/personalcalendar/'+selectYear)\n  }\n\n  onMonthClick = () => {\n    const selectYear = dateFns.getYear(this.props.currentDate).toString()\n    const selectMonth = (dateFns.getMonth(this.props.currentDate)+1).toString()\n    this.props.history.push('/personalcalendar/'+selectYear+'/'+selectMonth)\n  }\n\n  onDateClick = day => {\n    const selectYear = dateFns.getYear(day).toString()\n    const selectMonth = (dateFns.getMonth(day)+1).toString()\n    const selectDay = dateFns.getDate(day).toString()\n  this.props.history.push('/personalcalendar/'+selectYear+'/'+selectMonth+'/'+selectDay)\n  }\n\n  onClickItem = oneEvent => {\n    console.log(oneEvent)\n    // The one event you put in here will just be data on one event\n    // it will be passed into the redux to calendarEvent openmodal and then\n    // be sent to the intital state where it will then open the Edit event popup\n    const eventObject = {\n      addEvent: false,\n      title: oneEvent.title,\n      content: oneEvent.content,\n      start_time: oneEvent.start_time,\n      end_time: oneEvent.end_time,\n      location: oneEvent.location,\n      color: oneEvent.color,\n      id: oneEvent.id\n    }\n\n\n    // this.props.openModal(eventObject)\n\n  }\n\n  onAddEvent = () => {\n    this.props.openDrawer()\n  }\n\n  openEventSyncModal = () => {\n    this.props.openEventSyncModal()\n  }\n\n  onAcceptShare = (eventId, host, startTime) => {\n    // This will be used for accepting event shared between you and another\n    // person. When accepted this will add you to the accepted list and then\n    // send it to the host to as well\n    this.acceptEventMessage();\n    CalendarEventWebSocketInstance.acceptSharedEvent(eventId, this.props.id);\n    const notificationObject = {\n      command: \"send_accepted_shared_event\",\n      actor: this.props.id,\n      recipient: host.id,\n      eventDate: startTime,\n      eventId: eventId\n    }\n    NotificationWebSocketInstance.sendNotification(notificationObject)\n\n  }\n\n  onDeclineShare = (eventId, host, startTime) => {\n    this.declineEventMessage();\n    CalendarEventWebSocketInstance.declineSharedEvent(eventId, this.props.id);\n    console.log('hit here')\n    const notificationObject = {\n      command: \"send_declined_shared_event\",\n      actor:  this.props.id,\n      recipient: host.id,\n      eventDate: startTime,\n      eventId: eventId\n    }\n\n    NotificationWebSocketInstance.sendNotification(notificationObject)\n\n  }\n\n  onDeleteEvent = (eventId, eventType, host) => {\n    console.log(eventId)\n\n    if (eventType === 'shared'){\n      if (host.id === this.props.id){\n        this.props.openEventDeleteModal(eventId);\n      } else{\n        CalendarEventWebSocketInstance.deleteEvent(eventId, this.props.id)\n      }\n    }\n    if (eventType === 'single'){\n      this.props.deleteEvent(eventId)\n      this.openNotification('bottomLeft')\n    }\n  }\n\n  openNotification = placement => {\n  notification.info({\n    message: `Event deleted`,\n    placement,\n    });\n  };\n\n  onEventPage = (eventId) => {\n    this.props.history.push('/personalcal/event/'+eventId)\n  }\n\n\n  render() {\n    console.log(this.props)\n    console.log(this.props.id)\n    console.log(Avatar)\n\n    return (\n    <div className = 'calendarContainer'>\n        <EventSyncModal\n          {...this.props}\n          isVisble = {this.props.showEventSyncModal}\n          close = {() => this.props.closeEventSyncModal()}\n        />\n\n        <RemoveEventModal\n        visible = {this.props.showDeleteModal}\n        close = {this.props.closeEventDeleteModal}\n        item = {this.props.deleteEventId}\n        user = {this.props.id}\n\n         />\n\n        <div className = 'mainCalContainer'>\n          <EventModal visible={this.props.showDrawer} onClose={this.props.closeDrawer} {...this.props} />\n          <div className = 'weekCalendar'>\n            <div style={{display: 'inline-block'}}>\n              {this.renderHeader()}\n            </div>\n            <div style={{display: 'inline-block'}}>\n              <CalendarViewDropDown\n                class=\"CalendarViewCSS\"\n                calType = \"week\"\n                history = {this.props.history}\n                matchPara = {this.props.parameter} />\n            </div>\n            {this.renderDays()}\n          </div>\n\n          <div className = \"testBox\">\n            {/*window.scrollTo(0, 800)*/}\n          <div className = 'weekDayFlex-Container'>\n            <div className = 'timecol'>\n              {this.renderSide()}\n            </div>\n            <div className = 'calendar'  ref={this.scrollToMyRef} >\n            {this.renderWeekCell(this.props.events)}\n            </div>\n          </div>\n          </div>\n\n\n\n          </div>\n\n\n\n          <div className = 'miniCalContainer'>\n            <Button\n              type=\"primary\"\n              className = 'miniEventSyncButton'\n              onClick = {this.onAddEvent}>\n              Create Event\n            </Button>\n            <MiniCalendar {...this.props}/>\n            <Button\n              style={{marginTop:'40px'}}\n              type = 'primary'\n              className = 'miniEventSyncButton'\n              onClick = {this.openEventSyncModal}>\n                Event Sync\n            </Button>\n            {/*\n            <div className = 'timeLayerCon'>\n              list of people to be added!\n            </div>\n            */}\n          </div>\n\n\n\n      </div>\n    )\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return{\n    showDrawer: state.nav.showPopup,\n    showModal: state.calendarEvent.showModal,\n    currentDate: state.calendar.date,\n    events: state.calendar.events,\n    showEventSyncModal: state.eventSync.showEventSyncModal,\n    id: state.auth.id,\n    showDeleteModal: state.calendarEvent.showDeleteModal,\n    deleteEventId: state.calendarEvent.deleteEventId,\n\n  }\n}\n\n// The get selected date action will get the date based on the url\nconst mapDispatchToProps = dispatch => {\n  return {\n    closeDrawer: () => dispatch(navActions.closePopup()),\n    openDrawer: () => dispatch(navActions.openPopup()),\n    openModal: oneEvent => dispatch(calendarEventActions.openEventModal(oneEvent)),\n    closeModal: () => dispatch(calendarEventActions.closeEventModal()),\n    getSelectedDate: selectedDate => dispatch(calendarActions.getDate(selectedDate)),\n    nextWeek: () => dispatch(calendarActions.nextWeek()),\n    prevWeek: () => dispatch(calendarActions.prevWeek()),\n    getEvents: () => dispatch(calendarActions.getUserEvents()),\n    openEventSyncModal: () => dispatch(eventSyncActions.openEventSyncModal()),\n    closeEventSyncModal: () => dispatch(eventSyncActions.closeEventSyncModal()),\n    openEventDeleteModal: (eventId) => dispatch(calendarEventActions.openEventDeleteModal(eventId)),\n    closeEventDeleteModal: () => dispatch(calendarEventActions.closeEventDeleteModal()),\n    deleteEvent: (eventId) => dispatch(calendarActions.deleteEvents(eventId))\n  }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(WeekCalendar);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/UserProfiles/ViewAnyUserProfile.js",["946","947","948","949","950","951"],"import React from 'react';\nimport axios from 'axios';\nimport { authAxios } from '../util';\nimport { connect } from 'react-redux';\nimport { Button } from 'antd';\nimport { Form } from '@ant-design/compatible';\n\n// import UserFriendsList from './UserFriendsList';\n\nimport NotificationWebSocketInstance from '../../notificationWebsocket';\nimport ExploreWebSocketInstance from '../../exploreWebsocket';\nimport PersonalProfile from './PersonalProfile';\nimport 'antd/dist/antd.css';\nimport '@ant-design/compatible/assets/index.css';\n\n\n\n// Function: This view is to hold all the profiles of others that is not the current\n// user (its just teh container tho)\nclass UserProfileView extends React.Component {\n  constructor(props) {\n    super(props);\n    // this.initialiseExplore()\n  }\n\n  state = {\n    id:'',\n\t\tusername:'',\n\t\tfirst_name: '',\n\t\tlast_name: '',\n\t\tbio: '',\n    friends: [],\n  }\n\n  initialiseExplore(){\n    // This will pretty much be for loading up the users following status, because\n    // later we are gonna have a search function, so you want to throw this in one\n    // of the very first things\n    this.waitForSocketConnection(()=> {\n      // ExploreWebSocketInstance.fetchFollowerFollowing()\n    })\n  }\n\n  waitForSocketConnection (callback) {\n    const component = this;\n    setTimeout(\n      function(){\n\n        if (ExploreWebSocketInstance.state() === 1){\n\n          callback();\n          return;\n        } else{\n\n            component.waitForSocketConnection(callback);\n        }\n      }, 100)\n\n  }\n\n  componentWillReceiveProps(newProps){\n    const username = this.props.match.params.username;\n    if (this.props.match.params.username){\n      console.log('hi there')\n      // NotificationWebSocketInstance.disconnect()\n      // NotificationWebSocketInstance.connect(this.props.match.params.username)\n    }\n    if(newProps.isAuthenticated){\n       authAxios.get('http://127.0.0.1:8000/userprofile/'+username+'/')\n        .then(res=> {\n          this.setState({\n            id:res.data.id,\n            username: res.data.username,\n            first_name: res.data.first_name,\n            last_name: res.data.last_name,\n            bio: res.data.bio,\n            friends: res.data.friends,\n         });\n       });\n     }\n   }\n\n  getProfileInfo = (userId) => {\n    if(this.props.profiles){\n      const profileList = this.props.profiles\n      console.log(profileList)\n      console.log(profileList.length)\n      console.log(Math.floor(1/2)-1)\n      if (profileList[Math.floor(profileList.length/2)-1]){\n        const profile = this.binarysearch(userId, profileList)\n        console.log(profile)\n        return profile\n      }\n    }\n  }\n\n  binarysearch = (userId, profileList) => {\n    console.log(profileList)\n    if (profileList.length === 1){\n      return profileList[0]\n    }\n    else if(userId == profileList[Math.floor(profileList.length/2)-1].id){\n      return profileList[Math.floor(profileList.length/2)-1]\n    } else if (userId  > profileList[Math.floor(profileList.length/2)-1].id ){\n      const mid = Math.floor(profileList.length/2)\n      const profileListEnd = profileList.slice(mid)\n      return this.binarysearch(userId, profileListEnd)\n    } else if (userId < profileList[Math.floor(profileList.length/2)-1].id){\n      const mid = Math.floor(profileList.length/2)\n      const profileListStart = profileList.slice(0, mid)\n      return this.binarysearch(userId, profileListStart)\n    }\n  }\n\n\n\trender() {\n\n    console.log(this.props)\n    if (this.state.id){\n      var userData = this.getProfileInfo(this.state.id)\n    }\n\n    console.log(userData)\n\n\t\treturn (\n\t\t\t<div>\n        <PersonalProfile\n        history = {this.props.history}\n        curProfile = {userData} />\n      </div>\n\n\t\t)\n\t}\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token,\n  }\n}\nexport default connect(mapStateToProps)(UserProfileView);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/UserProfiles/PersonalProfile.js",["952","953","954","955","956","957","958","959","960","961","962","963","964","965","966","967","968","969","970","971","972"],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NewChatFolder/NewChat.js",["973","974"],"import React from 'react';\nimport './NewChat.css';\nimport NewSidePanel from './NewSidePanel';\nimport NewChatContent from './NewChatContent';\nimport NewChatHeader from './NewChatHeader';\nimport { authAxios } from '../../components/util';\nimport NewChatWebSocketInstance from '../../newChatWebsocket';\nimport ChatSidePanelWebSocketInstance from '../../newChatSidePanelWebsocket';\nimport { connect } from 'react-redux';\nimport * as dateFns from 'date-fns';\nimport ManageChatHeader from './ManageChatHeader';\nimport NoChatsScreen from './NoChatsScreen';\nimport AddNewChatContent from './AddNewChatContent';\nimport CurChatManager from './CurChatManager';\nimport * as calendarActions from '../../store/actions/calendars';\nimport { notification } from 'antd';\n\n// This file will be holding all the components of the chat such as\n// sidepanel, content, title, etc.\n\nclass NewChat extends React.Component{\n\n\n  // This component will receiveprops will pull all the current chats that you\n  // have\n  state = {\n    // The messgaes will be specific to the chat\n    // Friend list is used to search for friend to find or make a new chat\n    friendList:[],\n    eventList: []\n  }\n\n  initialiseChat(){\n    this.waitForSocketConnection(() => {\n\n      NewChatWebSocketInstance.fetchMessages(\n        this.props.parameter.id\n      )\n    })\n    if(this.props.parameter.id === 'newchat'){\n        NewChatWebSocketInstance.connect(null)\n    } else{\n      ChatSidePanelWebSocketInstance.sendSeen(\n        this.props.parameter.id,\n        this.props.curId\n      )\n      NewChatWebSocketInstance.connect(this.props.parameter.id)\n    }\n\n  }\n\n  waitForSocketConnection (callback) {\n    const component = this;\n    setTimeout(\n      function(){\n        console.log(NewChatWebSocketInstance.state())\n        if (NewChatWebSocketInstance.state() === 1){\n          console.log('connection is secure');\n          callback();\n          return;\n        } else{\n            console.log('waiting for connection...')\n            component.waitForSocketConnection(callback);\n        }\n      }, 100)\n\n  }\n\n  constructor(props){\n    super(props)\n    this.initialiseChat()\n    authAxios.get('http://127.0.0.1:8000/mycalendar/avaliEvents')\n    .then(res => {\n      this.setState({\n        eventList: res.data\n      })\n    })\n  }\n\n\n  componentWillReceiveProps(newProps){\n    console.log(\"new props\")\n\n    // When ever a new message is sent or you open up a new chat\n    // it should send out an update of the seen\n    if(this.props.parameter.id !== newProps.parameter.id && newProps.parameter.id !== \"newchat\"){\n      NewChatWebSocketInstance.disconnect();\n      this.waitForSocketConnection(() => {\n        NewChatWebSocketInstance.fetchMessages(\n          newProps.parameter.id\n        )\n      })\n\n      ChatSidePanelWebSocketInstance.sendSeen(\n        newProps.parameter.id,\n        newProps.curId\n      )\n      NewChatWebSocketInstance.connect(newProps.parameter.id)\n\n    }\n\n\n  }\n\n  submitShareEvent = (eventId, participants, eventObj) => {\n    // This function will share an event with everyon inside the chat\n    // and then send a message in the chat to tell everyone that\n    // someone shared and event to everyone\n\n    // First get a list of ids, or names of everyone in the group and then\n    // send that list into the backend, the mycalendar views and then\n    // send a message in the chat. When they click on the chat it will direct\n    // them to the event\n\n    this.openNotification(\"bottomRight\")\n\n    console.log(eventId, participants, eventObj)\n\n    // Now you will call a authaxios call inorder to add users in\n\n\n    authAxios.post(\"http://127.0.0.1:8000/mycalendar/shareEvent\", {\n      eventId: eventId,\n      participants: participants,\n      curId: this.props.curId\n    }).then(res => {\n      console.log(res.data)\n      this.setState({\n        eventList: res.data\n      })\n    })\n    const chatId = this.props.parameter.id\n    const senderId = this.props.curId\n\n    NewChatWebSocketInstance.sendSharedEventMessage(\n      chatId,\n      senderId,\n      eventObj\n    )\n\n    ChatSidePanelWebSocketInstance.updateRecentChatEvent(\n      chatId,\n      senderId\n    )\n\n\n\n  }\n\n  timeConvert = (time) => {\n    // This function will take in a time and then covert the time to\n    // a 1-24 hour hour so that it cna be used to add into the\n    // date and be submited\n    let hour = parseInt(time.substring(0,2))\n    let minutes = parseInt(time.substring(3,5))\n    let ampm = time.substring(5,8)\n\n    let convertedTime = ''\n\n    if (time.includes('PM')){\n      if (hour !==  12){\n        hour = hour + 12\n      }\n    } else if (time.includes('AM')){\n      if(hour === 12){\n        hour = 0\n      }\n    }\n\n    const timeBundle = {\n      firstHour: hour,\n      firstMin: minutes\n    }\n\n    return timeBundle\n\n  }\n\n\n  submitCreateEvent = (eventObj, participants) => {\n    // This function will be used to create an shared event with everyone in\n    // the group. and then send out to everyone in the chat that an event has been\n    // shared with them\n    console.log(eventObj, participants)\n\n    this.openNotification(\"bottomRight\")\n\n    let start_date = dateFns.startOfDay(new Date(eventObj.start_date))\n    let end_date = dateFns.startOfDay(new Date(eventObj.end_date))\n\n\n    const start_time  = this.timeConvert(eventObj.start_time)\n    const end_time = this.timeConvert(eventObj.end_time)\n\n    start_date = dateFns.addHours(start_date, start_time.firstHour)\n    start_date = dateFns.addMinutes(start_date, start_time.firstMin)\n\n    end_date = dateFns.addHours(end_date, end_time.firstHour)\n    end_date = dateFns.addMinutes(end_date, end_time.firstMin)\n\n    const eventObjNew = {\n      title: eventObj.title,\n      content: eventObj.content,\n      start_time: start_date,\n      end_time: end_date,\n      location: eventObj.location,\n      eventColor: eventObj.event_color,\n      repeatCondition: eventObj.repeatCondition,\n\n    }\n    // You have to process the start date and time so that it is one adherence\n    // date time to be used in the models\n\n\n    authAxios.post(\"http://127.0.0.1:8000/mycalendar/createChatEvent\", {\n      eventObj: eventObjNew,\n      participants: participants,\n      curId: this.props.curId\n    }).then(res => {\n      console.log(res.data)\n      this.setState({\n        eventList: res.data\n      })\n\n    })\n\n    const chatId = this.props.parameter.id\n    const senderId = this.props.curId\n\n    NewChatWebSocketInstance.sendSharedEventMessage(\n      chatId,\n      senderId,\n      eventObjNew\n    )\n\n    ChatSidePanelWebSocketInstance.updateRecentChatEvent(\n      chatId,\n      senderId\n    )\n\n\n\n\n  }\n\n\n  openNotification = (placement) => {\n  notification.info({\n    message: `Event Shared`,\n    description:\n      'You shared an event to the group',\n    placement,\n  });\n  };\n\n\n\n\n  renderTimestamp = timestamp =>{\n    console.log(timestamp)\n    let prefix = '';\n    console.log(new Date().getTime())\n    console.log(new Date(timestamp).getTime())\n    const timeDiff = Math.round((new Date().getTime() - new Date(timestamp).getTime())/60000)\n    console.log(timeDiff)\n    if (timeDiff < 1 ) {\n      prefix = `Just now`;\n    } else if (timeDiff < 60 && timeDiff >= 1 ) {\n      prefix = `${timeDiff} minutes ago`;\n    }else if (timeDiff < 24*60 && timeDiff > 60) {\n      prefix = `${Math.round(timeDiff/60)} hours ago`;\n    } else if (timeDiff < 31*24*60 && timeDiff > 24*60) {\n      prefix = `${Math.round(timeDiff/(60*24))} days ago`;\n    } else {\n        prefix = `${dateFns.format(new Date(timestamp), \"MMMM d, yyyy\")}`;\n    }\n\n    return prefix;\n  }\n\n  render(){\n    console.log(this.props)\n    console.log(this.state)\n    let messages = []\n    let chats = []\n\n    if(this.props.messages){\n      messages = this.props.messages\n    }\n\n    if(this.props.chats){\n      chats = this.props.chats\n    }\n\n    return(\n      <div className = \"chatContainer\">\n\n      <div className = \"chatLeftSide\">\n        <ManageChatHeader\n        history = {this.props.history}\n         />\n\n        <NewSidePanel\n        chatList = {chats}\n        param = {this.props.parameter}\n        curId = {this.props.id}\n        username = {this.props.username}\n        />\n      </div>\n\n      {\n        parseInt(this.props.parameter.id) === 0 ?\n\n        <div className = \"chatRightSide\">\n          <NoChatsScreen\n          history = {this.props.history}\n          />\n        </div>\n\n        :\n\n\n          this.props.parameter.id === \"newchat\" ?\n\n          <div className = \"chatRightSide\">\n            <AddNewChatContent\n            followers = {this.props.followers}\n            following = {this.props.following}\n            curId = {this.props.curId}\n            history = {this.props.history}\n\n            />\n          </div>\n\n          :\n\n          <div className = \"chatRightSide\">\n            <NewChatHeader\n            curChat = {this.props.curChat}\n            curId = {this.props.id}\n            />\n            <NewChatContent\n            messages = {messages}\n            curId = {this.props.id}\n            parameter = {this.props.parameter}\n             />\n\n          </div>\n\n\n\n\n\n      }\n\n      <div className = \"chatFarRightSide\">\n\n        <CurChatManager\n        curChat = {this.props.curChat}\n        curId = {this.props.id}\n        eventList = {this.state.eventList}\n        parameter = {this.props.parameter}\n        submitShareEvent = {this.submitShareEvent}\n        history = {this.props.history}\n        submitCreateEvent ={this.submitCreateEvent}\n         />\n\n      </div>\n\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    messages: state.message.messages,\n    chats: state.message.chats,\n    curChat: state.message.curChat,\n    following: state.auth.following,\n    followers: state.auth.followers,\n    curId: state.auth.id,\n    events: state.calendar.events,\n    username: state.auth.username\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return{\n    getEvents: () => dispatch(calendarActions.getUserEvents()),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewChat);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/SocialCalendarFolder/SocialCalCellPage.js",["975","976","977"],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/SocialCalendarFolder/SocialEventPage/SocialEventPage.js",["978","979","980"],"import React from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { Switch, notification, Button } from 'antd';\nimport SocialEventInfo from \"./SocialEventInfo\";\nimport SocialEventGroupChat from \"./SocialEventGroupChat\";\nimport SocialEventPageWebSocketInstance from '../../../socialEventPageWebsocket';\n\nimport \"./SocialEventPage.css\"\n\n\nclass SocialEventPage extends React.Component{\n  // This will retrive the values of the invidual evnets and reutrns them\n  constructor(props){\n    super(props)\n\n  }\n\n  state = {\n    showChats: false,\n  }\n\n  initialiseSocialEvent(){\n    this.waitForSocketConnection(() => {\n      SocialEventPageWebSocketInstance.fetchSocialMessages(\n          this.props.parameter.socialEventId\n      )\n    })\n    if(this.props.parameter.socialEventId){\n      SocialEventPageWebSocketInstance.connect(this.props.parameter.socialEventId)\n    }\n\n  }\n\n  componentDidMount(){\n    this.initialiseSocialEvent()\n  }\n\n\n  waitForSocketConnection(callback){\n    // This is pretty much a recursion that tries to reconnect to the websocket\n    // if it does not connect\n    const component = this;\n    setTimeout(\n      function(){\n        console.log(SocialEventPageWebSocketInstance.state())\n        if (SocialEventPageWebSocketInstance.state() === 1){\n          console.log('connection is secure');\n          callback();\n          return;\n        } else {\n          console.log('waiting for connection...')\n          component.waitForSocketConnection(callback)\n        }\n      }, 100)\n  }\n\n\n  componentWillReceiveProps(newProps){\n    // This pretty much checks if the socialevent page has change, to know that if\n    // it chaned or not you will look at the soicaleventid\n    if(this.props.parameter.socialEventId !== newProps.parameter.socialEventId){\n      SocialEventPageWebSocketInstance.disconnect();\n      this.waitForSocketConnection(()=>{\n\t\t\t\tSocialEventPageWebSocketInstance.fetchMessages(\n\t\t\t\t\tnewProps.parameter.socialEventId\n\t\t\t\t)\n\t\t\t})\n\t\t\tSocialEventPageWebSocketInstance.connect(newProps.parameter.eventId)\n\n\n    }\n\n    if(newProps.showDeleted){\n      this.openNotification();\n    }\n\n\n  }\n\n  componentWillUnmount(){\n    SocialEventPageWebSocketInstance.disconnect();\n\n  }\n\n  // onShowViewChat = () => {\n  //   this.setState({\n  //     showChats: true\n  //   })parameter\n  // }\n  //\n  // onCloseViewChat = () => {\n  //   this.setState({\n  //     showChats: false\n  //   })\n  // }\n\n  onShowChatChange = (checked) => {\n    console.log(checked)\n    this.setState({\n      showChats: checked\n    })\n  }\n\n\n  openNotification = () => {\n    const key = `open${Date.now()}`;\n    const username = this.props.socialEventInfo.host.username\n\n      const btn = (\n        <Button type=\"primary\" size=\"small\" onClick={() => {\n            this.props.history.push(\"/explore/\"+username)\n            notification.close(key)\n\n        }}>\n          Return\n        </Button>\n      );\n\n\n    // This is used to indicate that the event has been deleted and exist\n    // out of the event\n  notification.open({\n    message: 'Event Deleted',\n    description:\n      'This event has been deleted by the host. Chats will not work anymore. Please click to return to user profile page',\n    onClick: (key) => {\n      this.onProfileReturn(key);\n    },\n    btn,\n    key,\n    duration: 0,\n\n  });\n};\n\n  render(){\n\n    let backgroundImage = \"\"\n    if(this.props.socialEventInfo.backgroundImg){\n      backgroundImage = this.props.socialEventInfo.backgroundImg\n    }\n\n    console.log(this.props)\n    return (\n      <div>\n      {\n        this.props.socialEventInfo.title ?\n\n        <div className ={`socialEventPageContainer ${this.state.showChats ? \"\" : \"active\"}` }>\n\n        <img\n        className = \"socialEventBackgroundPic\"\n        src = {'http://127.0.0.1:8000'+backgroundImage} />\n\n        <div className = \"showChatWords\"> Show chats </div>\n        <Switch\n        className = \"showChatSwitch\"\n        defaultChecked checked = {this.state.showChats} onChange={this.onShowChatChange} />\n\n\n        <SocialEventInfo\n        info = {this.props.socialEventInfo}\n        userId = {this.props.id}\n        active = {this.state.showChats}\n        history = {this.props.history}\n         />\n\n\n        <SocialEventGroupChat\n        messages = {this.props.socialEventMessages}\n        id = {this.props.id}\n        eventId = {this.props.socialEventInfo.id}\n        active = {this.state.showChats}\n        date = {this.props.socialEventInfo.event_day}\n        endTime = {this.props.socialEventInfo.end_time}\n         />\n\n        </div>\n\n\n        :\n\n        <div className = \"socialEventDoesNotPage\">\n          <i class=\"fas fa-exclamation-circle\"></i>\n          <div>\n          Event page does not exist anymore.\n          </div>\n        </div>\n\n\n      }\n\n      </div>\n\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    socialEventInfo: state.socialCal.selectedSocialEvent,\n    socialEventMessages: state.socialCal.socialEventMessages,\n    id: state.auth.id,\n    showDeleted: state.socialCal.showDeleted\n  }\n}\n\nexport default connect(mapStateToProps)(SocialEventPage);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/SocialCalendarFolder/SocialCalCellModal.js",["981"],"import React from 'react';\nimport \"./SocialCalCSS/SocialCellPage.css\";\nimport * as dateFns from 'date-fns';\nimport SocialCalCellPage from \"./SocialCalCellPage\";\n\n\nclass SocialCalCellModal extends React.Component{\n\n  back = e => {\n    e.stopPropagation();\n    this.props.history.goBack();\n\n  }\n\n  render(){\n\n    console.log(this.props)\n    return(\n\n      <div\n        class=\"socialParent\"\n\n       >\n       <div className = \"socialCalCellModalBackground\">\n         <SocialCalCellPage\n         {...this.props}\n          />\n        <div className = 'exitX' style={{padding:'20px'}}>\n          <i class=\"fas fa-times\" style={{fontSize:'30px'}}\n          onClick = {this.back}\n          ></i>\n          </div>\n       </div>\n\n\n\n\n       </div>\n\n    )\n  }\n}\n\n\nexport default SocialCalCellModal;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/UserPostTabFolder/UserPostList.js",["982","983","984","985","986","987","988","989","990","991","992"],"import React from 'react';\nimport './UserPostList.css';\nimport {\n  UserOutlined,\n  PlusOutlined,\n  EyeOutlined,\n  CalendarOutlined } from '@ant-design/icons';\n  import {\n      BrowserRouter as Router,\n      Switch,\n      Route,\n      Link,\n      useHistory,\n      useLocation,\n      useParams\n    } from \"react-router-dom\";\n// This will hold all the pictures and post that the user posted\n// This inludues day cells and then post as well. It will probally\n// be linked to the explore channel\nclass UserPostList extends React.Component{\n\n\n  renderPostCell = () => {\n    console.log(this.props.allpost)\n    let renderList = []\n    // if(this.props.posts){\n    //   for (let i = 0; i < this.props.posts.length; i++){\n    //     renderList.push(this.props.posts[i])\n    //   }\n    // }\n    // if(this.props.cells){\n    //   for(let i = 0; i< this.props.cells.length; i++){\n    //     if(this.props.cells[i].get_socialCalItems.length > 0){\n    //       renderList.push(this.props.cells[i])\n    //     }\n    //   }\n    // }\n    if(this.props.allpost){\n      renderList = this.props.allpost\n    }\n\n    if(renderList.length !== 0 ){\n      var boxes = []\n      for (let i = 0; i< renderList.length; i++ ){\n        console.log(renderList[i])\n        if(renderList[i].post.post_images){\n          let imagesList = renderList[i].post.post_images\n          console.log(renderList[i])\n          const postId = renderList[i].post.id\n          const postUser = renderList[i].post.user\n          boxes.push(\n            <div className = 'postListSquare'>\n              <Link\n              to = {{\n                pathname: \"/post/\"+postUser+\"/\"+postId,\n                state: {pathname: this.props.location}\n              }}\n              >\n              <EyeOutlined className = 'eyeClick'/>\n              </Link>\n              <img\n              src = {'http://127.0.0.1:8000/media/'+imagesList[0]}\n              className = \"squarePic\"\n              />\n            </div>\n          )\n        }\n        if(renderList[i].post.get_socialCalItems){\n          const image = renderList[i].post.coverPic\n          const calUsername = renderList[i].post.socialCalUser.username\n          console.log(renderList[i].post.socialCaldate.split(\"-\"))\n          const dateList = renderList[i].post.socialCaldate.split(\"-\")\n          const year = dateList[0]\n          const month = dateList[1]\n          const day = dateList[2]\n          boxes.push(\n            <div className = \"postListSquare\">\n            <Link\n            to = {{\n              pathname :\"/socialcal/\"+calUsername+\"/cell/\"+year+\"/\"+month+\"/\"+day,\n              state: {pathname: this.props.location}\n            }}\n            >\n\n            <i\n            style ={{\n              position: \"absolute\",\n              zIndex: 1,\n              right: \"3%\",\n              top: \"3%\",\n              fontSize: \"30px\",\n              color: \"white\"\n            }}\n            class=\"fas fa-calendar\"></i>\n            <EyeOutlined className = 'eyeClick'/>\n            </Link>\n            <img\n            src = {'http://127.0.0.1:8000'+image}\n            className = \"squarePic\"\n            />\n            </div>\n          )\n        }\n\n      }\n\n      console.log(renderList)\n\n      return <div className = \"postListContainer\"> {boxes} </div>\n\n    } else {\n      return <div> No Posts </div>\n    }\n\n\n  }\n\n  render(){\n\n    console.log(this.props)\n\n\n    return(\n      <div className = \"postListTabContainer\">\n        {this.renderPostCell()}\n      </div>\n    )\n  }\n\n}\n\n\nexport default UserPostList;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/UserPostTabFolder/PersonalProfilePostList.js",["993","994","995","996","997","998","999","1000","1001","1002","1003","1004","1005","1006","1007","1008"],"// This would be the post page for the personal profile\n\nimport React from 'react';\nimport axios from 'axios';\nimport { Route, useLocation, Switch, Link} from 'react-router-dom';\nimport { authAxios } from '../../components/util';\nimport { connect } from \"react-redux\";\nimport { Form } from '@ant-design/compatible';\nimport { Button, Modal, Avatar, Steps, Divider} from 'antd';\nimport { RetweetOutlined } from '@ant-design/icons';\nimport NotificationWebSocketInstance from '../../notificationWebsocket';\nimport * as exploreActions from '../../store/actions/explore';\nimport * as authActions from '../../store/actions/auth';\nimport '../../components/UserProfiles/ProfilePage.css';\nimport ChangeProfilePic from '../CurrUser/ChangeProfilePic';\nimport FollowList from '../../components/UserProfiles/FollowList';\nimport UserPostList from './UserPostList';\nimport ExploreWebSocketInstance from '../../exploreWebsocket';\nimport EditProfileForm from '../../components/UserProfiles/EditProfile/EditProfileForm';\n\nconst { Step } = Steps\n// DELETE LATER\n// import ConfirmAddFriend from '../../components/UserProfiles/ConfirmAddFriend';\n// import ConfirmUnfriend from '../../components/UserProfiles/ConfirmUnfriend';\n\n\nclass PersonalProfilePostList extends React.Component{\n  constructor(props){\n    super(props);\n    // this.initialiseProfile()\n\n  }\n\n  state = {\n    followerShow: false,\n    followingShow: false,\n    showProfileEdit: false,\n    showProfilePicEdit: false,\n    // showFriendConfirm: false,\n    // showUnfriend: false,\n\n  }\n\n  initialiseProfile() {\n    console.log('hit here')\n    this.waitForSocketConnection(() => {\n        ExploreWebSocketInstance.fetchProfile(\n          this.props.parameter.username\n        )\n    })\n    if(this.props.parameter.username){\n      ExploreWebSocketInstance.connect(this.props.parameter.username)\n    }\n  }\n\n  waitForSocketConnection(callback){\n\t\t// This is pretty much a recursion that tries to reconnect to the websocket\n\t\t// if it does not connect\n\t\tconst component = this;\n\t\tsetTimeout(\n\t\t\tfunction(){\n\t\t\t\tconsole.log(ExploreWebSocketInstance.state())\n\t\t\t\tif (ExploreWebSocketInstance.state() === 1){\n\t\t\t\t\tconsole.log('connection is secure');\n\t\t\t\t\tcallback();\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log('waiting for connection...')\n\t\t\t\t\tcomponent.waitForSocketConnection(callback)\n\t\t\t\t}\n\t\t\t}, 100)\n\t}\n\n  componentDidMount(){\n    this.initialiseProfile()\n  }\n\n\n  componentWillReceiveProps(newProps){\n    console.log(newProps)\n    console.log('hit here')\n    //This will reconnect to eh proper profile if you were to change the profiles\n\n    if(this.props.parameter.username !== newProps.parameter.username){\n      // put remove redux functions here\n      this.props.closeProfile()\n      ExploreWebSocketInstance.disconnect();\n      this.waitForSocketConnection(() => {\n        ExploreWebSocketInstance.fetchProfile(\n          newProps.parameter.username\n        )\n      })\n      ExploreWebSocketInstance.connect(newProps.parameter.username)\n    }\n\n    if(this.props.location.pathname !== newProps.location.pathname){\n      //To refetch the information\n      this.waitForSocketConnection(() => {\n        ExploreWebSocketInstance.fetchProfile(\n          newProps.parameter.username\n        )\n      })\n\n      ExploreWebSocketInstance.connect(newProps.parameter.username)\n\n    }\n\n  }\n\n  componentWillUnmount(){\n    //This will disconnect from the channel if you ever exit the page, this will\n    // avoid any connection conflicts\n    //Similar to the event page channel, you will have to remove the recursion from\n    // the disconnect in the websocket\n    ExploreWebSocketInstance.disconnect();\n  }\n\n\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  closeProfileEdit = () => {\n    // You wanna check if the person open and opening is the current user\n    if(this.props.parameter.username === this.props.currentUser){\n      this.setState({\n        showProfileEdit: false,\n      })\n    }\n  }\n\n  openProfileEdit = () => {\n    if(this.props.parameter.username === this.props.currentUser){\n      this.setState({\n        showProfileEdit: true,\n      })\n    }\n  }\n\n  openChangeProfilePic = () => {\n    if(this.props.parameter.username === this.props.currentUser){\n      this.setState({\n        showProfilePicEdit: true\n      })\n    }\n  }\n\n  closeChangeProfilePic = () => {\n    if(this.props.parameter.username === this.props.currentUser){\n      this.setState({\n        showProfilePicEdit: false,\n      })\n    }\n  }\n\n  renderEditButton = () => {\n    return (\n      <div className = 'editButton' onClick = {() => this.openChangeProfilePic()}>\n       <RetweetOutlined />\n\n      </div>\n    )\n  }\n\n  handleProfilePicChange = (values) => {\n    // This is used to changing the profile pic, for submiting.\n    console.log(values)\n    let userId = \"\"\n    if(this.props.profile){\n      userId = this.props.profile.id\n\n    }\n    var data  = new FormData()\n    data.append('profile_picture', values)\n    // To edit information, you usually do put instead of post\n    authAxios.put('http://127.0.0.1:8000/userprofile/profile/update/'+userId,\n      data\n    ).then(res => {\n      this.props.changeProfilePic(res.data.profile_picture.substring(21,))\n      this.props.changeProfilePicAuth(res.data.profile_picture.substring(21,))\n\n    })\n\n// PROBALLY ADD IN THE REDUX LIKE EVENT PAGE\n    this.closeChangeProfilePic();\n\n  }\n\n  // on click add friend starts here\n  onClickSend = (e) =>{\n    e.preventDefault()\n    const username = this.props.parameter.username;\n    // axios.default.headers = {\n    //   \"Content-type\": \"application/json\",\n    //   Authorization: `Token ${this.props.token}`\n    // }\n    authAxios.post('http://127.0.0.1:8000/userprofile/friend-request/send/'+username)\n    const notificationObject  = {\n      command: 'send_friend_notification',\n      actor: this.props.currentUser,\n      recipient: this.props.parameter.username,\n    }\n    // NotificationWebSocketInstance.disconnect()\n    // NotificationWebSocketInstance.connect(this.props.match.params.username)\n    NotificationWebSocketInstance.sendNotification(notificationObject)\n    // NotificationWebSocketInstance.connect(this.props.currentUser)\n\n    }\n\n\n    onClickCancel = (e) =>{\n      // const username = this.props.match.params.username;\n      // authAxios.post('http://127.0.0.1:8000/friends/friend-request/cancel/'+username)\n      }\n\n    onClickDeleteFriend = (e) =>{\n      // This is used to delete friends\n        // const username = this.props.match.params.username;\n        // authAxios.post('http://127.0.0.1:8000/friends/remove-friend/'+username)\n    }\n\n    renderProfilePic = () => {\n\n      let profileImage = null\n\n      console.log(this.props.profile)\n      if(this.props.profile){\n        console.log(this.props.profile.profile_picture)\n        if(this.props.profile.profile_picture){\n          profileImage = 'http://127.0.0.1:8000'+this.props.profile.profile_picture\n        }\n      }\n\n      console.log(profileImage)\n      return (\n        <div className = 'profilePic'>\n          <Avatar size = {150} src = {profileImage} />\n          {\n            this.props.parameter.username === this.props.currentUser ?\n            this.renderEditButton()\n\n            :\n\n            <div></div>\n          }\n        </div>\n      )\n    }\n\n    renderCalPostPic = () => {\n      // This is to display the 3 sections (cal, post, pic)\n      // It allows you to switch between\n      return(\n        <div className = 'cal-post-pic'>\n          {this.onRenderTabs()}\n        </div>\n\n      )\n    }\n\n    onFollow = (follower, following) =>{\n      //Send a follow in the backend\n      ExploreWebSocketInstance.sendFollowing(follower, following)\n\n      // The follower is you who is sending the reqwuest and the following is the other person\n      const notificationObject = {\n        command: 'send_follow_notification',\n        actor: this.props.currentUser,\n        recipient: this.props.profile.username\n      }\n\n      NotificationWebSocketInstance.sendNotification(notificationObject)\n    }\n\n\n    onUnfollow = (follower, following) => {\n      // This will send an unfollow into the back end\n      // It will pretty muchh just delete the follower and following\n\n      ExploreWebSocketInstance.sendUnFollowing(follower, following)\n    }\n\n\n    // DELETE LATER\n    // onAddCloseFriendOpen = () => {\n    //   this.setState({\n    //     showFriendConfirm: true\n    //   })\n    // }\n    //\n    // onAddCloseFriendClose = () => {\n    //   this.setState({\n    //     showFriendConfirm: false\n    //   })\n    // }\n    //\n    //\n    // onUnAddCloseFriendOpen = () => {\n    //   this.setState({\n    //     showUnfriend: true\n    //   })\n    // }\n    //\n    // onUnAddCloseFriendClose = () => {\n    //   this.setState({\n    //     showUnfriend: false\n    //   })\n    // }\n\n\n    onRenderProfileInfo(){\n      // For the following and the follwers, the get_followers will be the people taht\n      // are your followers and the people that are in\n      // get following are the people taht are you are following, so they would be your\n      // followers\n      let username = ''\n      let firstName = ''\n      let lastName = ''\n      let bio = ''\n      let followers = []\n      let following = []\n      let posts = ''\n      let profileId = ''\n      let friends = []\n      let curId = ''\n\n      if(this.props.currentId){\n        curId = this.props.currentId\n      }\n\n      if (this.props.profile){\n        if(this.props.profile.username){\n          username = this.props.profile.username\n        }\n        if(this.props.profile.first_name){\n          firstName = this.props.profile.first_name\n        }\n        if(this.props.profile.last_name){\n          lastName = this.props.profile.last_name\n        }\n        if(this.props.profile.bio){\n          bio = this.props.profile.bio\n        }\n        if(this.props.profile.get_following){\n          following = this.props.profile.get_following\n        }\n        if(this.props.profile.get_posts){\n          posts = this.props.profile.get_posts\n\n        }\n        if(this.props.profile.id){\n          profileId = this.props.profile.id\n\n        }\n\n        if(this.props.profile.get_followers){\n          for(let i =0; i<this.props.profile.get_followers.length; i++){\n            followers.push(\n              this.props.profile.get_followers[i].username\n            )\n          }\n        }\n\n        // if(this.props.curUserFriend){\n        //   for(let i = 0; i< this.props.curUserFriend.length; i++){\n        //     friends.push(\n        //       this.props.curUserFriend[i].id\n        //     )\n        //   }\n        // }\n\n      }\n    console.log(followers)\n\n      return (\n        <div>\n\n          <div className = 'profileInfo'>\n\n            <div>\n\n\n\n              <div className = 'profilePostFollow'>\n\n                <div\n                onClick = {() => this.onFollowerOpen()}\n                className = 'followItem'>\n                  <span\n                  className = 'postFollowWords'\n                  >Followers</span>\n                  <br />\n                  <span>{followers.length}</span>\n                </div>\n                <div\n                onClick = {() => this.onFollowingOpen()}\n                className = 'followItem'>\n                  <span\n                  className = 'postFollowWords'\n                  >Following</span>\n                  <br />\n                  <span>{following.length}</span>\n                </div>\n              </div>\n\n\n\n            <div>\n\n          {\n              this.props.parameter.username === this.props.currentUser ?\n\n              <div className = 'selfProfileButtons'>\n\n                 <Button\n                    onClick = {() => this.openProfileEdit()}\n                    type=\"primary\"\n                    shape=\"round\"\n                    icon={<i  style={{marginRight:'10px'}} class=\"fas fa-user-edit\"></i>}\n                    style={{fontSize:'15px'}} size={'large'}>\n\n                   Edit Profile\n                 </Button>\n              </div>\n\n              :\n\n              <div className = 'profileButtons'>\n\n              {followers.includes(this.props.currentUser.toString()) ?\n                <div\n                onClick = {() => this.onUnfollow(this.props.currentId, profileId)}\n                className = 'unFollowButton'>\n                  Unfollow\n                </div>\n\n\n\n                :\n\n\n                <Button\n                  style={{fontSize:'16px'}}\n                  onClick = {() => this.onFollow(this.props.currentId, profileId)}\n                   className = 'followButton'\n                  id=\"follow-button\"> Follow </Button>\n              }\n\n\n\n\n                <div className = 'messageButton'>\n                  Message\n                </div>\n\n              {/*\n                this.props.parameter.username !== this.props.currentUser\n                && followers.includes(this.props.currentUser.toString()) ?\n\n                <div>\n                {\n                  !friends.includes(profileId) ?\n                  <div\n                  onClick = {() => this.onAddCloseFriendOpen()}\n                  className = \"addFriendButton\"\n                  >\n                    Add Friend\n                  </div>\n\n                  :\n\n                  <div\n                  onClick = {() => this.onUnAddCloseFriendOpen()}\n                  className = 'unFriendButton'\n                  >\n                    Unfriend\n                  </div>\n                }\n                </div>\n\n\n                :\n\n                <div></div>\n\n\n\n              */}\n\n              </div>\n\n          }\n\n\n\n          </div>\n\n          </div>\n\n          {/*\n\n            DELETE LATER\n            <ConfirmAddFriend\n            visible = {this.state.showFriendConfirm}\n            onClose = {this.onAddCloseFriendClose}\n            curId = {curId}\n            friendId = {profileId}\n             />\n\n             <ConfirmUnfriend\n             visible = {this.state.showUnfriend}\n             onClose = {this.onUnAddCloseFriendClose}\n             curId = {curId}\n             friendId = {profileId}\n             />\n\n            */}\n\n\n          </div>\n\n        </div>\n\n      )\n\n    }\n\n\n    onFollowerOpen = () => {\n      // This is used to open up the follower list\n      this.setState({\n        followerShow: true\n      })\n    }\n\n    onFollowerCancel = () => {\n      // This is used to close the follower list\n      this.setState({\n        followerShow: false\n      })\n    }\n\n    onFollowingOpen = () => {\n      // This is used to open up the following list\n      this.setState({\n        followingShow: true\n      })\n    }\n\n    onFollowingCancel = () => {\n      // This is to close the following list\n      this.setState({\n        followingShow: false\n      })\n    }\n\n    onCalendarTabClick = () => {\n      this.props.history.push(\"/explore/\"+ this.props.parameter.username)\n    }\n\n    onPostTabClick = () => {\n      this.props.history.push(\"/explore/\"+ this.props.parameter.username+\"/posts\")\n\n    }\n\n    onEventTabClick = () => {\n      this.props.history.push(\"/explore/\"+this.props.parameter.username +\"/events\")\n    }\n\n\n\n    onSaveEdit = (values) => {\n        // This function will be called when you make a change on the profile infomraiton\n        // and then save it. Pretty much it will get informaiton form the editprofileform\n        // that was change and then get sent into the channel and then update it in the back\n        // end then that information will get sent back into the frot end and changed\n\n      console.log(values)\n      //The currentId would not be using for the editing the user but rather find the\n      // user. And since the current user can only edit its own page, the current\n      // user id should be good\n      console.log(values)\n\n      const editProfileObj = {\n        first_name: values.first_name,\n        last_name: values.last_name,\n        bio: values.bio,\n        email: values.email,\n        phone_number: values.phone_number,\n        userId: this.props.currentId\n      }\n\n      ExploreWebSocketInstance.editChangeProfile(editProfileObj)\n\n      this.closeProfileEdit()\n\n    }\n\n\n    getInitialValue = () => {\n      // This function will get the initial value of the edit profile page, which\n      // in this case is the name, last name, bio, picture etc what ever else you\n      // wanna edit\n\n      if(this.props.profile){\n        let firstName = \"\";\n        let lastName = \"\";\n        let bio = \"\";\n        let phone_number = \"\";\n        let email = \"\";\n        if(this.props.profile.first_name){\n          firstName = this.props.profile.first_name\n        }\n        if(this.props.profile.last_name){\n          lastName = this.props.profile.last_name\n        }\n        if(this.props.profile.bio !== null){\n          bio = this.props.profile.bio\n        }\n        if(this.props.profile.phone_number){\n          phone_number = this.props.profile.phone_number\n        }\n        if(this.props.profile.email){\n          email = this.props.profile.email\n        }\n\n        return {\n          first_name: firstName,\n          last_name: lastName,\n          bio: bio,\n          phone_number: phone_number,\n          email: email,\n        }\n      }\n\n\n    }\n\n\n    onRenderTabs= () => {\n      const location = this.props.location.pathname\n\n      return (\n        <div className = 'profile-tabContainer'>\n          <div style={{\n          background:'white'}} class=\"stepTab\">\n          <Steps\n            type=\"navigation\"\n            size=\"large\"\n            current={1}\n            onChange={this.onChange}>\n            <Step title=\"Calendar\"\n              icon={<i class=\"far fa-calendar-alt\"></i>}\n              onClick = {() => this.onCalendarTabClick()}\n            />\n\n            {/*  PersonalProfilePostList.js */}\n            <Step title=\"Posts\"\n              onClick = {() => this.onPostTabClick()}\n              icon={<i class=\"far fa-edit\"></i>} />\n\n            {/*  PersonalProfileEventList.js */}\n\n            <Step\n              title=\"Events\"\n\n              onClick = {() => this.onEventTabClick()}\n              icon={<i class=\"fas fa-users\"></i>} />\n          </Steps>\n          </div>\n          <Divider style={{marginTop:'-1px'}}/>\n\n\n          <div className = 'profile-tabPanel'>\n            <UserPostList\n            posts = {this.props.profile.get_posts}\n            cells = {this.props.profile.get_socialCal}\n            allpost = {this.props.profile.get_allPost}\n            location = {location}\n             />\n\n           </div>\n\n        </div>\n      )\n    }\n\n\n\n\n\n\n\n  render(){\n    const { current } = this.state;\n    console.log(this.props)\n    console.log(this.state)\n    let followers = []\n    let following = []\n    let location = \"\"\n    let profilePic = \"\"\n    let firstName=\"\"\n    let lastName=\"\"\n    let bio=\"\"\n\n    if (this.props.profile){\n      if(this.props.profile.get_followers){\n        followers = this.props.profile.get_followers\n      }\n      if(this.props.profile.get_following){\n        following = this.props.profile.get_following\n      }\n      if(this.props.profile.profile_picture){\n        profilePic = this.props.profile.profile_picture\n      }\n\n    }\n\n    if(this.props.profile.first_name){\n      firstName = this.props.profile.first_name\n    }\n    if(this.props.profile.last_name){\n      lastName = this.props.profile.last_name\n    }\n    if(this.props.profile.bio){\n      bio = this.props.profile.bio\n    }\n\n\n\n\n\n    return (\n      <div className = {`profilePage ${this.props.location.state ? \"active\" : \"\"}`}>\n        <div class=\"profileEventCard\" style={{marginTop:'40px', height:'300px'}}>\n\n          <div class=\"parentFlexContainer\">\n            {this.renderProfilePic()}\n            <span className = 'profileName'>\n              {this.capitalize(firstName)} {this.capitalize(lastName)}\n              <br/>\n\n            </span>\n            <span class=\"profileUserName\">{\"@\"+this.props.username}</span>\n            <span class=\"profileBio\">{bio}</span>\n          </div>\n\n          {this.onRenderProfileInfo()}\n\n        </div>\n        {this.onRenderTabs()}\n        <Modal\n        visible = {this.state.showProfileEdit}\n        onCancel = {() => this.closeProfileEdit()}\n        footer = {null}\n\n        >\n        <EditProfileForm\n        initialValues = {this.getInitialValue()}\n        profilePic = {profilePic}\n        onSubmit = {this.onSaveEdit}\n        changeProfilePic = {this.props.changeProfilePic}\n        changeProfilePicAuth = {this.props.changeProfilePicAuth}\n        curId = {this.props.currentId}\n        />\n        </Modal>\n\n        <ChangeProfilePic\n           visible = {this.state.showProfilePicEdit}\n           onCancel = {this.closeChangeProfilePic}\n           onSubmit = {this.handleProfilePicChange}\n         />\n\n        <Modal\n        visible ={this.state.followerShow}\n        onCancel = {this.onFollowerCancel}\n        footer = {null}\n        >\n        <span className ='followWord'> Followers</span>\n        <FollowList follow = {followers} />\n        </Modal>\n\n\n\n        <Modal\n        visible = {this.state.followingShow}\n        onCancel = {this.onFollowingCancel}\n        footer = {null}\n        >\n        <span className = 'followWord'>Following</span>\n        <FollowList follow = {following}/>\n        </Modal>\n\n\n\n\n      </div>\n\n    )\n  }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n      currentId: state.auth.id,\n      currentUser: state.auth.username,\n      token: state.auth.token,\n      profile: state.explore.profile,\n      curUserFriend: state.auth.friends\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeProfilePic: (profilePic) => dispatch(exploreActions.changeProfilePic(profilePic)),\n    closeProfile: () => dispatch(exploreActions.closeProfile()),\n    changeProfilePicAuth: profilePic => dispatch(authActions.changeProfilePicAuth(profilePic))\n\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PersonalProfilePostList);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/PostPageFolder/UserPostModal.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/UserEventTabFolder/PersonalProfileEventList.js",["1009","1010","1011","1012","1013","1014","1015","1016","1017","1018","1019","1020","1021","1022"],"// This would be the post page for the personal profile\n\nimport React from 'react';\nimport axios from 'axios';\nimport { Route, useLocation, Switch, Link } from 'react-router-dom';\nimport { authAxios } from '../../components/util';\nimport { connect } from \"react-redux\";\nimport { Form } from '@ant-design/compatible';\nimport { Button, Modal, Avatar, Steps, Divider} from 'antd';\nimport { RetweetOutlined } from '@ant-design/icons';\nimport NotificationWebSocketInstance from '../../notificationWebsocket';\nimport * as exploreActions from '../../store/actions/explore';\nimport * as authActions from '../../store/actions/auth';\nimport '../../components/UserProfiles/ProfilePage.css';\nimport ChangeProfilePic from '../CurrUser/ChangeProfilePic';\nimport FollowList from '../../components/UserProfiles/FollowList';\nimport ExploreWebSocketInstance from '../../exploreWebsocket';\nimport UserEventList from './UserEventList';\nimport EditProfileForm from '../../components/UserProfiles/EditProfile/EditProfileForm';\n\n// DELETE LATER\n// import ConfirmAddFriend from '../../components/UserProfiles/ConfirmAddFriend';\n// import ConfirmUnfriend from '../../components/UserProfiles/ConfirmUnfriend';\n\nconst { Step } = Steps\nclass PersonalProfileEventList extends React.Component{\n  constructor(props){\n    super(props);\n    // this.initialiseProfile()\n\n  }\n\n  state = {\n    followerShow: false,\n    followingShow: false,\n    showProfileEdit: false,\n    showProfilePicEdit: false,\n    // showFriendConfirm: false,\n    // showUnfriend: false,\n\n  }\n\n  initialiseProfile() {\n    console.log('hit here')\n    this.waitForSocketConnection(() => {\n        ExploreWebSocketInstance.fetchProfile(\n          this.props.parameter.username\n        )\n    })\n    if(this.props.parameter.username){\n      ExploreWebSocketInstance.connect(this.props.parameter.username)\n    }\n  }\n\n  waitForSocketConnection(callback){\n\t\t// This is pretty much a recursion that tries to reconnect to the websocket\n\t\t// if it does not connect\n\t\tconst component = this;\n\t\tsetTimeout(\n\t\t\tfunction(){\n\t\t\t\tconsole.log(ExploreWebSocketInstance.state())\n\t\t\t\tif (ExploreWebSocketInstance.state() === 1){\n\t\t\t\t\tconsole.log('connection is secure');\n\t\t\t\t\tcallback();\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log('waiting for connection...')\n\t\t\t\t\tcomponent.waitForSocketConnection(callback)\n\t\t\t\t}\n\t\t\t}, 100)\n\t}\n\n  componentDidMount(){\n\n    this.initialiseProfile()\n\n  }\n\n\n  componentWillReceiveProps(newProps){\n    console.log(newProps)\n    console.log('hit here')\n    //This will reconnect to eh proper profile if you were to change the profiles\n\n    if(this.props.parameter.username !== newProps.parameter.username){\n\n      this.props.closeProfile()\n      ExploreWebSocketInstance.disconnect();\n      this.waitForSocketConnection(() => {\n        ExploreWebSocketInstance.fetchProfile(\n          newProps.parameter.username\n        )\n      })\n      ExploreWebSocketInstance.connect(newProps.parameter.username)\n    }\n\n    if(this.props.location.pathname !== newProps.location.pathname){\n      //To refetch the information\n      this.waitForSocketConnection(() => {\n        ExploreWebSocketInstance.fetchProfile(\n          newProps.parameter.username\n        )\n      })\n\n      ExploreWebSocketInstance.connect(newProps.parameter.username)\n\n    }\n\n  }\n\n  componentWillUnmount(){\n    //This will disconnect from the channel if you ever exit the page, this will\n    // avoid any connection conflicts\n    //Similar to the event page channel, you will have to remove the recursion from\n    // the disconnect in the websocket\n    ExploreWebSocketInstance.disconnect();\n  }\n\n\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  closeProfileEdit = () => {\n    // You wanna check if the person open and opening is the current user\n    if(this.props.parameter.username === this.props.currentUser){\n      this.setState({\n        showProfileEdit: false,\n      })\n    }\n  }\n\n  openProfileEdit = () => {\n    if(this.props.parameter.username === this.props.currentUser){\n      this.setState({\n        showProfileEdit: true,\n      })\n    }\n  }\n\n  openChangeProfilePic = () => {\n    if(this.props.parameter.username === this.props.currentUser){\n      this.setState({\n        showProfilePicEdit: true\n      })\n    }\n  }\n\n  closeChangeProfilePic = () => {\n    if(this.props.parameter.username === this.props.currentUser){\n      this.setState({\n        showProfilePicEdit: false,\n      })\n    }\n  }\n\n  renderEditButton = () => {\n    return (\n      <div className = 'editButton' onClick = {() => this.openChangeProfilePic()}>\n       <RetweetOutlined />\n\n      </div>\n    )\n  }\n\n  handleProfilePicChange = (values) => {\n    // This is used to changing the profile pic, for submiting.\n    console.log(values)\n    console.log(this.props.profile)\n    let userId = \"\"\n    if(this.props.profile){\n      userId = this.props.profile.id\n\n    }\n    var data  = new FormData()\n    data.append('profile_picture', values)\n    // To edit information, you usually do put instead of post\n    authAxios.put('http://127.0.0.1:8000/userprofile/profile/update/'+userId,\n      data\n    ).then(res => {\n      this.props.changeProfilePic(res.data.profile_picture.substring(21,))\n      this.props.changeProfilePicAuth(res.data.profile_picture.substring(21,))\n\n    })\n\n// PROBALLY ADD IN THE REDUX LIKE EVENT PAGE\n    this.closeChangeProfilePic();\n\n  }\n\n  // on click add friend starts here\n  onClickSend = (e) =>{\n    e.preventDefault()\n    const username = this.props.parameter.username;\n    // axios.default.headers = {\n    //   \"Content-type\": \"application/json\",\n    //   Authorization: `Token ${this.props.token}`\n    // }\n    authAxios.post('http://127.0.0.1:8000/userprofile/friend-request/send/'+username)\n    const notificationObject  = {\n      command: 'send_friend_notification',\n      actor: this.props.currentUser,\n      recipient: this.props.parameter.username,\n    }\n    // NotificationWebSocketInstance.disconnect()\n    // NotificationWebSocketInstance.connect(this.props.match.params.username)\n    NotificationWebSocketInstance.sendNotification(notificationObject)\n    // NotificationWebSocketInstance.connect(this.props.currentUser)\n\n    }\n\n\n    onClickCancel = (e) =>{\n      // const username = this.props.match.params.username;\n      // authAxios.post('http://127.0.0.1:8000/friends/friend-request/cancel/'+username)\n      }\n\n    onClickDeleteFriend = (e) =>{\n      // This is used to delete friends\n        // const username = this.props.match.params.username;\n        // authAxios.post('http://127.0.0.1:8000/friends/remove-friend/'+username)\n    }\n\n    renderProfilePic = () => {\n\n      let profileImage = null\n\n      console.log(this.props.profile)\n      if(this.props.profile){\n        console.log(this.props.profile.profile_picture)\n        if(this.props.profile.profile_picture){\n          profileImage = 'http://127.0.0.1:8000'+this.props.profile.profile_picture\n        }\n      }\n\n      console.log(profileImage)\n      return (\n        <div className = 'profilePic'>\n          <Avatar size = {150} src = {profileImage} />\n          {\n            this.props.parameter.username === this.props.currentUser ?\n            this.renderEditButton()\n\n            :\n\n            <div></div>\n          }\n        </div>\n      )\n    }\n\n    renderCalPostPic = () => {\n      // This is to display the 3 sections (cal, post, pic)\n      // It allows you to switch between\n      return(\n        <div className = 'cal-post-pic'>\n          {this.onRenderTabs()}\n        </div>\n\n      )\n    }\n\n    onFollow = (follower, following) =>{\n      //Send a follow in the backend\n      ExploreWebSocketInstance.sendFollowing(follower, following)\n\n      // The follower is you who is sending the reqwuest and the following is the other person\n      const notificationObject = {\n        command: 'send_follow_notification',\n        actor: this.props.currentUser,\n        recipient: this.props.profile.username\n      }\n\n      NotificationWebSocketInstance.sendNotification(notificationObject)\n    }\n\n\n    onUnfollow = (follower, following) => {\n      // This will send an unfollow into the back end\n      // It will pretty muchh just delete the follower and following\n\n      ExploreWebSocketInstance.sendUnFollowing(follower, following)\n    }\n\n\n\n    // DELETE LATER\n    // onAddCloseFriendOpen = () => {\n    //   this.setState({\n    //     showFriendConfirm: true\n    //   })\n    // }\n    //\n    // onAddCloseFriendClose = () => {\n    //   this.setState({\n    //     showFriendConfirm: false\n    //   })\n    // }\n    //\n    //\n    // onUnAddCloseFriendOpen = () => {\n    //   this.setState({\n    //     showUnfriend: true\n    //   })\n    // }\n    //\n    // onUnAddCloseFriendClose = () => {\n    //   this.setState({\n    //     showUnfriend: false\n    //   })\n    // }\n\n    onCalendarTabClick = () => {\n      this.props.history.push(\"/explore/\"+ this.props.parameter.username)\n    }\n\n    onPostTabClick = () => {\n      this.props.history.push(\"/explore/\"+ this.props.parameter.username+\"/posts\")\n\n    }\n\n    onEventTabClick = () => {\n      this.props.history.push(\"/explore/\"+this.props.parameter.username +\"/events\")\n    }\n\n\n    onRenderProfileInfo(){\n      // For the following and the follwers, the get_followers will be the people taht\n      // are your followers and the people that are in\n      // get following are the people taht are you are following, so they would be your\n      // followers\n      let username = ''\n      let firstName = ''\n      let lastName = ''\n      let bio = ''\n      let followers = []\n      let following = []\n      let posts = ''\n      let profileId = ''\n      let friends = []\n      let curId = ''\n\n      if(this.props.currentId){\n        curId = this.props.currentId\n      }\n\n      if (this.props.profile){\n        if(this.props.profile.username){\n          username = this.props.profile.username\n        }\n        if(this.props.profile.first_name){\n          firstName = this.props.profile.first_name\n        }\n        if(this.props.profile.last_name){\n          lastName = this.props.profile.last_name\n        }\n        if(this.props.profile.bio){\n          bio = this.props.profile.bio\n        }\n        if(this.props.profile.get_following){\n          following = this.props.profile.get_following\n        }\n        if(this.props.profile.get_posts){\n          posts = this.props.profile.get_posts\n\n        }\n        if(this.props.profile.id){\n          profileId = this.props.profile.id\n\n        }\n\n        if(this.props.profile.get_followers){\n          for(let i =0; i<this.props.profile.get_followers.length; i++){\n            followers.push(\n              this.props.profile.get_followers[i].username\n            )\n          }\n        }\n\n\n        //DELETE LATER\n        // if(this.props.curUserFriend){\n        //   for(let i = 0; i< this.props.curUserFriend.length; i++){\n        //     friends.push(\n        //       this.props.curUserFriend[i].id\n        //     )\n        //   }\n        // }\n      }\n    console.log(followers)\n\n      return (\n        <div>\n\n          <div className = 'profileInfo'>\n\n            <div>\n\n\n\n              <div className = 'profilePostFollow'>\n\n                <div\n                onClick = {() => this.onFollowerOpen()}\n                className = 'followItem'>\n                  <span\n                  className = 'postFollowWords'\n                  >Followers</span>\n                  <br />\n                  <span>{followers.length}</span>\n                </div>\n                <div\n                onClick = {() => this.onFollowingOpen()}\n                className = 'followItem'>\n                  <span\n                  className = 'postFollowWords'\n                  >Following</span>\n                  <br />\n                  <span>{following.length}</span>\n                </div>\n              </div>\n\n\n\n            <div>\n\n          {\n              this.props.parameter.username === this.props.currentUser ?\n\n              <div className = 'selfProfileButtons'>\n\n                 <Button\n                    onClick = {() => this.openProfileEdit()}\n                    type=\"primary\"\n                    shape=\"round\"\n                    icon={<i  style={{marginRight:'10px'}} class=\"fas fa-user-edit\"></i>}\n                    style={{fontSize:'15px'}} size={'large'}>\n\n                   Edit Profile\n                 </Button>\n              </div>\n\n              :\n\n              <div className = 'profileButtons'>\n\n              {followers.includes(this.props.currentUser.toString()) ?\n                <div\n                onClick = {() => this.onUnfollow(this.props.currentId, profileId)}\n                className = 'unFollowButton'>\n                  Unfollow\n                </div>\n\n\n\n                :\n\n\n                <Button\n                  style={{fontSize:'16px'}}\n                  onClick = {() => this.onFollow(this.props.currentId, profileId)}\n                   className = 'followButton'\n                  id=\"follow-button\"> Follow </Button>\n              }\n\n\n\n\n                <div className = 'messageButton'>\n                  Message\n                </div>\n\n              {/*\n                this.props.parameter.username !== this.props.currentUser\n                && followers.includes(this.props.currentUser.toString()) ?\n\n                <div>\n                {\n                  !friends.includes(profileId) ?\n                  <div\n                  onClick = {() => this.onAddCloseFriendOpen()}\n                  className = \"addFriendButton\"\n                  >\n                    Add Friend\n                  </div>\n\n                  :\n\n                  <div\n                  onClick = {() => this.onUnAddCloseFriendOpen()}\n                  className = 'unFriendButton'\n                  >\n                    Unfriend\n                  </div>\n                }\n                </div>\n\n\n                :\n\n                <div></div>\n\n\n\n              */}\n\n              </div>\n\n          }\n\n\n\n          </div>\n\n          </div>\n\n          {/*\n\n            DELETE LATER\n            <ConfirmAddFriend\n            visible = {this.state.showFriendConfirm}\n            onClose = {this.onAddCloseFriendClose}\n            curId = {curId}\n            friendId = {profileId}\n             />\n\n             <ConfirmUnfriend\n             visible = {this.state.showUnfriend}\n             onClose = {this.onUnAddCloseFriendClose}\n             curId = {curId}\n             friendId = {profileId}\n             />\n\n            */}\n\n\n          </div>\n\n        </div>\n\n      )\n\n    }\n\n    showPanel = (panelIndex, colorCode) =>{\n      var tabButtons= document.querySelectorAll('.profile-tabContainer .profile-buttonContainer .profile-Tab')\n      var tabPanels= document.querySelectorAll('.profile-tabContainer .profile-tabPanel')\n      if (tabButtons.length > 0 && tabPanels.length > 0){\n        tabButtons.forEach(function(node){\n          node.style.backgroundColor = \"\";\n          node.style.color = \"\";\n        })\n        tabButtons[panelIndex].style.backgroundColor = colorCode;\n        tabButtons[panelIndex].style.color = '#363636';\n        tabPanels.forEach(function(node){\n          node.style.display = 'none'\n        })\n        tabPanels[panelIndex].style.display = 'block';\n        tabPanels[panelIndex].style.backgroundColor = colorCode;\n\n      }\n\n    }\n\n    onFollowerOpen = () => {\n      // This is used to open up the follower list\n      this.setState({\n        followerShow: true\n      })\n    }\n\n    onFollowerCancel = () => {\n      // This is used to close the follower list\n      this.setState({\n        followerShow: false\n      })\n    }\n\n    onFollowingOpen = () => {\n      // This is used to open up the following list\n      this.setState({\n        followingShow: true\n      })\n    }\n\n    onFollowingCancel = () => {\n      // This is to close the following list\n      this.setState({\n        followingShow: false\n      })\n    }\n\n\n    onSaveEdit = (values) => {\n        // This function will be called when you make a change on the profile infomraiton\n        // and then save it. Pretty much it will get informaiton form the editprofileform\n        // that was change and then get sent into the channel and then update it in the back\n        // end then that information will get sent back into the frot end and changed\n\n        //The currentId would not be using for the editing the user but rather find the\n        // user. And since the current user can only edit its own page, the current\n        // user id should be good\n        console.log(values)\n\n        const editProfileObj = {\n          first_name: values.first_name,\n          last_name: values.last_name,\n          bio: values.bio,\n          email: values.email,\n          phone_number: values.phone_number,\n          userId: this.props.currentId\n        }\n\n        ExploreWebSocketInstance.editChangeProfile(editProfileObj)\n\n        this.closeProfileEdit()\n\n    }\n\n    getInitialValue = () => {\n      // This function will get the initial value of the edit profile page, which\n      // in this case is the name, last name, bio, picture etc what ever else you\n      // wanna edit\n\n      if(this.props.profile){\n        let firstName = \"\";\n        let lastName = \"\";\n        let bio = \"\";\n        let phone_number = \"\";\n        let email = \"\";\n        if(this.props.profile.first_name){\n          firstName = this.props.profile.first_name\n        }\n        if(this.props.profile.last_name){\n          lastName = this.props.profile.last_name\n        }\n        if(this.props.profile.bio !== null){\n          bio = this.props.profile.bio\n        }\n        if(this.props.profile.phone_number){\n          phone_number = this.props.profile.phone_number\n        }\n        if(this.props.profile.email){\n          email = this.props.profile.email\n        }\n\n        return {\n          first_name: firstName,\n          last_name: lastName,\n          bio: bio,\n          phone_number: phone_number,\n          email: email,\n        }\n      }\n\n\n    }\n\n    onRenderTabs= () => {\n\n      return (\n        <div className = 'profile-tabContainer'>\n          <div style={{\n          background:'white'}} class=\"stepTab\">\n          <Steps\n            type=\"navigation\"\n            size=\"large\"\n            current={2}\n            onChange={this.onChange}>\n            <Step title=\"Calendar\"\n              onClick = {() => this.onCalendarTabClick()}\n              icon={<i class=\"far fa-calendar-alt\"></i>} />\n\n            {/*  PersonalProfilePostList.js */}\n            <Step title=\"Posts\"\n              onClick = {() => this.onPostTabClick()}\n              icon={<i class=\"far fa-edit\"></i>} />\n\n            {/*  PersonalProfileEventList.js */}\n\n            <Step\n              title=\"Events\"\n\n              onClick = {() => this.onEventTabClick()}\n              icon={<i class=\"fas fa-users\"></i>} />\n          </Steps>\n          </div>\n          <Divider style={{marginTop:'-1px'}}/>\n            <UserEventList\n            events = {this.props.profile.get_socialEvents}\n            curId = {this.props.currentId}\n            ownerId = {this.props.profile.id}\n            history = {this.props.history}\n             />\n        </div>\n      )\n    }\n\n\n\n\n\n\n\n  render(){\n\n    console.log(this.props)\n    console.log(this.state)\n    let followers = []\n    let following = []\n    let profilePic = \"\"\n    let firstName=\"\"\n    let lastName=\"\"\n    let bio=\"\"\n    if (this.props.profile){\n      if(this.props.profile.get_followers){\n        followers = this.props.profile.get_followers\n      }\n      if(this.props.profile.get_following){\n        following = this.props.profile.get_following\n      }\n      if(this.props.profile.profile_picture){\n        profilePic = this.props.profile.profile_picture\n      }\n\n    }\n    if(this.props.profile.first_name){\n      firstName = this.props.profile.first_name\n    }\n    if(this.props.profile.last_name){\n      lastName = this.props.profile.last_name\n    }\n    if(this.props.profile.bio){\n      bio = this.props.profile.bio\n    }\n\n\n    return (\n      <div className = {`profilePage ${this.props.location.state ? \"active\" : \"\"}`}>\n\n        <div class=\"profileEventCard\" style={{marginTop:'40px', height:'300px'}}>\n\n          <div class=\"parentFlexContainer\">\n            {this.renderProfilePic()}\n            <span className = 'profileName'>\n              {this.capitalize(firstName)} {this.capitalize(lastName)}\n              <br/>\n\n            </span>\n            <span class=\"profileUserName\">{\"@\"+this.props.username}</span>\n            <span class=\"profileBio\">{bio}</span>\n          </div>\n\n          {this.onRenderProfileInfo()}\n\n        </div>\n      {this.onRenderTabs()}\n        <Modal\n        visible = {this.state.showProfileEdit}\n        onCancel = {() => this.closeProfileEdit()}\n        footer = {null}\n        >\n        <EditProfileForm\n        initialValues = {this.getInitialValue()}\n        profilePic = {profilePic}\n        onSubmit = {this.onSaveEdit}\n        changeProfilePic = {this.props.changeProfilePic}\n        changeProfilePicAuth = {this.props.changeProfilePicAuth}\n        curId = {this.props.currentId}\n         />\n        </Modal>\n\n        <ChangeProfilePic\n           visible = {this.state.showProfilePicEdit}\n           onCancel = {this.closeChangeProfilePic}\n           onSubmit = {this.handleProfilePicChange}\n         />\n\n        <Modal\n        visible ={this.state.followerShow}\n        onCancel = {this.onFollowerCancel}\n        footer = {null}\n        >\n        <span className ='followWord'> Followers</span>\n        <FollowList follow = {followers} />\n        </Modal>\n\n\n\n        <Modal\n        visible = {this.state.followingShow}\n        onCancel = {this.onFollowingCancel}\n        footer = {null}\n        >\n        <span className = 'followWord'>Following</span>\n        <FollowList follow = {following}/>\n        </Modal>\n\n\n\n\n      </div>\n\n    )\n  }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n      currentId: state.auth.id,\n      currentUser: state.auth.username,\n      token: state.auth.token,\n      profile: state.explore.profile,\n      curUserFriend: state.auth.friends\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeProfilePic: (profilePic) => dispatch(exploreActions.changeProfilePic(profilePic)),\n    changeProfilePicAuth: profilePic => dispatch(authActions.changeProfilePicAuth(profilePic)),\n    closeProfile: () => dispatch(exploreActions.closeProfile()),\n\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PersonalProfileEventList);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/AddFriends.js",["1023","1024","1025"],"import 'antd/dist/antd.css';\nimport { Form } from '@ant-design/compatible';\nimport '@ant-design/compatible/assets/index.css';\nimport { Input, Button, Select, Radio } from 'antd';\nimport React from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport * as navActions from '../store/actions/nav';\nimport * as messageActions from '../store/actions/messages';\nimport { authAxios } from '../components/util';\n\n\n\n\nfunction hasErrors(fieldsError) {\n  return Object.keys(fieldsError).some(field => fieldsError[field]);\n}\n\nclass HorizontalAddChatForm extends React.Component {\n\n  state = {\n    usernames: [],\n    error: null,\n  }\n\n  handleChange = value => {\n    this.setState({\n      usernames: value\n    })\n  }\n  componentDidMount() {\n    // To disable submit button at the beginning.\n    this.props.form.validateFields();\n  }\n\n// The axios.post underneath is used to create a new chat model through the serializers\n// bascially you will just pass in the usernames which you pull form the combinedUsers\n// then you return an empty message and then the participants which you did the StringRelatedField\n// Whenever you call the closeAddChatPopup it will make the isVisible to false\n  handleSubmit = e => {\n    e.preventDefault();\n    const {usernames} = this.state;\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        const combinedUsers = [...usernames, this.props.username]\n        console.log(combinedUsers)\n        authAxios.post(\"http://127.0.0.1:8000/chat/create/\", {\n          messages:[],\n          participants: combinedUsers\n        })\n        .then(res => {\n          this.props.history.push(`/chat/${res.data.id}`);\n          this.props.closePopup();\n          this.props.getUserChats(this.props.username, this.props.token);\n        })\n        .catch(err => {\n          console.error(err);\n          this.setState({\n            error:err\n          });\n        });\n      }\n    });\n  };\n\n  render() {\n    console.log(this.state)\n    console.log(this.props)\n    const { getFieldDecorator, getFieldsError, getFieldError, isFieldTouched } = this.props.form;\n\n    // Only show error after a field is touched.\n    const usernameError = isFieldTouched('username') && getFieldError('username');\n\n    return (\n      <Form layout=\"inline\" onSubmit={this.handleSubmit}>\n        {this.state.error ? `${this.state.error}`  : null}\n        <Form.Item validateStatus={usernameError ? 'error' : ''} help={usernameError || ''}>\n          {getFieldDecorator('username', {\n            rules: [{ required: true, message: 'Please input your username!' }],\n          })(\n            <Select\n            mode ='tags'\n            style = {{width: \"100%\"}}\n            placeholder = \"Add a user\"\n            onChange = {this.handleChange}>\n              {[]}\n            </Select>\n          )}\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" disabled={hasErrors(getFieldsError())}>\n            Start a chat\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token,\n    username: state.auth.username\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return{\n    closePopup: () => dispatch(navActions.closePopup()),\n    getUserChats: (username, token) =>\n      dispatch(messageActions.getUserChats(username, token))\n  }\n}\n\nconst AddChatForm = Form.create({ name: 'horizontal_login' })(HorizontalAddChatForm);\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(AddChatForm));\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/Layouts/SuggestedFriends.js",["1026","1027","1028"],"import { List, Avatar, Button, Skeleton } from 'antd';\nimport './SuggestedFriends.css';\nimport Icon from '@ant-design/icons';\nimport {\nDownloadOutlined,\nSearchOutlined\n} from '@ant-design/icons';\n// import reqwest from 'reqwest';\nimport React from 'react';\nimport { authAxios } from '../../components/util';\n\n\n\nclass SuggestedFriends extends React.Component {\n  state = {\n    initLoading: true,\n    loading: false,\n    data: [],\n    list: [],\n    counter:2,\n\n  };\n\n\n  // async componentDidMount(){\n  //\n  //   await authAxios.get('http://127.0.0.1:8000/userprofile/suggestedFriends')\n  //     .then(res=> {\n  //       console.log(res)\n  //       console.log(res.data)\n  //       this.setState({\n  //         list:res.data,\n  //         data:res.data,\n  //      });\n  //    });\n  //  }\n\n\n\n  componentDidMount() {\n    console.log(\"made it\")\n    this.getData(res => {\n\n      this.setState({\n        initLoading: false,\n        list: res.data,\n      });\n    });\n\n\n    authAxios.get('http://127.0.0.1:8000/userprofile/everyoneSuggested')\n        .then(res=> {\n          console.log(res)\n\n          console.log(res.data)\n          this.setState({\n            data:res.data,\n         });\n       });\n       console.log(this.state.data)\n  }\n\n  getData = callback => {\n    authAxios.get('http://127.0.0.1:8000/userprofile/suggestedFriends')\n        .then(res=> {\n\n          this.setState({\n            list:res.data,\n         });\n       });\n       console.log(this.state.list)\n\n  };\n\n\n\n\n\n  onLoadMore = () => {\n    console.log(this.state.counter)\n    console.log(this.state.data)\n    console.log(this.state.list)\n    // this.setState({\n    //   loading: true,\n    //   // list: this.state.data.concat([...new Array(2)].map(() => ({ loading: true, get_followers:[]}))),\n    //   counter:this.state.counter+1,\n    // });\n\n\n    console.log(this.state.counter)\n          const data = this.state.list.concat(this.state.data.slice(this.state.counter+1, this.state.counter+3));\n          console.log(this.state.data)\n          this.setState({\n            list: data,\n            loading: false,\n            counter: this.state.counter+2\n         },\n           () => {\n             // Resetting window's offsetTop so as to display react-virtualized demo underfloor.\n             // In real scene, you can using public method of react-virtualized:\n             // https://stackoverflow.com/questions/46700726/how-to-use-public-method-updateposition-of-react-virtualized\n             window.dispatchEvent(new Event('resize'));\n\n             },\n       )\n       }\n\n\n  render() {\n    console.log(this.state.data)\n    const { initLoading, loading, list } = this.state;\n    const loadMore =\n       !initLoading && !loading ? (\n         <div\n           style={{\n             textAlign: 'center',\n             marginTop: 12,\n             height: 32,\n             lineHeight: '32px',\n           }}\n         >\n\n\n        </div>\n      ) : null;\n\n    return (\n\n\n      <div>\n        <List\n          className=\"demo-loadmore-list scrollableFeature\"\n\n          itemLayout=\"horizontal\"\n          loadMore={loadMore}\n          dataSource={list}\n          renderItem={item => (\n\n            <List.Item\n\n            >\n\n              <Skeleton avatar title={false} loading={item.loading} active>\n\n              <List.Item.Meta\n                avatar={\n                  <Avatar src={item.profile_picture} />\n                }\n                title={<a href={\"http://localhost:3000/explore/\"+item.username}> {item.first_name} {item.last_name}</a>}\n                description={item.get_followers.length +\" followers\"}\n              />\n\n\n\n                  <Button id=\"follow-button\"> Follow </Button>\n\n              </Skeleton>\n            </List.Item>\n          )}\n        />\n      <div style={{padding:'30px'}}>\n        {((list.length)<=5)?\n\n          <Button style={{left:'35%', float:'bottom'}} onClick={this.onLoadMore}>Load More</Button>\n\n          :\n\n            <div></div>\n        }\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default SuggestedFriends;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/todayEvents.js",["1029","1030"],"import React from 'react';\nimport './Container_CSS/Explore.css';\nimport ExploreWebSocketInstance from '../exploreWebsocket';\nimport { connect } from 'react-redux';\nimport * as calendarActions from '../store/actions/calendars';\n\n\nclass TodayEvents extends React.Component {\n  constructor(props){\n    super(props);\n  }\n\n  state = {\n    events: [],\n  }\n\n\n  componentDidMount(){\n\n    this.props.getEvents()\n    console.log(this.props)\n  }\n\n\n\n\n\n  render() {\n\n\n    return (\n      <span >\n      sdfsdfssdfsfd\n        Hifffff\n      </span>\n    )\n\n\n  }\n\n\n\n}\n\nconst mapStateToProps = state => {\n  return{\n    events: state.calendar.events,\n\n\n  }\n}\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n\n    getEvents: () => dispatch(calendarActions.getUserEvents()),\n  }\n}\nexport default connect(mapStateToProps,mapDispatchToProps) (TodayEvents);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EventPage/EventInfo.js",["1031","1032","1033","1034","1035","1036","1037","1038","1039","1040","1041","1042","1043","1044","1045","1046","1047","1048","1049","1050","1051","1052"],"import React from 'react';\nimport './EventPage.css';\nimport {Button, Progress, Divider, Avatar, Modal, message, notification, Statistic} from 'antd';\nimport {PictureOutlined, CheckSquareTwoTone, EyeOutlined, DownloadOutlined, UserOutlined} from '@ant-design/icons';\nimport ReduxEditEventForm from '../EditCalEventForms/ReduxEditEventForm';\nimport DetailEditEventForm from './DetailEditEventForm';\nimport EventPageWebSocketInstance from '../../../eventPageWebsocket';\nimport CalendarEventWebSocketInstance from '../../../calendarEventWebsocket';\nimport NotificationWebSocketInstance from '../../../notificationWebsocket'\nimport * as dateFns from 'date-fns';\nimport { connect } from \"react-redux\";\nimport moment from 'moment';\nimport AcceptShareModal from './AcceptShareModal';\nimport * as calendarActions from '../../../store/actions/calendars';\nimport * as calendarEventActions from '../../../store/actions/calendarEvent';\nimport RemoveEventModal from '../EditCalEventForms/RemoveEventModal';\nimport background from '../../../components/images/background1.jpg';\nimport ChangeBackgroundModal from \"./ChangeBackgroundModal\";\nimport { authAxios } from '../../../components/util';\nimport Liking from '../../NewsfeedItems/Liking';\nimport { ReactBingmaps } from 'react-bingmaps';\nimport {Link, withRouter} from 'react-router-dom';\nimport {browserHistory} from 'react-router';\n\n\n\n\n\n\n\n\nclass EventInfo extends React.Component{\n\n  constructor(props){\n    super(props);\n\n\n  }\n\n  state = {\n    edit: false,\n    changeBackgroundView: false,\n  }\n\n\n  getInitialValue = () => {\n    console.log(\"hi\")\n    // This will pull the information form the event info so that it can be\n    // displayed on the event when you wanna edit it\n    // This will be presented somewhat similar to the getInitialValue in the\n    // EditEventPopUp\n    console.log(this.props.info)\n    if(this.props.info){\n      let title = \"\";\n      let content = \"\";\n      let friends = [];\n      let start_time = \"\"\n      let end_time = \"\"\n      if(this.props.info.start_time){\n        start_time = dateFns.format(new Date(this.props.info.start_time), \"hh:mm a\")\n      }\n\n      if(this.props.info.end_time){\n        end_time = dateFns.format(new Date(this.props.info.end_time), \"hh:mm a\")\n\n      }\n      // const date_start = dateFns.format(new Date(this.props.info.start_time), \"yyyy-MM-dd\")\n      // const date_end = new Date(this.props.info.end_time)\n      // const end_time = dateFns.format(new Date(this.props.info.end_time), \"hh:mm a\")\n      // console.log(date_start, end_time)\n      if(this.props.info.title){\n        title = this.props.info.title\n      }\n      if(this.props.info.content){\n        content = this.props.info.content\n      }\n      if(this.props.info.invited){\n        for(let i= 0; i < this.props.info.invited.length; i++){\n          if(this.props.info.invited[i].username !== this.props.username)\n          friends.push(this.props.info.invited[i].username)\n        }\n      }\n\n      console.log(friends)\n\n  // Remember that for start date you have to use a momment object, only that will work\n\n      return{\n        title: this.capitalize(title),\n        content: this.capitalize(content),\n        startTime: start_time,\n        endTime: end_time,\n        eventColor: this.props.info.color,\n        location: this.props.info.location,\n        startDate: moment(this.props.info.start_time, \"YYYY-MM-DD\"),\n        endDate: moment(this.props.info.end_time, \"YYYY-MM-DD\"),\n        friends: friends,\n        repeatCondition: this.props.info.repeatCondition,\n        visibleModal:this.state.edit,\n      }\n    }\n\n\n  }\n\n\n  capitalize (str) {\n    if(str){\n        return str.charAt(0).toUpperCase() + str.slice(1)\n    }\n\n  }\n\n  timeConvert = (time) => {\n    // This function will take in a time and then covert the time to\n    // a 1-24 hour hour so that it cna be used to add into the\n    // date and be submited\n\n    console.log(time)\n    let hour = parseInt(time.substring(0,2))\n    let minutes = parseInt(time.substring(3,5))\n    let ampm = time.substring(5,8)\n\n    console.log(minutes)\n    console.log(hour)\n\n    let convertedTime = ''\n\n    if (time.includes('PM')){\n      if (hour !==  12){\n        hour = hour + 12\n      }\n    } else if (time.includes('AM')){\n      if(hour === 12){\n        hour = 0\n      }\n    }\n\n    const timeBundle = {\n      firstHour: hour,\n      firstMin: minutes\n    }\n\n    return timeBundle\n\n  }\n\n\n\n\n  timeConvertFunction = (time) => {\n    // This fucntion will take in a 1-24 hour time\n    // and then returna  1-12 am/pm time\n    // This fucntion will take in the time as a string in the 1-24 hour\n    // time format\n\n    console.log(time)\n    if (time !== null){\n      let hour = time.substring(0, 2)\n      let min = time.substring(3, 5)\n      let final_time = ''\n      if (hour > 12 ){\n        hour = hour - 12\n        if (hour < 10){\n            final_time = \"0\"+hour + ':'+min+' PM'\n        } else {\n            final_time = hour + ':'+min+' PM'\n        }\n      } else if(hour <= 12 ){\n        if (hour == 0){\n          final_time = '12:' + min + ' AM'\n        } else if (hour == 12) {\n          final_time = '12:' + min + ' PM'\n        } else {\n          final_time = hour +':'+ min+' AM'\n        }\n      }\n      console.log(final_time)\n      // MIGHT HAVE TO TAKE INTO CONSIDERATION THE 12AM AND 12 PM\n      return final_time\n    }\n\n\n  }\n\n\n\n\n\n\n  onAcceptUnShareEdit = () => {\n    // This is mostly for submitting events for when you are unsharing events for\n    // other people\n    EventPageWebSocketInstance.sendEditEvent(this.props.tempEventForModal)\n    this.props.closeAcceptUnshareModal()\n    this.setState({\n      edit: false\n    })\n  }\n\n  onSaveEdit = (values) => {\n    // This function will be called when you want to save the new inofmriaton\n    // about the event in the detailEventEditForm\n    // The way this is gonna go, if the function is a single function (not shared\n  // with anyone) then it will probally just run a normal axios and then change all\n  // the redux. For events that has many people, then you prpbally have to do editing\n  // through channels and then notifiy everyone\n\n  // To get this working you gotta  manipulate your data that is passed in and\n  // bundle them up and send it to the right place\n\n  // Also include notifications (mini one and big ones as well)\n  let oldInvitedList = [];\n\n  for (let i = 0; i<this.props.info.invited.length; i++ ){\n    oldInvitedList.push(this.props.info.invited[i].username)\n  }\n\n\n\n  let sharedList  = values.friends\n  // remember that when doing this you still gotta include yourself in stuff\n\n  var difference = oldInvitedList.filter(x => !sharedList.includes(x));\n\n\n  let start_date = values.startDate.toDate()\n  let end_date = values.endDate.toDate()\n\n  // The start and end time are dicts that hold the hour and mins into two\n  // seperate keys\n  const start_time = this.timeConvert(values.startTime)\n  const end_time = this.timeConvert(values.endTime)\n\n  console.log(start_time, end_time)\n\n  start_date = dateFns.addHours(start_date, start_time.firstHour)\n  start_date = dateFns.addMinutes(start_date, start_time.firstMin)\n  // Now you have to convert the date into the right format to be sent into the back\n  // end... the format is this \"yyyy-MM-dd HH:mm:ss\"\n  const instance_start_date = dateFns.format(start_date, 'yyyy-MM-dd HH:mm:ss')\n\n  end_date = dateFns.addHours(end_date, end_time.firstHour)\n  end_date = dateFns.addMinutes(end_date, end_time.firstMin)\n  const instance_end_date = dateFns.format(end_date, 'yyyy-MM-dd HH:mm:ss')\n\n\n  const inviteList = values.friends.slice()\n\n  let personList = values.friends\n  personList.push(this.props.username)\n  console.log(instance_start_date, instance_end_date)\n  console.log(start_date, end_date)\n  console.log(values)\n\n\n  console.log(inviteList, personList)\n\n  let content = \"\"\n  let location = \"\"\n  if(values.content){\n    content = values.content\n  }\n  if(values.location){\n    location = values.location\n  }\n\n  console.log(sharedList)\n\n\n    if(difference.length === 0){\n      // This if statment is for when you change events and you are not unsharing\n      // with anyone\n      const editEventObj = {\n        eventId: this.props.info.id,\n        title: values.title,\n        person: personList,  //Remember that person is the people that the event will show up to\n        invited: inviteList, //Invited is everyone but the host\n        content: content,\n        location: location,\n        eventColor: values.eventColor,\n        startDate: start_date,\n        endDate: end_date,\n        repeatCondition: values.repeatCondition,\n        host: this.props.id\n      }\n\n      EventPageWebSocketInstance.sendEditEvent(editEventObj);\n      this.setState({\n        edit: false,\n      })\n      this.eventEditNotification(\"bottomLeft\");\n\n      // This will be sneding a notification to indicate to the other users that\n      // the host edited some stuff\n      const notificationObject = {\n        command: 'send_edited_event_notification',\n        actor: this.props.id,\n        recipient: inviteList,\n        eventId: this.props.info.id,\n        eventDate: start_date\n      }\n\n      NotificationWebSocketInstance.sendNotification(notificationObject)\n\n    } else {\n      // This if statment is whne you are unsharing with someone, it will open up\n      // a modal asking if you are sure you want to unshare with everyone\n      const editEventObj = {\n        eventId: this.props.info.id,\n        title: values.title,\n        person: personList,  //Remember that person is the people that the event will show up to\n        invited: inviteList, //everyone but you\n        content: content,\n        location: location,\n        eventColor: values.eventColor,\n        startDate: start_date,\n        endDate: end_date,\n        repeatCondition: values.repeatCondition,\n        host: this.props.id\n      }\n\n      var unSharedList = \"\";\n      for (let i = 0; i<difference.length; i++){\n        unSharedList = unSharedList + this.capitalize(difference[i]) + \", \"\n      };\n\n      console.log(unSharedList)\n      this.props.openAcceptUnshareModal(editEventObj, unSharedList);\n    }\n\n\n    // DO A CONDTION WHERE IF YOU ARE UNSHARING WITH PEOPLE, YOU ASK IF\n    // THEY ARE SURE THEY WANNA UNSURE WITH ALL THESE PEOPLE\n\n\n  }\n\n  onCloseSureModal = () => {\n    this.setState({\n      showSureModal: false\n    })\n  }\n\n  onChangeBackgroundOpen = () => {\n    // This is to open the modal for changing the background picture\n    this.setState({\n      changeBackgroundView: true,\n    })\n  }\n\n\n  onChangeBackgroundClose = () => {\n    // This is to close the modal for changing the background picture\n    this.setState({\n      changeBackgroundView: false,\n    })\n  }\n\n\n\n\n  eventEditMessage = () => {\n    message.success(\"Event edit successful\", 2);\n  }\n\n  eventEditNotification = placement => {\n    notification.info({\n      message: `Event edit successful`,\n      placement\n    });\n  };\n\n\n// THIS IS THE SHIT HERE\n  onDeleteEvent = (eventId, eventType) => {\n    console.log(eventId)\n    // Maybe try to disconnect after you delete event\n\n    if (eventType === 'shared'){\n      this.props.openEventDeleteModal(eventId);\n\n    }\n    if (eventType === 'single'){\n\n      const week = dateFns.startOfWeek(new Date())\n      const year = dateFns.getYear(week)\n      const month = dateFns.getMonth(week)+1\n      const day = dateFns.getDate(week)\n      // THIS STILL NEEDS WORK XXX\n      CalendarEventWebSocketInstance.deleteEvent(eventId, this.props.id)\n      // Might just keep this for now (unless i can think of something else)\n\n      // this.props.deleteEvent(eventId)\n      this.openNotification('bottomLeft', \"Event deleted\")\n      if(this.props.history){\n        this.props.history.push('/personalcalendar/w/'+year+'/'+month+'/'+day)\n\n      }\n\n    }\n  }\n\n  openNotification = (placement, message) => {\n  notification.info({\n    message: message,\n    placement,\n    });\n  };\n\n  handleBackgroundPictureChange = value => {\n    console.log(value)\n\n    const eventId = this.props.info.id\n    var data = new FormData();\n    data.append('backgroundImg', value)\n    //This will handle the changing the information in the backend of the event\n    // I guess you will have to do a put method to change it. But I mean a post\n    // should be alright too\n\n    authAxios.put('http://127.0.0.1:8000/mycalendar/events/updatebackground/'+eventId,\n    data\n  ).then (res => {\n    // Now you will run the redux to replace the pic, you just have to change the one\n    // in the page\n    console.log(res.data)\n    this.props.updateEventBackground(res.data.backgroundImg.substring(21,))\n  })\n\n\n  this.setState({\n    changeBackgroundView: false,\n  })\n\n  this.openNotification(\"bottomLeft\", \"Event picture changed.\")\n\n  var invitedList = []\n  for (let i = 0; i<this.props.info.invited.length; i++){\n    invitedList.push(\n      this.props.info.invited[i].username\n    )\n  }\n\n  const notificationObject = {\n    command: 'send_edited_event_notification',\n    actor: this.props.id,\n    recipient: invitedList,\n    eventId: this.props.info.id,\n    eventDate: this.props.info.start_time\n  }\n\n  NotificationWebSocketInstance.sendNotification(notificationObject)\n\n\n  }\n\n  render(){\n    const currentDay = new Date()\n    const selectYear = dateFns.getYear(currentDay).toString()\n    const selectMonth = (dateFns.getMonth(currentDay)+1).toString()\n    const selectDay = dateFns.getDate(currentDay).toString()\n    console.log(this.state)\n    console.log(this.props)\n\n    let show = this.state.showSureModal\n\n    let username = ''\n    let eventHostId = ''\n    let title = ''\n    let content = ''\n    let start_time = ''\n    let end_time = ''\n    let color = ''\n    let date = ''\n    let location = ''\n    let repeat=\"\";\n    let accepted = []\n    let decline = []\n    let invited = []\n    let eventBackgroundPic = \"\"\n    let month = \"\";\n    let day = \"\";\n    let host = \"\";\n    if(this.props.info){\n      if(this.props.info.host){\n        username = this.props.info.host.username\n        eventHostId = this.props.info.host.id\n      }\n      if(this.props.info.title){\n        title = this.props.info.title\n      }\n      if(this.props.info.content){\n        content = this.props.info.content\n      }\n      if(this.props.info.start_time){\n        start_time = dateFns.format(new Date(this.props.info.start_time),'h:mm a')\n        date = dateFns.format(new Date(this.props.info.start_time), 'iii, MMMM dd, yyyy ')\n        console.log(dateFns.format(new Date(this.props.info.start_time), 'HH:mm'))\n        month = dateFns.format(new Date(this.props.info.start_time), 'MMM')\n        day = dateFns.format(new Date(this.props.info.start_time), 'dd')\n\n      }\n      if(this.props.info.end_time){\n        end_time = dateFns.format(new Date(this.props.info.end_time), 'h:mm a')\n      }\n      if(this.props.info.color){\n        color = this.props.info.color\n      }\n      if(this.props.info.location){\n        location = this.props.info.location\n      }\n      if(this.props.info.accepted){\n        accepted = this.props.info.accepted\n      }\n      if(this.props.info.decline){\n        decline = this.props.info.decline\n      }\n      if(this.props.info.invited){\n        invited = this.props.info.invited\n      }\n      if(this.props.info.repeatCondition){\n        repeat = this.props.info.repeatCondition\n        console.log(repeat)\n      }\n      if(this.props.info.host){\n        host = this.props.info.host\n      }\n      if(this.props.info.backgroundImg){\n        eventBackgroundPic = this.props.info.backgroundImg\n\n      }\n\n    }\n\n    return(\n      <div className = 'eventInfoContainer'>\n\n        <div className = 'eventInfoView' >\n          <div className = 'topSectContainier'>\n\n\n            {\n              eventBackgroundPic === \"\" ?\n              <div\n                onClick = {() => this.onChangeBackgroundOpen()}\n                className = 'eventBackgroundPic hoverPic'>\n\n                <div className = \"pictureFrame\">\n                    <PictureOutlined />\n                    <br />\n                    <span> No background </span>\n                </div>\n\n              </div>\n\n              :\n\n              <div\n                onClick = {() => this.onChangeBackgroundOpen()}\n                className = 'eventBackgroundWPic hoverPic'>\n              {/*\n                <div className =\"pictureFrame\">\n\n                <PictureOutlined />\n                <br />\n                <span> No background </span>\n                  </div>\n                */}\n                <img\n                src = {'http://127.0.0.1:8000'+eventBackgroundPic}\n                className = 'eventBackgroundImg'\n                 />\n\n              </div>\n\n            }\n\n            <div className = 'eventTopSide'>\n            <div\n            className = \"dateCircle\"\n            style = {{\n              backgroundColor: color,\n\n\n            }}\n            >\n              <div\n              style = {{\n                color: \"white\",\n                fontSize: \"20px\",\n\n              }}\n              clasName = \"month\" > {month}</div>\n              <div className = \"day\"> {day} </div>\n            </div>\n\n\n            <br/>\n            <br/>\n\n\n\n        <div class=\"eventCard\" style={{marginTop:'-25px', width:'500px',padding:'40px'}}>\n            <div\n              className = 'eventTitle'>\n              {this.capitalize(title)}\n            </div>\n\n            <br/>\n\n\n          <div class=\"flex-container\"\n            style={{width:'250px', color:'#1890ff', padding:'25px', background:'white'}}\n\n          >\n            <div className = \"attendees\">\n              Host\n\n              <br/>\n              <span>\n                <Avatar\n                style={{right:'5px'}}\n                src = {\"http://127.0.0.1:8000\"+host.profile_picture}\n                />\n                <span > {this.capitalize(host.first_name)} {this.capitalize(host.last_name)} </span>\n              </span>\n            </div>\n\n            {/*if no one going , THEN show invited else just show invited\n            <div className = \"attendees flex-child\">\n              <span style={{color:'black'}}> {invited.length} Invited </span>\n\n              <Liking like_people={invited}/>\n            </div>\n            */}\n\n            </div>\n\n\n          </div>\n\n          </div>\n\n\n\n          </div>\n\n\n          <div style={{marginTop:'-75px',marginLeft:'290px', color:'black'}} class=\"outerContainer\">\n            <span\n                style={{ fontSize:'20px', width:'1100px', height:'60px',\n                 display:'inline-block', marginTop:'100px', padding:'45px'}}\n                 class=\"aboutEvent eventCard\">\n              <div class=\"outerContainerEvent\">\n              <span class=\"innerContainerEvent\" style={{display:'inline-block'}}>\n\n                <Statistic class=\"addFont\" title=\"Going\" value={accepted.length} />\n\n\n\n              </span>\n              <span class=\"innerContainerEvent\" style={{display:'inline-block'}}>\n                  <Liking\n                  history = {this.props.history}\n                  style={{display:'inline-block'}}\n                  num={5}\n                  like_people={accepted}/>\n              </span>\n              <span class=\"innerContainerEvent\" style={{marginLeft:'100px',display:'inline-block'}}>\n\n                <Statistic title=\"Invited\" value={invited.length} />\n\n\n\n              </span>\n\n\n              <span class=\"innerContainerEvent\" style={{display:'inline-block'}}>\n                  <Liking\n                    num={5}\n                    history = {this.props.history}\n                    style={{display:'inline-block'}} like_people={invited}/>\n              </span>\n\n             <span class=\"innerContainerPeople\"\n               style={{display:'inline-block',padding:'15px'}}>\n\n\n                 <Button\n                    type=\"primary\" shape=\"round\"\n                    icon={<i  style={{marginRight:'10px'}} class=\"far fa-share-square\"></i>}\n                    style={{left:'110%', fontSize:'15px'}} size={'large'}>\n\n                   Invite\n                 </Button>\n\n              {\n                (accepted.includes(this.props.username))?\n                   <Button\n                      shape=\"round\"\n                      icon={<i  style={{marginRight:'10px'}} class=\"fas fa-user-check\"></i>}\n                      style={{left:'115%', fontSize:'15px'}} size={'large'}>\n\n                     Going\n                   </Button>\n\n                   :\n                   <Button\n                      shape=\"round\" type=\"primary\"\n                      icon={<i  style={{marginRight:'10px'}} class=\"fas fa-user-check\"></i>}\n                      style={{left:'115%', fontSize:'15px'}} size={'large'}>\n\n                     Going\n                   </Button>\n\n             }\n\n\n               <Button\n                  shape=\"round\"\n                  icon={<i  style={{marginRight:'10px'}} class=\"fas fa-user-times\"></i>}\n                  style={{left:'120%', fontSize:'15px'}} size={'large'} danger>\n                  Delete\n               </Button>\n             </span>\n\n               </div>\n            </span>\n\n          </div>\n\n          <div style={{marginTop:'40px', marginLeft:'290px', color:'black'}} class=\"outerContainer\">\n\n            <div style={{ fontSize:'20px',display:'inline-block', width:'575px' }}\n              class=\"aboutEvent eventCard innerContainer\">\n              Event Details\n              <Divider/>\n\n              <div style={{marginTop:'20px'}} class=\"eventDetails\">\n                <i style={{marginRight:'10px', color:'#1890ff'}} class=\"fas fa-globe\"></i>\n                Public Event\n                <br/>\n\n                <i style={{marginRight:'10px', color:'#1890ff'}} class=\"far fa-calendar-alt\"></i>\n                {date} at {start_time} - {end_time}\n                <br/>\n                <div>\n\n                   {\n                     (repeat==\"daily\")?\n                     <span>\n                       <i class=\"fas fa-redo-alt\" style={{marginRight:'10px', color:'#1890ff'}}></i>\n                       Occurs every day\n\n                     </span>\n                     :\n                     <div>\n\n\n                       {\n                         (repeat==\"monthly\")?\n                         <span>\n                           <i class=\"fas fa-redo-alt\" style={{marginRight:'10px', color:'#1890ff'}}></i>\n                           Occurs every month\n\n                         </span>\n                         :\n                           <div>\n                             {\n                             (repeat==\"weekly\")?\n                             <span>\n                               <i class=\"fas fa-redo-alt\" style={{marginRight:'10px', color:'#1890ff'}}></i>\n                               Occurs weekly\n                               {/*<span>\n                                 &nbsp;\n                               {dateFns.format(currentDay, 'iiii')}\n                                 &nbsp;\n                               </span}\n                               */\n                               }\n\n                             </span>\n                             :\n                             <span></span>\n                             }\n                           </div>\n\n\n\n\n                         }\n\n\n\n\n\n                     </div>\n                   }\n                </div>\n                <i class=\"fas fa-user-friends\" style={{marginRight:'10px', color:'#1890ff'}}></i>\n                {invited.length+1} people\n                <br/>\n\n                <br/>\n\n\n\n\n                <div className = \"contentEvent\"> {content} </div>\n\n\n\n                </div>\n\n\n\n\n              </div>\n\n\n            <div class=\"mapEventCard\">\n              <p style={{fontSize:'20px'}}\n                className=\"eventDetails\"> Location </p>\n              <span>\n                <Divider style={{marginTop:'-1px'}}/>\n\n                <ReactBingmaps\n\n                  bingmapKey = \"AggkvHunW4I76E1LfWo-wnjlK9SS6yVeRWyeKu3ueSfgb1_wZqOfD1R87EJPAOqD\"\n                  center = {[32.2226, 110.9747]}\n                  boundary = {\n                  {\n                    \"search\":\"Fremont, CA\",\n                    \"option\":{\n                      entityType: 'PopulatedPlace'\n                    },\n                    \"polygonStyle\" :{\n                      fillColor: 'rgba(161,224,255,0.4)',\n                      strokeColor: '#a495b2',\n                      strokeThickness: 2\n                    }\n                  }\n                }\n                  >\n                </ReactBingmaps>\n\n                 {/*Saving api calls don't worry about maps*/}\n                <Divider/>\n                  <i style={{marginRight:'15px', color:'#1890ff',\n                    fontSize:'16px'}} class=\"fas fa-map-marker-alt\"></i>\n                  <p style={{fontSize:'16px', color:'black',  display:'inline-block'}}>\n                    Tucson, Arizona\n                  </p>\n              </span>\n\n\n            </div>\n\n\n\n\n\n\n          </div>\n\n\n\n\n          <div className = 'eventInfo outerContainerPeople'>\n\n\n            {/*\n\n            <div className = \"locationEventWord\">Location</div>\n            {\n              location === \"\" ?\n              <div className = \"contentEventEmpty\"> No info... </div>\n              :\n              <div> {this.capitalize(location)} </div>\n            }\n\n            */}\n\n\n\n        <div style={{ left:'72%',marginTop:'150px', width:'450px',\n          padding:'40px'}} className = \"eventPeopleWord eventCard\">\n           Statistics\n\n          <Divider/>\n          <div className =  \"percentagesBars\">\n\n          <div className = \"percentage\">\n\n          <Progress\n            type = \"circle\"\n            percent={Math.floor(100*(((accepted.length-1)+decline.length)/invited.length))}\n             size=\"small\"\n             status=\"active\"\n             width={80}\n             gap\n          />\n          <div className = \"percentageTerm\"> Responded </div>\n          </div>\n\n          <div className = 'percentage'>\n          <Progress\n            type = \"circle\"\n\n            percent={Math.floor(100*((accepted.length-1)/(invited.length)))}\n            width={80}\n          />\n\n          <div className = \"percentageTerm\"> Accepted </div>\n          </div>\n\n          <div className = \"percentage\">\n          {\n            (Math.floor(100*(decline.length/invited.length))<100)?\n\n             <Progress\n\n               type = \"circle\" percent={Math.floor(100*(decline.length/invited.length))}\n               width={80}\n             />\n            :\n            <Progress\n\n              type =\"circle\" percent={Math.floor(100*(decline.length/invited.length))}\n\n              width={80}\n             />\n          }\n\n          <div className = \"percentageTerm\" > Declined </div>\n          </div>\n\n\n\n          </div>\n\n        </div>\n\n\n        <div style={{ left:'72%',marginTop:'50px', width:'450px', height:'300px',\n          padding:'40px'}} className = \"eventPeopleWord eventCard\">\n           Suggested Friends\n\n          <Divider/>\n\n\n\n\n\n        </div>\n\n\n\n          </div>\n\n          <div className = 'closeEvent'>\n            <Link to={\"/personalcalendar/w/\"+selectYear+'/'+selectMonth+'/'+selectDay} >\n            <i class=\"far fa-times-circle\">  </i>\n            </Link>\n          </div>\n\n\n\n        </div>\n\n      <DetailEditEventForm\n      {...this.props}\n\n      info = {this.props.info}\n      initialValues = {this.getInitialValue()}\n      onSubmit = {this.onSaveEdit}\n      friendList = {this.props.friendList}\n      onDelete = {this.onDeleteEvent}\n       />\n      <AcceptShareModal\n      info = {this.props.tempEventForModal}\n      tempDifference ={this.props.tempDifference}\n      onCancel = {this.props.closeAcceptUnshareModal}\n      visible = {this.props.showAcceptUnshareModal}\n      onSubmit = {this.onAcceptUnShareEdit}\n       />\n\n      <RemoveEventModal\n        visible = {this.props.showDeleteModal}\n        close = {this.props.closeEventDeleteModal}\n        history = {this.props.history}\n        item = {this.props.deleteEventId}\n        user = {this.props.id}\n      />\n\n      <ChangeBackgroundModal\n        hostPic={host.profile_picture}\n        pic={eventBackgroundPic}\n        visible = {this.state.changeBackgroundView}\n        close = {this.onChangeBackgroundClose}\n        onSubmit = {this.handleBackgroundPictureChange}\n      />\n\n\n      </div>\n\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    username: state.auth.username,\n    id: state.auth.id,\n    friendList: state.auth.friends,\n    showAcceptUnshareModal: state.calendar.showAcceptUnshareModal,\n    tempEventForModal: state.calendar.tempEventForModal,\n    tempDifference: state.calendar.tempDifference,\n    deleteEventId: state.calendarEvent.deleteEventId,\n    showDeleteModal: state.calendarEvent.showDeleteModal\n\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    openAcceptUnshareModal: (eventObj, tempDifference) => dispatch(calendarActions.openAcceptUnshareModal(eventObj, tempDifference)),\n    closeAcceptUnshareModal: () => dispatch(calendarActions.closeAcceptUnshareModal()),\n    openEventDeleteModal: eventId => dispatch(calendarEventActions.openEventDeleteModal(eventId)),\n    closeEventDeleteModal: () => dispatch(calendarEventActions.closeEventDeleteModal()),\n    deleteEvent: (eventId) => dispatch(calendarActions.deleteEvents(eventId)),\n    updateEventBackground: (backgroundPic) => dispatch(calendarActions.updateEventBackground(backgroundPic))\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EventInfo);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EventPage/EventGroupChat.js",["1053","1054","1055","1056","1057","1058"],"import React from 'react';\nimport moment from 'moment';\nimport { Comment, Tooltip, List, Avatar, Input, Form, Button } from 'antd';\nimport { SendOutlined  } from '@ant-design/icons';\nimport { connect } from 'react-redux'\nimport './EventPage.css';\nimport Liking from '../../NewsfeedItems/Liking';\nimport EventPageWebSocketInstance from '../../../eventPageWebsocket';\n\nclass EventGroupChat extends React.Component{\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  state = {\n    message: ''\n  }\n\n  renderTimestamp = timestamp =>{\n    let prefix = '';\n    const timeDiff = Math.round((new Date().getTime() - new Date(timestamp).getTime())/60000)\n    if (timeDiff <= 1 ) {\n      prefix = `Just now`;\n    } else if (timeDiff < 60 && timeDiff >1 ) {\n      prefix = `${timeDiff} minutes ago`;\n    }else if (timeDiff < 24*60 && timeDiff > 60) {\n      prefix = `${Math.round(timeDiff/60)} hours ago`;\n    } else if (timeDiff < 31*24*60 && timeDiff > 24*60) {\n      prefix = `${Math.round(timeDiff/(60*24))} days ago`;\n    } else {\n        prefix = `${new Date(timestamp)}`;\n    }\n\n    return prefix;\n  }\n\n  handleChange = e => {\n    console.log(e.target.value)\n    this.setState({\n      message: e.target.value\n    })\n  }\n\n  handleSubmit = e => {\n    // This will handle sending information into the backend end then through\n    // channels\n    if(this.state.message !== ''){\n      EventPageWebSocketInstance.sendEventMessage(\n        this.state.message,\n        this.props.id,\n        this.props.eventId\n\n      )\n\n      this.setState({message: ''})\n    }\n  }\n\n  scrollToBottom = () => {\n    if(this.messagesEnd){\n      this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n\n    }\n  }\n\n  componentDidMount() {\n    this.scrollToBottom();\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n\n  render(){\n    const { TextArea } = Input;\n    console.log(this.props)\n    let messages = []\n    if (this.props.messages){\n      messages = this.props.messages\n    }\n    const data = [\n    {\n      title: 'Ant Design Title 1',\n    },\n    {\n      title: 'Ant Design Title 2',\n    },\n    {\n      title: 'Ant Design Title 3',\n    },\n    {\n      title: 'Ant Design Title 4',\n    },\n  ];\n\n  let inviteList = [];\n  if(this.props.inviteList){\n    inviteList = this.props.inviteList\n  }\n  let eventHostId=\"\";\n  if(this.props.info.host){\n    eventHostId = this.props.info.host.id\n  }\n\n    return(\n\n\n      <div>\n        <div class=\"chatBox eventCard\"\n          style={{marginTop:'30px',width:'550px',\n            height:'60px', padding:'10px',marginBottom:'10px'}}>\n\n            <Liking\n            num={10}\n            history = {this.props.history}\n            style={{display:'inline-block'}} like_people={inviteList}/>\n          {\n          /*\n          <span class=\"innerContainerPeople\">\n            {\n              inviteList.map(item => (\n                <div style={{display:'inline-block'}} key={item}>\n\n                  <span className = ''> {item.first_name+\" \"}</span>\n\n\n                </div>\n\n\n                ))\n\n              }\n\n          </span>\n          */\n          }\n          {/*\n          <div class=\"chatHeader\">\n            You and {inviteList.length} others\n          </div>\n          */}\n\n\n\n        </div>\n\n      {/*item.host.id==this.props.id\n         (this.props.id==this.props.info.host.id)\n        */}\n\n    { ((inviteList.length > 0)||(eventHostId==this.props.id)) ?\n\n      <div className = 'eventGroupChatContainer'>\n\n      <div className = 'messageList'>\n      <List\n          itemLayout=\"horizontal\"\n          dataSource={messages}\n          renderItem={item => (\n\n\n\n            <div className = {`${this.props.id === item.messageUser.id ?\n              \"eventMessageItemUser\" : \"eventMessageItemNotUser\"}`}>\n\n              {this.props.id !== item.messageUser.id ?\n                <div>\n                <Avatar\n                className = 'eventMessageAvatar'\n                size = {30} src = {'http://127.0.0.1:8000'+item.messageUser.profile_picture} />\n                </div>\n                :\n\n                <div></div>\n              }\n              <div className = 'messageP'>\n                {this.props.id !== item.messageUser.id ?\n                  <span className = 'userName'>{this.capitalize(item.messageUser.first_name)} {this.capitalize(item.messageUser.last_name)}\n                  </span>\n                  :\n                  <span></span>\n\n                }\n\n\n              <div>{item.body}</div>\n              <div className = 'eventTimeStamp'> {this.renderTimestamp(item.created_on)}</div>\n            </div>\n\n            </div>\n\n          )}\n        >\n        <div style={{ float:\"left\", clear: \"both\" }}\n            ref={(el) => { this.messagesEnd = el; }}>\n       </div>\n        </List>\n        </div>\n\n\n      <div className = 'inputForm'>\n\n        <Form>\n          <TextArea\n          className = 'eventChatInput'\n          onChange = {this.handleChange}\n          value = {this.state.message}\n          onPressEnter = {this.handleSubmit}\n          placeholder = \"Send a message\"\n          rows={1}\n          style={{marginTop:'10px'}}\n          />\n\n        </Form>\n      </div>\n      <Button\n        style={{float:'right', marginTop:'10px', marginRight:'20px'}}\n        class=\"roundButton\"\n        onClick = {this.handleSubmit} type=\"primary\"> Chat </Button>\n\n      </div>\n\n      :\n\n      <div\n      className = \"chatDisabledPage\"\n      >\n      <i\n      style = {{\n        fontSize: \"25px\"\n      }}\n      class=\"fas fa-exclamation-circle\"></i>\n      <div> Chats disabled because event is not shared </div>\n      </div>\n\n    }\n    </div>\n\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return{\n    id: state.auth.id\n  }\n}\n\nexport default connect(mapStateToProps)(EventGroupChat);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/Form.js",["1059","1060","1061"],"import React from 'react'\n\nimport { Form } from '@ant-design/compatible';\nimport '@ant-design/compatible/assets/index.css';\n\nimport { Input, Button, Select } from 'antd';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nconst { Option } = Select;\n\n// Function: Version 1 of our forms\nclass ProfilePost extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  // action that takes in 3 parameter event, requestType,\n  // articleID. Depending on ArticleDetailView or ArticleListView\n  // the handle submit will either post or put\n  handleSubmit = (event, requestType, articleID) => {\n      const title=event.target.elements.titleInput.value;\n      const content=event.target.elements.contentInput.value;\n      axios.defaults.headers = {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\tAuthorization: this.props.token,\n\t\t\t}\n      switch ( requestType ) {\n        case 'post':\n          return axios.post('http://127.0.0.1:8000/userprofile/list/', {\n            Caption: title,\n            User: content,\n          })\n          .then(res => console.log(res))\n          .catch(error=> console.error(error));\n        case 'put':\n          return axios.put('http://127.0.0.1:8000/userprofile/list/'+articleID+'/', {\n            Caption: title,\n            User: content,\n          })\n          .then(res => console.log(res))\n          .catch(error=> console.error(error));\n      }\n    }\n\n//the onSubmit for will call an annoymous form and will take\n// in 3 parameters when they are called in the ArticleDetailView and\n// ArticleListView\n  render() {\n    return (\n      <div>\n      <Form  onSubmit = {(event)=> this.handleSubmit (\n        event,\n        this.props.requestType,\n        this.props.articleID\n        )}\n        className = 'login-form'>\n        <Form.Item label=\"Title\">\n          <Input name = \"titleInput\"  />\n        </Form.Item>\n\n        <Form.Item label=\"Content\">\n          <Input name = \"contentInput\" placeholder ='Enter text here' />\n        </Form.Item>\n\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            {this.props.btnText}\n          </Button>\n        </Form.Item>\n      </Form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token\n  }\n}\n\nexport default connect(mapStateToProps)(ProfilePost);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NotificationsDropDown.js",["1062","1063","1064","1065","1066","1067","1068","1069","1070","1071","1072","1073","1074"],"import React from 'react';\nimport { Menu, Dropdown, List, Button, Avatar, Badge, notification } from 'antd';\nimport { DownOutlined, NotificationOutlined } from '@ant-design/icons';\nimport NotificationWebSocketInstance from '../notificationWebsocket';\nimport { authAxios } from '../components/util';\nimport axios from 'axios';\nimport './Container_CSS/Notifications.css';\nimport { UserOutlined, SmileTwoTone, FrownOutlined } from '@ant-design/icons';\nimport { connect } from 'react-redux';\nimport * as notificationsActions from '../store/actions/notifications';\nimport * as eventSyncActions from '../store/actions/eventSync';\nimport PickEventSyncModal from './PersonalCalendar/EventSyncForms/PickEventSyncModal';\nimport * as dateFns from 'date-fns';\nimport { AimOutlined, ArrowRightOutlined } from '@ant-design/icons';\nimport PendingSocialEventModal from './NotificationFolder/PendingSocialEventModal';\nimport PendingSocialPicsModal from './NotificationFolder/PendingSocialPicsModal';\n// This one is for holding the notifications and all its function\n\nclass NotificationsDropDown extends React.Component{\n  state = {\n    visible: false,\n    showPendingEvent: false,\n    showPendingPics: false,\n    pendingEvent: {},\n    pendingPictures: {},\n    selectedUser: \"\",\n    selectedUserProfile: \"\",\n    // The notification id will be the that of the notification. This is mostly\n    // used for the pending picture notificaitons. Same with eventDate\n    notificationId: \"\",\n    eventDate: \"\",\n    selectedUserId:\"\"\n  };\n\n  handleMenuClick = (e) => {\n    if (e.key === '3') {\n      this.setState({ visible: false });\n    }\n  }\n\n\n  handleVisibleChange = (flag) => {\n      this.setState({ visible: flag });\n    }\n\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  onAccept = (actor, recipient) => {\n    // this function will delete the notification that you accept and then send a notification\n    // to the other person that they have accepted their frined reuqest\n    // In the accept, the actor would be the person accepting and the recipient will be\n    // the person that sent the request\n    console.log(actor)\n    console.log(recipient)\n    authAxios.post('http://127.0.0.1:8000/userprofile/friend-request/accept/'+recipient)\n    const acceptNotificationObject = {\n\n      command: 'accept_friend_request_notification',\n      actor: actor,\n      // the actor is an id of the recipient of the friend request\n      recipient: recipient\n      // the recipient is the actor that sent the friend request\n    }\n    NotificationWebSocketInstance.sendNotification(acceptNotificationObject)\n  }\n\n  onDecline = (actor, recipient) => {\n    authAxios.post('http://127.0.0.1:8000/userprofile/friend-request/delete/'+recipient)\n    const declineNotificationObject = {\n      command: 'decline_friend_request_notification',\n      actor: actor,\n      recipient: recipient,\n    }\n    NotificationWebSocketInstance.sendNotification(declineNotificationObject)\n  }\n\n  onEventSyncDecline = (actor, recipient, minDate, maxDate) => {\n    const declineNotificationObject = {\n      command: 'decline_event_sync',\n      actor: actor,\n      recipient: recipient,\n      minDate: minDate,\n      maxDate: maxDate\n    }\n    // console.log(declineNotificationObject)\n    NotificationWebSocketInstance.sendNotification(declineNotificationObject)\n  }\n\n  onEventSyncAccept = (actor, recipient, minDate, maxDate) => {\n    // This will send it back to the notification to the orignal actor\n    // os that use can pick an event sync date. This funciton actually deletes\n    // the notification in the backend so no need to do it in the front end\n    // ADD ANIMATION FOR WHEN ACCEPTING\n    const acceptNotificationObject = {\n      command: 'accept_event_sync',\n      actor: actor,\n      recipient: recipient,\n      minDate: minDate,\n      maxDate: maxDate\n    }\n    NotificationWebSocketInstance.sendNotification(acceptNotificationObject)\n  }\n\n  deleteSideNotification = ( placement ) => {\n    notification.info({\n      message: 'Notification Deleted',\n      placement,\n    })\n  }\n\n  onDeleteNotification = (notificationId) => {\n    console.log(notificationId)\n    this.deleteSideNotification('bottomRight')\n    authAxios.delete('http://127.0.0.1:8000/userprofile/notifications/delete/'+notificationId)\n    this.props.deleteNotification(notificationId)\n  }\n\n  onProfileClick = (user) => {\n    console.log(user)\n    this.props.history.push('/explore/'+user)\n\n  }\n\n  onEventPageClick = (eventId) =>{\n    console.log(eventId)\n    if(eventId){\n      this.props.history.push(\"/personalcal/event/\"+eventId)\n\n    }\n\n  }\n\n  renderTimestamp = timestamp =>{\n    console.log(timestamp)\n    let prefix = '';\n    console.log(new Date().getTime())\n    console.log(new Date(timestamp).getTime())\n    const timeDiff = Math.round((new Date().getTime() - new Date(timestamp).getTime())/60000)\n    console.log(timeDiff)\n    if (timeDiff < 1 ) {\n      prefix = `Just now`;\n    } else if (timeDiff < 60 && timeDiff >= 1 ) {\n      prefix = `${timeDiff} minutes ago`;\n    }else if (timeDiff < 24*60 && timeDiff > 60) {\n      prefix = `${Math.round(timeDiff/60)} hours ago`;\n    } else if (timeDiff < 31*24*60 && timeDiff > 24*60) {\n      prefix = `${Math.round(timeDiff/(60*24))} days ago`;\n    } else {\n        prefix = `${dateFns.format(new Date(timestamp), \"MMMM d, yyyy\")}`;\n    }\n\n    return prefix;\n  }\n\n\n  onOpenPendingEvent = (pendingEventObj, selectedUser, selectedUserProfile, notificationId) => {\n    // This function will open the modal to show the user what the pending soical\n    // event will look like\n    this.setState({\n      showPendingEvent: true,\n      pendingEvent: pendingEventObj,\n      selectedUser: selectedUser,\n      selectedUserProfile: selectedUserProfile,\n      notificationId: notificationId\n    })\n  }\n\n  onClosePendingEvent = () => {\n    // This function will close the modal of the pending evnet\n    this.setState({\n      showPendingEvent: false,\n      pendingEvent: {},\n      selectedUser: \"\",\n      selectedUserProfile: \"\",\n      notificationId: \"\"\n    })\n  }\n\n  onOpenPendingPics = (pendingPicObj, selectedUser, selectedUserProfile, notificationId, eventDate,selectedUserId) => {\n     this.setState({\n       showPendingPics: true,\n       pendingPictures: pendingPicObj,\n       selectedUser: selectedUser,\n       selectedUserProfile: selectedUserProfile,\n       notificationId: notificationId,\n       eventDate:eventDate,\n       selectedUserId: selectedUserId\n     })\n  }\n\n  onClosePendingPics = () => {\n    // This function will cose the modal of the pending pic\n    this.setState({\n      showPendingPics: false,\n      pendingPictures: {},\n      selectedUser: \"\",\n      selectedUserProfile: \"\",\n      notificationId: \"\",\n      eventDate: \"\",\n      selectedUserId: \"\"\n    })\n  }\n\n  renderNotifications = () => {\n    // For the accept notificaiton, you want to pass in min and max date and the requested user so you can\n     // filter out later\n    const notificationList = []\n    const notifications = this.props.notifications\n    for (let i = 0; i<notifications.length; i++){\n      if(notifications[i].type === 'friend'){\n        console.log( new Date() )\n        console.log(new Date(notifications[i].timestamp))\n        console.log(this.renderTimestamp(notifications[i].timestamp))\n        notificationList.push(\n        <li className = 'notificationListContainer'>\n        <div className = 'notificationIcon'>\n        <Avatar size = {55} style ={{\n          backgroundColor: 'blue',\n          verticalAlign: 'middle'}}\n          // icon = {<UserOutlined />}\n          src = {\"http://127.0.0.1:8000\"+notifications[i].actor.profile_picture}\n          >\n        </Avatar>\n        </div>\n          <h4 className = 'listNotificationFriend'>\n            <span className = 'notificationWords'>\n            <b>{this.capitalize(notifications[i].actor.username)} </b>\n             sent you a friend request.\n            </span>\n            <br />\n            <span className = 'timeStamp'> {this.renderTimestamp(notifications[i].timestamp)} </span>\n            <div className ='pickEventSyncButton'>\n            <Button\n             type =\"primary\"\n             className = 'acceptButton'\n             onClick = {()=> this.onAccept(notifications[i].recipient, notifications[i].actor.username)}> Accept</Button>\n            <Button\n             className = 'declineButton'\n             onClick = {()=> this.onDecline(notifications[i].recipient, notifications[i].actor.username)}> Decline </Button>\n            </div>\n\n            <Button\n\n              type ='text'\n              shape = 'circle'\n              className = 'deleteButton'\n              onClick = {()=> this.onDeleteNotification(notifications[i].id) }> X </Button>\n          </h4>\n        </li>\n        )\n      }\n      if (notifications[i].type === 'accepted_friend') {\n        notificationList.push(\n        <li className = 'notificationListContainer'>\n        <div className = 'notificationIcon'>\n          <Avatar size = {55} style ={{\n            backgroundColor: 'lightskyblue',\n            verticalAlign: 'middle'}}\n            // icon = {<UserOutlined />}\n            src = {\"http://127.0.0.1:8000\"+notifications[i].actor.profile_picture}\n            >\n          </Avatar>\n        </div>\n          <h4 className = 'listNotificationSingle'>\n              <b>{this.capitalize(notifications[i].actor.username)} </b>\n              accepted your friend request.\n              <br />\n              <span className = 'timeStamp'> {this.renderTimestamp(notifications[i].timestamp)} </span>\n              <div>\n              <Button\n              type ='text'\n              shape = 'circle'\n              className = 'deleteButton'\n              onClick = {()=> this.onDeleteNotification(notifications[i].id) }> X </Button>\n              </div>\n          </h4>\n        </li>\n        )\n      }\n      if (notifications[i].type === 'declined_friend'){\n        notificationList.push(\n        <li className = 'notificationListContainer'>\n        <div className = 'notificationIcon'>\n        <Avatar size = {55} style ={{\n          backgroundColor: 'orangered',\n          verticalAlign: 'middle'}}\n          // icon = {<UserOutlined />}\n          src = {\"http://127.0.0.1:8000\"+notifications[i].actor.profile_picture}\n          >\n        </Avatar>\n        </div>\n          <h4 className = 'listNotificationSingle'>\n              <b>{this.capitalize(notifications[i].actor.username)} </b>\n               declined your friend request.\n               <br />\n               <span className = 'timeStamp'> {this.renderTimestamp(notifications[i].timestamp)} </span>\n              <div>\n              <Button\n              type ='text'\n              shape = 'circle'\n              className = 'deleteButton'\n              onClick = {()=> this.onDeleteNotification(notifications[i].id) }> X </Button>\n              </div>\n          </h4>\n        </li>\n        )\n      }\n      if (notifications[i].type === 'send_friend_event_sync'){\n        // ACCEPTS: works\n          // Bascially when you accept, it will send a notification to to the\n          // orignal sender saying that you accept the event sync and then it wll\n          // let the orginal sender pick a time\n          // This will also delete the event in the backend\n        // DECLINE: works\n          // When you decline, it will send a notificaiton to the orignal send\n          // saying that you declined the event sync\n          // This will also delete the event in the backend\n\n        notificationList.push(\n        <li className = 'notificationListContainer'>\n        <div className = 'notificationIcon'>\n        <Avatar size = {55} style ={{\n          backgroundColor: 'limegreen',\n          verticalAlign: 'middle'}}\n          // icon = {<UserOutlined />}\n          src = {\"http://127.0.0.1:8000\"+notifications[i].actor.profile_picture}\n          >\n        </Avatar>\n        </div>\n          <h4 className = 'listNotification'>\n\n            {dateFns.differenceInCalendarDays(\n              new Date(notifications[i].maxDate),new Date(notifications[i].minDate)) === 1\n              ? <span className ='notificationWords'>\n              <b>{this.capitalize(notifications[i].actor.username)} </b>\n              wants to event sync with you for: <b>\n              {dateFns.format(\n                dateFns.addHours(new Date(notifications[i].minDate),7), 'MM/dd/yyyy')}\n              </b>\n              </span>\n\n              :\n\n              <span className ='notificationWords'>\n              <b>{this.capitalize(notifications[i].actor.username)} </b>\n              wants to event sync with you from: <b>\n              {dateFns.format(\n                dateFns.addHours(new Date(notifications[i].minDate),7), 'MM/dd/yyyy')}\n                -\n                {dateFns.format(\n                  dateFns.addHours(new Date(notifications[i].maxDate),7), 'MM/dd/yyyy')}\n              </b>\n              </span>\n            }\n\n            <br />\n            <span className = 'timeStamp'> {this.renderTimestamp(notifications[i].timestamp)} </span>\n\n            <div className = 'pickEventSyncButton'>\n            <Button\n            className = 'acceptButton'\n            type =\"primary\"\n            onClick = {()=> this.onEventSyncAccept(\n              notifications[i].recipient,\n              notifications[i].actor.username,\n              notifications[i].minDate,\n              notifications[i].maxDate\n            )}> Accept</Button>\n            <Button\n            type =\"priamry\"\n            className = 'declineButton'\n            onClick = {()=> this.onEventSyncDecline(\n              notifications[i].recipient,\n              notifications[i].actor.username,\n              notifications[i].minDate,\n              notifications[i].maxDate\n            )}> Decline </Button>\n            </div>\n            <Button type ='text'\n             shape = 'circle'\n             className = 'deleteButton'\n             onClick = {()=> this.onDeleteNotification(notifications[i].id) }>\n             X </Button>\n          </h4>\n        </li>\n        )\n      }\n      if (notifications[i].type === 'declined_event_sync'){\n        // This event pretty much shows the original user that the recipient\n        // that you have decline the event\n        // WORKS\n        notificationList.push(\n        <li className = 'notificationListContainer'>\n        <div className = 'notificationIcon'>\n        <Avatar\n        size = {55}\n        style ={{\n          backgroundColor: 'darkgrey',\n          verticalAlign: 'middle'}}\n          // icon = {<UserOutlined />}\n          src = {\"http://127.0.0.1:8000\"+notifications[i].actor.profile_picture}\n          >\n        </Avatar>\n        </div>\n          <h4 className = 'listNotificationSingle'>\n              <b>{this.capitalize(notifications[i].actor.username)} </b>\n               declined your event sync request.\n               <br />\n               <span className = 'timeStamp'> {this.renderTimestamp(notifications[i].timestamp)} </span>\n              <div>\n              <Button\n              type ='text'\n              shape = 'circle'\n              className = 'deleteButton'\n              onClick = {()=> this.onDeleteNotification(notifications[i].id) }> X </Button>\n              </div>\n          </h4>\n        </li>\n        )\n      }\n      if (notifications[i].type === 'accepted_event_sync'){\n        // This will be sent to the orignal sender when the recipient when they choose\n        // to accept the event sync. This notification will open up the\n        // pick event sync so that you can pick the date for the event\n        // WORKS\n        notificationList.push(\n        <li className = 'notificationListContainer'>\n        <div className = 'notificationIcon'>\n        <Avatar size = {55} style ={{\n          backgroundColor: 'fuchsia',\n          verticalAlign: 'middle'}}\n          // icon = {<UserOutlined />}\n          src = {\"http://127.0.0.1:8000\"+notifications[i].actor.profile_picture}\n\n          >\n        </Avatar>\n        </div>\n          <h4 className = 'listNotification'>\n\n              {dateFns.differenceInCalendarDays(\n                new Date(notifications[i].maxDate), new Date(notifications[i].minDate)) === 1\n               ?\n\n              <span className = 'notificationWords'>\n              <b>{this.capitalize(notifications[i].actor.username)} </b>\n               accepted your event sync request for: <b>\n              {dateFns.format(\n                dateFns.addHours(new Date(notifications[i].minDate),7), 'MM/dd/yyyy')}\n              </b>\n              </span>\n\n              :\n\n              <span className = 'notificationWords'>\n              <b>{this.capitalize(notifications[i].actor.username)} </b>\n               accepted your event sync request from: <b>\n              {dateFns.format(\n                dateFns.addHours(new Date(notifications[i].minDate),7), 'MM/dd/yyyy')}\n                -\n              {dateFns.format(\n                dateFns.addHours(new Date(notifications[i].maxDate),7), 'MM/dd/yyyy')}\n              </b>\n              </span>\n\n            }\n\n\n\n              <br />\n              <span className = 'timeStamp'> {this.renderTimestamp(notifications[i].timestamp)} </span>\n\n              <div className = 'pickEventSyncButton'>\n              <Button\n              type = 'primary'\n              style = {{\n                width: '200px',\n                height: '20px'\n              }}\n              // Start here tomorrow\n              onClick = {() => this.props.openPickEventSyncModal(\n                notifications[i].recipient,\n                notifications[i].actor,\n                notifications[i].minDate,\n                notifications[i].maxDate,\n                notifications[i].id,\n              )}> Pick Date </Button>\n              </div>\n              <Button\n              type ='text'\n              shape = 'circle'\n              className = 'deleteButton'\n              onClick = {()=> this.onDeleteNotification(notifications[i].id) }>\n               X </Button>\n\n          </h4>\n\n        </li>\n        )\n      }\n      if (notifications[i].type === 'new_event'){\n        notificationList.push(\n        <li className = 'notificationListContainer'>\n        <div className = 'notificationIcon'>\n        <Avatar size = {55} style ={{\n          backgroundColor: 'orangered',\n          verticalAlign: 'middle'}}\n          // icon = {<UserOutlined />}\n          src = {\"http://127.0.0.1:8000\"+notifications[i].actor.profile_picture}\n\n          >\n        </Avatar>\n        </div>\n          <h4 className = 'listNotificationSingle'>\n              <b>{this.capitalize(notifications[i].actor.username)} </b>\n              set an event on {dateFns.format(new Date(notifications[i].minDate), 'MMM d, yyyy')} at {dateFns.format(new Date(notifications[i].minDate), 'h a')}\n              <br />\n              <span className = 'timeStamp'> {this.renderTimestamp(notifications[i].timestamp)} </span>\n              <div>\n              <Button\n              type ='text'\n              shape = 'circle'\n              className = 'deleteButton'\n              onClick = {()=> this.onDeleteNotification(notifications[i].id) }>\n              X </Button>\n              </div>\n          </h4>\n        </li>\n        )\n      }\n      if(notifications[i].type === 'like_notification'){\n        notificationList.push(\n          <li className = 'notificationListContainer'>\n            <div className = 'notificationIcon'>\n            <Avatar size = {55} style = {{\n              backgroundColor: 'purple',\n              verticalAlign: 'middle'}}\n              // icon = {<UserOutlined />}\n              src = {\"http://127.0.0.1:8000\"+notifications[i].actor.profile_picture}\n              >\n            </Avatar>\n            </div>\n            <h4 className = 'listNotificationSingle'>\n                <b>{this.capitalize(notifications[i].actor.username)} </b>\n                 liked your post.\n                 <br />\n                 <span className = 'timeStamp'> {this.renderTimestamp(notifications[i].timestamp)} </span>\n                <div>\n                <Button\n                type ='text'\n                shape = 'circle'\n                className = 'deleteButton'\n                onClick = {()=> this.onDeleteNotification(notifications[i].id) }> X </Button>\n                </div>\n            </h4>\n          </li>\n        )\n      } if (notifications[i].type === 'comment_notification'){\n        notificationList.push(\n          <li className = 'notificationListContainer'>\n            <div className = 'notificationIcon'>\n            <Avatar size = {55} style = {{\n              backgroundColor: 'purple',\n              verticalAlign: 'middle'}}\n              // icon = {<UserOutlined />}\n              src = {\"http://127.0.0.1:8000\"+notifications[i].actor.profile_picture}\n\n              >\n            </Avatar>\n            </div>\n            <h4 className = 'listNotificationSingle'>\n                <b>{this.capitalize(notifications[i].actor.username)} </b>\n                 commented on your post.\n                 <br />\n                 <span className = 'timeStamp'> {this.renderTimestamp(notifications[i].timestamp)} </span>\n                <div>\n                <Button\n                type ='text'\n                shape = 'circle'\n                className = 'deleteButton'\n                onClick = {()=> this.onDeleteNotification(notifications[i].id) }> X </Button>\n                </div>\n            </h4>\n          </li>\n        )\n      } if(notifications[i].type === 'follow_notification'){\n        notificationList.push(\n          <li className = 'notificationListContainer' onClick = {() => this.onProfileClick(notifications[i].actor.username)}>\n            <div className = 'notificationIcon'>\n            <Avatar size = {55} style = {{\n              backgroundColor: 'purple',\n              verticalAlign: 'middle'}}\n              // icon = {<UserOutlined />}\n              src = {\"http://127.0.0.1:8000\"+notifications[i].actor.profile_picture}\n\n              >\n            </Avatar>\n            </div>\n            <h4 className = 'listNotificationSingle'>\n                <b>{this.capitalize(notifications[i].actor.username)} </b>\n                 followed you.\n                 <br />\n                 <span className = 'timeStamp'> {this.renderTimestamp(notifications[i].timestamp)} </span>\n                <div>\n                <Button\n                type ='text'\n                shape = 'circle'\n                className = 'deleteButton'\n                onClick = {()=> this.onDeleteNotification(notifications[i].id) }> X </Button>\n                </div>\n            </h4>\n          </li>\n        )\n      } if(notifications[i].type === \"shared_event\"){\n        notificationList.push(\n          <li\n          onClick = {() => this.onEventPageClick(notifications[i].eventId)}\n          className = \"notificationListContainer\">\n            <div className = 'notificationIcon'>\n              <Avatar size = {55} style = {{\n                backgroundColor: 'purple',\n                verticalAlign: 'middle'}}\n                // icon = {<UserOutlined />}\n                src = {\"http://127.0.0.1:8000\"+notifications[i].actor.profile_picture}\n\n                >\n              </Avatar>\n            </div>\n            <h4 className = 'listNotificationSingle'>\n                <b>{this.capitalize(notifications[i].actor.username)} </b>\n                 shared an event with you on <b>{dateFns.format(new Date(notifications[i].minDate), 'MMM d, yyyy')} </b> at\n                 <b> {dateFns.format(new Date(notifications[i].minDate), 'hh:mm aaaa')}.</b>\n                 <br />\n                 <span className = 'timeStamp'> {this.renderTimestamp(notifications[i].timestamp)} </span>\n                <div>\n                <Button\n                type ='text'\n                shape = 'circle'\n                className = 'deleteButton'\n                onClick = {()=> this.onDeleteNotification(notifications[i].id) }> X </Button>\n                </div>\n            </h4>\n\n          </li>\n        )\n      } if(notifications[i].type === \"accepted_shared_event\"){\n        notificationList.push(\n          <li\n          onClick = {() => this.onEventPageClick(notifications[i].eventId)}\n          className = \"notificationListContainer\">\n            <div className = 'notificationIcon'>\n              <Avatar size = {55} style = {{\n                backgroundColor: 'purple',\n                verticalAlign: 'middle'}}\n                // icon = {<UserOutlined />}\n                src = {\"http://127.0.0.1:8000\"+notifications[i].actor.profile_picture}\n\n                >\n              </Avatar>\n            </div>\n            <h4 className = 'listNotificationSingle'>\n                <b>{this.capitalize(notifications[i].actor.username)} </b>\n                 accepted shared an event with you on <b>{dateFns.format(new Date(notifications[i].minDate), 'MMM d, yyyy')} </b> at\n                 <b> {dateFns.format(new Date(notifications[i].minDate), 'hh:mm aaaa')}.</b>\n                 <br />\n                 <span className = 'timeStamp'> {this.renderTimestamp(notifications[i].timestamp)} </span>\n                <div>\n                <Button\n                type ='text'\n                shape = 'circle'\n                className = 'deleteButton'\n                onClick = {()=> this.onDeleteNotification(notifications[i].id) }> X </Button>\n                </div>\n            </h4>\n\n          </li>\n        )\n      } if(notifications[i].type === \"declined_shared_event\"){\n        notificationList.push(\n          <li\n          onClick = {() => this.onEventPageClick(notifications[i].eventId)}\n          className = \"notificationListContainer\">\n            <div className = 'notificationIcon'>\n              <Avatar size = {55} style = {{\n                backgroundColor: 'purple',\n                verticalAlign: 'middle'}}\n                // icon = {<UserOutlined />}\n                src = {\"http://127.0.0.1:8000\"+notifications[i].actor.profile_picture}\n\n                >\n              </Avatar>\n            </div>\n            <h4 className = 'listNotificationSingle'>\n                <b>{this.capitalize(notifications[i].actor.username)} </b>\n                 declined shared an event with you on <b>{dateFns.format(new Date(notifications[i].minDate), 'MMM d, yyyy')} </b> at\n                 <b> {dateFns.format(new Date(notifications[i].minDate), 'hh:mm aaaa')}.</b>\n                 <br />\n                 <span className = 'timeStamp'> {this.renderTimestamp(notifications[i].timestamp)} </span>\n                <div>\n                <Button\n                type ='text'\n                shape = 'circle'\n                className = 'deleteButton'\n                onClick = {()=> this.onDeleteNotification(notifications[i].id) }> X </Button>\n                </div>\n            </h4>\n\n          </li>\n        )\n      } if(notifications[i].type === \"edited_share_event\"){\n        notificationList.push(\n          <li\n          onClick = {() => this.onEventPageClick(notifications[i].eventId)}\n          className = \"notificationListContainer\">\n            <div className = 'notificationIcon'>\n              <Avatar size = {55} style = {{\n                backgroundColor: 'purple',\n                verticalAlign: 'middle'}}\n                // icon = {<UserOutlined />}\n                src = {\"http://127.0.0.1:8000\"+notifications[i].actor.profile_picture}\n\n                >\n              </Avatar>\n            </div>\n            <h4 className = 'listNotificationSingle'>\n                <b>{this.capitalize(notifications[i].actor.username)} </b>\n                 edited a shared event with you on <b>{dateFns.format(new Date(notifications[i].minDate), 'MMM d, yyyy')} </b> at\n                 <b> {dateFns.format(new Date(notifications[i].minDate), 'hh:mm aaaa')}.</b>\n                 <br />\n                 <span className = 'timeStamp'> {this.renderTimestamp(notifications[i].timestamp)} </span>\n                <div>\n                <Button\n                type ='text'\n                shape = 'circle'\n                className = 'deleteButton'\n                onClick = {()=> this.onDeleteNotification(notifications[i].id) }> X </Button>\n                </div>\n            </h4>\n\n          </li>\n        )\n      } if(notifications[i].type === 'pending_social_event'){\n        const pendingEventObj = {\n          title: notifications[i].pendingEventTitle,\n          content: notifications[i].pendingEventContent,\n          location: notifications[i].pendingEventLocation,\n          curId: notifications[i].pendingEventCurId,\n          ownerId: notifications[i].pendingCalendarOwnerId,\n          eventDate: notifications[i].pendingEventDate,\n          eventStart: notifications[i].pendingEventStartTime,\n          eventEnd: notifications[i].pendingEventEndTime\n        }\n\n        notificationList.push(\n          <li\n          onClick = {() =>this.onOpenPendingEvent(\n            pendingEventObj,\n            notifications[i].actor.username,\n            notifications[i].actor.profile_picture,\n            notifications[i].id\n           )}\n          className = 'notificationListContainer'>\n          <div className = 'notificationIcon'>\n            <Avatar size = {55} style ={{\n              verticalAlign: 'middle'}}\n              // icon = {<UserOutlined />}\n              src = {\"http://127.0.0.1:8000\"+notifications[i].actor.profile_picture}\n              >\n            </Avatar>\n          </div>\n            <h4 className = 'listNotificationSingle'>\n                <b>{this.capitalize(notifications[i].actor.username)} </b>\n                wants to add an event to your social calendar on {notifications[i].pendingEventDate}. Click to check it out!\n                <br />\n                <span className = 'timeStamp'> {this.renderTimestamp(notifications[i].timestamp)} </span>\n                <div>\n                <Button\n                type ='text'\n                shape = 'circle'\n                className = 'deleteButton'\n                onClick = {()=> this.onDeleteNotification(notifications[i].id) }> X </Button>\n                </div>\n            </h4>\n          </li>\n        )\n      } if(notifications[i].type === 'pending_social_pics'){\n        // This notification be similar to that of the penidng event but now it has pictures\n        notificationList.push(\n\n        <li\n        onClick = {() => this.onOpenPendingPics(\n          notifications[i].get_pendingImages,\n          notifications[i].actor.username,\n          notifications[i].actor.profile_picture,\n          notifications[i].id,\n          notifications[i].pendingEventDate,\n          notifications[i].actor.id\n         )}\n        className = 'notificationListContainer'>\n        <div className = 'notificationIcon'>\n          <Avatar size = {55} style ={{\n            verticalAlign: 'middle'}}\n            // icon = {<UserOutlined />}\n            src = {\"http://127.0.0.1:8000\"+notifications[i].actor.profile_picture}\n\n            >\n          </Avatar>\n        </div>\n          <h4 className = 'listNotificationSingle'>\n              <b>{this.capitalize(notifications[i].actor.username)} </b>\n              wants to add pictures to your social calendar on {notifications[i].pendingEventDate}. Click to check it out!\n              <br />\n              <span className = 'timeStamp'> {this.renderTimestamp(notifications[i].timestamp)} </span>\n              <div>\n              <Button\n              type ='text'\n              shape = 'circle'\n              className = 'deleteButton'\n              onClick = {()=> this.onDeleteNotification(notifications[i].id) }> X </Button>\n              </div>\n          </h4>\n        </li>\n      )}\n\n\n    }\n    return (\n      <List\n      // getPopupContainer={() => document.getElementById(\"position\")}\n      style = {{\n        position: 'fixed',\n        right: '20px',\n        bottom : '63px'\n      }}\n      onClick = {this.handleMenuClick}>\n      <div\n      className = 'notificationHeader'\n      >\n        <h2 className = 'notificationWord'> Notifications </h2>\n      </div>\n      <div className = 'notificationScroll'>\n      { notificationList.length === 0 ?\n        <li\n        style = {{\n          textAlign: 'center'\n        }}\n        > You have no notifications </li>\n        :\n        notificationList}\n      </div>\n      </List>\n    )\n  }\n\n\n\n  render() {\n    console.log(this.props)\n    const menu = (\n      <Menu onClick={this.handleMenuClick}>\n        <Menu.Item key=\"1\">Clicking me will not close the menu.</Menu.Item>\n        <Menu.Item key=\"2\">Clicking me will not close the menu also.</Menu.Item>\n        <Menu.Item key=\"3\">Clicking me will close the menu</Menu.Item>\n      </Menu>\n    );\n\n    return(\n      <div>\n      <Dropdown\n        overlay={this.renderNotifications()}\n        onVisibleChange={this.handleVisibleChange}\n        visible={this.state.visible}\n        placement = 'bottomRight'\n        trigger = {['click']}\n      >\n\n        <a className=\"ant-dropdown-link\" href=\"#\">\n        <i class=\"far fa-bell\" aria-hidden=\"true\"></i>\n\n        </a>\n\n      </Dropdown>\n      <PendingSocialEventModal\n      visible = {this.state.showPendingEvent}\n      onClose = {this.onClosePendingEvent}\n      pendingEvent = {this.state.pendingEvent}\n      selectedUser = {this.state.selectedUser}\n      userprofile = {this.state.selectedUserProfile}\n      location = {this.props.location}\n      notificationId = {this.state.notificationId}\n      deleteNotification = {this.onDeleteNotification}\n      />\n\n      <PendingSocialPicsModal\n      visible = {this.state.showPendingPics}\n      onClose = {this.onClosePendingPics}\n      pendingPictures = {this.state.pendingPictures}\n      selectedUser = {this.state.selectedUser}\n      userprofile = {this.state.selectedUser}\n      location = {this.props.location}\n      ownerId = {this.props.curId}\n      notificationId = {this.state.notificationId}\n      eventDate = {this.state.eventDate}\n      curId = {this.state.selectedUserId}\n      deleteNotification = {this.onDeleteNotification}\n      />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    showNotification: state.notifications.showNotification,\n    curId: state.auth.id\n\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  // most of the other props are in the Layouts\n  return {\n    deleteNotification: notificationId => dispatch(notificationsActions.deleteNotification(notificationId)),\n    openNotification: () => dispatch(notificationsActions.openNotification())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NotificationsDropDown);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EventPage/DetailEditEventForm.js",["1075","1076","1077","1078","1079","1080","1081","1082","1083","1084","1085","1086","1087","1088","1089","1090","1091"],"import React from 'react';\nimport * as dateFns from 'date-fns';\nimport moment from 'moment';\nimport { connect } from \"react-redux\";\nimport { Form } from '@ant-design/compatible';\nimport { ReactBingmaps } from 'react-bingmaps';\nimport { Avatar, DatePicker, TimePicker, Button, Input, Select, Radio, Drawer } from 'antd';\nimport { Field, reduxForm, formValueSelector } from 'redux-form';\nimport { AimOutlined, PictureOutlined, ArrowRightOutlined, UserOutlined, SearchOutlined } from '@ant-design/icons';\n\n\n\nconst { Option } = Select;\n\nconst { TextArea } = Input\n\n\nconst validate = values => {\n  const errors = {}\n  // This is used to check if certain fields are properly checked and so it deosn't\n  // mess with the editing of events\n  console.log(values)\n  if (!values.title){\n    errors.title = \"Required\"\n  }\n  if(dateFns.isAfter(new Date(values.startDate), new Date(values.endDate))){\n    errors.endDate = 'endDate error'\n  } else if (values.repeatCondition === 'weekly' &&\n    !dateFns.isSameWeek(new Date(values.startDate), new Date(values.endDate))\n  ) {\n    errors.endDate = \"endDate error\"\n  } else if (values.repeatCondition === 'daily' &&\n    !dateFns.isSameDay(new Date(values.startDate), new Date(values.endDate))\n  ) {\n    errors.endDate = \"endDate error\"\n  }\n\n  return errors\n}\n\nconst renderField = (field) => {\n  // This is for the title and location most, but mostly for title\n\n  console.log(field.meta)\n  return (\n    <span>\n    <Input style={{width:'50%', height:'30px', fontSize:'15px'}}\n    {...field.input}\n    type = {field.type}\n    placeholder= {field.placeholder}\n    style={{display:'inline-block'}}\n    className = 'box'\n    maxLength = \"125\"\n    />\n\n    </span>\n  )\n}\n\nconst renderTextArea = (field) => {\n\n  // This is for content field\n  return (\n    <TextArea\n    {...field.input}\n    rows={4}\n    type = {field.type}\n    placeholder = {field.placeholder}\n    />\n  )\n\n}\n\nconst renderRadioSelect = (field) => {\n  // render the radio to pick normal date, weekly, or daily\n  console.log(field)\n  const options = [\n  { label: 'Non-repeating', value: 'none' },\n  { label: 'Weekly', value: 'weekly' },\n  { label: 'Daily', value: 'daily' },\n];\n\n  return (\n    <Radio.Group\n          {...field.input}\n          options={options}\n          // value={}\n          optionType=\"button\"\n        />\n  )\n}\n\nconst renderStartDate = (field) => {\n  console.log(field)\n  return (\n    <DatePicker\n    onChange = {field.input.onChange}\n    value = {field.input.value}\n    style = {{width: '110px', marginRight:'15px'}}\n    suffixIcon={<div></div>}\n    allowClear = {false}\n     />\n  )\n}\n\nconst renderStartTimeSelect = (field) => {\n  // This const will render the start time of the event\n  // So before you choose any value you want to have the field\n  // input as a value in your select... because the input value will be the value\n  // that will be return to the field when you input a value\n  // Bascially everything goes through the value first, and what ever is here inspect\n  // is just for show\n\n\n  console.log(field)\n  return (\n    <Select\n      // {...field.input}\n      style = {{width: '115px', marginRight:'15px'}}\n      onChange = {field.input.onChange}\n      value = {field.input.value}\n      className = 'timebox'>\n\n    {field.children}\n    </Select>\n  )\n}\n\nconst renderStartTime = () => {\n    // This will render the specific date selections for the tiem select\n    const timeFormat = \"hh:mm a\"\n    const time = []\n    let start = dateFns.startOfDay(new Date())\n    let startHour = dateFns.getHours(new Date())\n    let startMins = dateFns.getMinutes(new Date())\n    for (let i = 0; i< 48; i++){\n      const cloneTime = startHour + ':' + startMins\n      time.push(\n        <Option\n        key = {dateFns.format(start, timeFormat)}\n        value= {dateFns.format(start, timeFormat)} >\n        {dateFns.format(start, timeFormat)}\n        </Option>\n      )\n      start = dateFns.addMinutes(start, 30)\n    }\n    console.log(time)\n    return time\n  }\n\n  const renderFriendSelect = (field) => {\n    console.log(field.input.value)\n\n    return (\n      <Select\n        mode=\"multiple\"\n        style={{ width: '82%',\n         marginTop:'30px', }}\n\n        onChange = {field.input.onChange}\n        value = {field.input.value}\n        placeholder=\"Add friends\"\n        className = 'selectBox'\n        optionLabelProp=\"label\"\n      >\n      {field.children}\n\n      </Select>\n    )\n\n  }\n\n  const renderLocationField = (field) => {\n    return (\n      <span>\n        <Input style={{width:'50%',fontSize:'14px'}}\n        {...field.input}\n        type = {field.type}\n        placeholder= {field.placeholder}\n        className = 'box'/>\n\n      </span>\n    )\n  }\n\n  const renderEventColor = (field) => {\n    // This is just used to render the color of the event\n    return (\n      <Input\n      style = {{width: '45px', marginRight:'15px'}}\n      type = 'color'\n      className = 'reduxColor'\n      name = 'eventColor'\n      {...field.input}/>\n    )\n  }\n\n\n\n\nclass DetailEditEventForm extends React.Component{\n// This class will be similar to the redux edit event but will be more detailed\n  // For detail comments on how redux forms work, check ReduxEditEventForm\n  state = {\n    visible: false,\n    invitedList:[],\n    locationField:'Shanghai'\n\n   };\n\n  onClose = () => {\n    this.setState({\n      visible: false,\n\n    });\n  };\n\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  onInputChange = (event) => {\n            this.setState({ locationField: event.target.locationField })\n            console.log(this.state.locationField)\n  }\n\n  handleStartTimeChange = (event, value) => {\n    const { change } = this.props\n    // So this handleStartTimechange pretty much is used to automatically\n    // change the values of the endTime, the only difference between this\n    // and that of the ReactAddEventForm is that we dont need to change the\n    // startTime value just the endTime value will be affected\n\n\n    console.log(value)\n    change('startTime', value)\n\n    // Like every other time related events we have to converted all\n    let startHour = parseInt(value.substring(0,2))\n    let startMin = parseInt(value.substring(3,5))\n    let ampm = value.substring(5,8)\n    let endHour = parseInt(this.props.endTime.substring(0,2))\n    let endMin = parseInt(this.props.endTime.substring(3,5))\n    let endTime = ''\n\n    console.log(startHour)\n\n\n\n    // These if statement is used to change the startTime values to the 1-24 hour format\n    if(value.includes('PM')){\n      if(startHour !== 12 ){\n        startHour = startHour + 12\n      }\n    } else if (value.includes('AM')){\n      if(startHour === 12){\n        startHour = 0\n      }\n    }\n\n    // These if statements here is to change the end time values from 1-2 to\n    // 1-24 for the end time\n    if (this.props.endTime.includes('PM')){\n      if (endHour !==  12){\n        endHour = endHour + 12\n      }\n    } else if (this.props.endTime.includes('AM')){\n      if(endHour === 12){\n        endHour = 0\n      }\n    }\n\n    // Now this is where the comparison of the times comes in an all the senarios\n    // For this one,for times that the start hour is smaller than that of the\n    // end time you don't need to change the value because due to the redux from\n    // the value of the start time will chagne it self\n    if(startHour === endHour ){\n      if (startMin > endMin){\n        endMin = \"00\"\n        endHour = startHour + 1\n        console.log(startHour)\n        console.log(endHour)\n        if (startHour === 11 && ampm === 'AM'){\n          endTime = '12:'+endMin + ' PM'\n        } else if (startHour === 23 && ampm === \" PM\"){\n          endTime = '12:'+endMin + ' AM'\n        } else {\n          if (endHour < 10){\n            endHour = '0'+endHour\n          } else {\n             if(ampm === ' AM'){\n               endHour = endHour\n             } else if (ampm === ' PM'){\n               endHour = endHour-12\n               if (endHour < 10){\n                 endHour = '0'+endHour\n               }\n             }\n           }\n           endTime = endHour + ':'+endMin+ampm\n\n        }\n\n\n        change('endTime', endTime )\n      } else if (startMin === endMin ){\n        // This is the case where the times are identical to each other\n        // REMEMBER THAT ENDHOUR AND STARTHOUR ARE USING THE 1-24 TIME\n        console.log(startHour, endHour)\n        if (startHour === 0 && ampm === ' AM' && startMin === 0){\n          endTime = '12:30 AM'\n        } else if (startHour === 12 && ampm === ' PM' && startMin === 0){\n          endTime = '12:30 PM'\n        } else {\n          if (startMin === 30){\n            endMin = '00'\n            if (startHour === 12){\n              endHour = '01'\n              endTime = endHour + ':'+endMin+' PM'\n            } else if (startHour === 11 && ampm === ' AM'){\n                endTime =   '12:' + endMin + ' PM'\n              } else if ((startHour-12) === 11 && ampm === ' PM'){\n                endTime =  '12:' + endMin + ' AM'\n              }\n            else {\n              console.log(endHour)\n              endHour = startHour +1\n                if (endHour<10){\n                    endHour = '0'+endHour\n                } else {\n                  if(ampm === ' AM'){\n                    endHour = endHour\n                  } else if (ampm === ' PM'){\n                    endHour = endHour-12\n                    if (endHour < 10){\n                      endHour = '0'+endHour\n                    }\n                  }\n                }\n              endTime = endHour + ':' +endMin+ampm\n            }\n          } else if (startMin === 0){\n            endMin = '30'\n            console.log(ampm)\n            if (endHour<10){\n                endHour = '0'+endHour\n            } else {\n              if(ampm === ' AM'){\n                console.log('am')\n                endHour = endHour\n              } else if (ampm === ' PM'){\n                console.log('pm')\n                if (endHour === 12){\n                  endHour = 12\n                }else {\n                  endHour = endHour-12\n                  if (endHour < 10){\n                    endHour = '0'+endHour\n                  }\n                }\n              }\n            }\n            endTime = endHour + ':'+endMin +ampm\n          }\n        }\n\n        change('endTime', endTime)\n      }\n    } else if (startHour > endHour) {\n      // let startHour = parseInt(time.substring(0,2))\n      // let startMin = parseInt(time.substring(3,5))\n      if (startHour === 11 && ampm === ' AM' && startMin === 30){\n        endTime = '12:00 PM'\n      } else if (startHour === 23 && ampm === ' PM' && startMin === 30){\n        endTime = '12:00 AM'\n      } else {\n        if (startMin === 30){\n          startMin = \"00\"\n          startHour = startHour + 1\n        } else if (startMin !== 30){\n          startMin = '30'\n        }\n        if (startHour < 10){\n          startHour = '0'+startHour\n        } else{\n          if(ampm === ' AM'){\n            startHour = startHour\n          } else if (ampm === ' PM'){\n            startHour = startHour-12\n            if (startHour < 10){\n              if (startHour === 0){\n                startHour = '12'\n              } else {\n                startHour = '0'+startHour\n              }\n            }\n          }\n        }\n\n\n          endTime = startHour + ':'+startMin+ampm\n      }\n\n\n\n      change('endTime', endTime)\n    }\n\n  }\n\n  handleEndTimeChange = (event) => {\n    console.log(event)\n\n    const {change} = this.props\n    return (\n      console.log('endTime')\n      // change('endTime', event)\n    )\n  }\n\n  handleReoccuringChange = (event) => {\n\n    // This is to handle the change between how much the event is gonna repeated\n     const { change } = this.props\n\n     change('repeatCondition', event.target.value)\n     console.log(this.props)\n\n  }\n\n\n\n  onRed = () => {\n    let startDate = this.props.startDate\n    let endDate = this.props.endDate\n    let repeatCondition = ''\n    if (this.props.repeatCondition){\n        repeatCondition = this.props.repeatCondition\n    }\n\n    let boxcolor = false\n\n    console.log(repeatCondition)\n\n\n    if (repeatCondition === 'weekly'){\n      if(dateFns.differenceInDays(startDate, endDate) > 7){\n        boxcolor = true\n      }\n    }\n\n\n    if (dateFns.isAfter(new Date(startDate),new Date(endDate))){\n      boxcolor = true\n    }\n\n    return boxcolor\n  }\n\n\n  renderEndDate = (field) => {\n    console.log(field.meta)\n    return (\n      <DatePicker\n      onChange = {field.input.onChange}\n      value = {field.input.value}\n      style = {{width: '110px'}}\n      suffixIcon={<div></div>}\n      allowClear = {false}\n      // className = {` ${this.onRed() ? 'datePicker' : ''}`}\n      />\n    )\n  }\n\n  onStartDateChange = (event, value) => {\n    const { change } = this.props\n\n    // So this is where the end Date will be changed if the startDate or endDate\n    // seems to be ahead of the endDate\n    console.log(value)\n    if (dateFns.isAfter(new Date(value),new Date(this.props.endDate))){\n      change('endDate', value)\n    }\n  }\n\n  renderShareListSelect = () => {\n    if(this.props.friendList !== undefined){\n      const friendList = this.props.friendList\n      console.log(friendList)\n      let shareOptions = []\n\n      for (let i = 0; i< friendList.length; i++ ){\n        shareOptions.push(\n\n          <Option value = {friendList[i].username}\n          label = {\n            <div style={{padding:'3px'}}>\n            <Avatar size={15} style={{marginRight:'10px', marginBottom:'5px'}} src= {'http://127.0.0.1:8000'+friendList[i].profile_picture} />\n\n            <span>{this.capitalize(friendList[i].first_name)+\" \"+this.capitalize(friendList[i].last_name)}</span>\n            </div>\n        }>\n            <div style={{padding:'10px'}}>\n              <Avatar\n                style={{marginRight:'10px'}}\n                size=\"small\"\n                src={'http://127.0.0.1:8000'+friendList[i].profile_picture}/>\n              <span>\n                {this.capitalize(friendList[i].first_name)+\" \"+this.capitalize(friendList[i].last_name)}\n                <br/>\n                <div\n                  class=\"headerPostText\"\n                  style={{marginLeft:'35px'}}\n                >\n                  {\"@\"+friendList[i].username}\n                </div>\n              </span>\n            </div>\n\n          </Option>\n        )\n      }\n\n      return shareOptions\n    }\n  }\n\n\n\n  renderEndTimeSelect = () => {\n    console.log(this.props.startTime)\n\n    if (this.props.startTime !== undefined ){\n      // So basically the way I am making this will be the same way I made the\n      // date pick in the addeventform. But instead of using state, we will use\n      // redux state\n      const baseTime = renderStartTime()\n      let endTime = []\n\n      let setHour = ''\n      let setMin = ''\n      // You will be using setHour and setMin in order to compare to the\n      // times in the baseTime so you will know which time to put inin the endTime\n\n      // In order to compare, you have to convert all the tiems into the 1-24 hour time\n      if (this.props.startTime.includes(\"PM\")){\n        setHour = parseInt(this.props.startTime.substring(0,2))\n        setMin = parseInt(this.props.startTime.substring(3,5))\n        if (setHour !== 12 ){\n          setHour = setHour + 12\n        }} else if (this.props.startTime.includes(\"AM\")){\n          setHour = parseInt(this.props.startTime.substring(0,2))\n          setMin = parseInt(this.props.startTime.substring(3,5))\n          if (setHour === 12){\n            setHour = 0\n          }\n        }\n\n        // Now we will run through the basetimes and then convert them to\n        // the 1-24 hour format the from there compare what needs date is put into the\n        // end date and what date does not get put in there\n      for( let i = 0; i< baseTime.length; i++){\n       if(baseTime[i].key.includes('PM')){\n         let hour = parseInt(baseTime[i].key.substring(0,2))\n         if (hour !== 12){\n           hour = hour+12\n         }\n         const min = baseTime[i].key.substring(3,5)\n         if (setHour < hour){\n           endTime.push(\n            <Option key = {baseTime[i].key}>{baseTime[i].key}</Option>\n          )} else if (setHour === hour){\n            if(setMin < min){\n              endTime.push(\n                <Option key = {baseTime[i].key}>{baseTime[i].key}</Option>\n              )\n            }\n          }\n       } else if (baseTime[i].key.includes(\"AM\")) {\n         let hour = parseInt(baseTime[i].key.substring(0,2))\n         if (hour === 12){\n           hour = 0\n         }\n         const min = baseTime[i].key.substring(3,5)\n         if( setHour < hour ) {\n           endTime.push(\n             <Option key = {baseTime[i].key}>{baseTime[i].key}</Option>\n          )} else if (setHour === hour){\n            if (setMin < min){\n              endTime.push(\n                <Option key = {baseTime[i].key}>{baseTime[i].key}</Option>\n              )\n            }\n          }\n        }\n      }\n      return (endTime)\n    }\n  }\n\n\n  onEditClick = () => {\n    // This will activate the edit so that you can start editing events\n    this.setState({\n      visible: true\n    })\n  }\n\n  onCancelEventClick = () => {\n    this.setState({\n      visible: false\n    })\n  }\n\n\n  render(){\n    const friendList = this.props.friendList\n    console.log(this.props)\n    console.log(this.state)\n\n\n    const {handleSubmit, pristine, invalid, reset} = this.props;\n\n    let eventType = \"\"\n    let eventId = \"\"\n    let username = \"\"\n    let eventHostId = \"\"\n    if(this.props.info.host){\n      username = this.props.info.host.username\n      eventHostId = this.props.info.host.id\n    }\n    if(this.props.friends){\n      if(this.props.friends.length > 0){\n        eventType = \"shared\"\n      } else {\n        eventType = \"single\"\n      }\n\n    }\n    if(this.props.info.id){\n      eventId = this.props.info.id\n    }\n\n\n    console.log(eventId)\n\n    return(\n      <div>\n\n        <div className = 'editEventButtonContainer'>\n          {\n            eventHostId === this.props.userId ?\n\n            <div>\n              <div\n              onClick={() => this.onEditClick()}\n              >\n              <i class=\"fas fa-pen\" ></i>\n              </div>\n            </div>\n\n            :\n\n            <div></div>\n\n          }\n\n        </div>\n\n      <Drawer\n          title=\"Edit Event\"\n          width={500}\n          visible={this.state.visible}\n          onClose={this.onClose}\n\n          bodyStyle={{ paddingBottom: 80 }}\n          footer={\n            <div>{ this.props.addEvent ?\n              <div className = 'reduxButton' style={{padding:'10px'}}>\n              <Button\n              onClick = {reset}\n              >\n              Clear\n              </Button>\n              <Button\n              type = 'primary'\n              onClick = {handleSubmit}\n              style = {{left: '10px', fontSize: '15px'}}\n              disabled = {pristine || invalid || this.onRed()}\n              >Add</Button>\n              </div>\n\n              :\n\n              <div style={{float:'right', marginRight:'50px'}}>\n              <Button\n              onClick = {() => this.props.onDelete(eventId, eventType)}\n              >\n              Delete\n              </Button>\n              <Button\n              type = 'primary'\n              onClick = {handleSubmit}\n              style = {{left: '20px', fontSize: '15px'}}\n              disabled = {pristine || invalid || this.onRed()}\n              >Update</Button>\n              </div>\n\n             }</div>\n\n\n           }>\n           <div class=\"hideScroll\">\n\n            <div class = 'reduxTitle'>\n              <Button\n                style={{float:'left', marginRight:'15px', display:'inline-block'}} type=\"primary\" shape=\"circle\" size={'large'}>\n                {this.props.dayNum}\n              </Button>\n              <Field\n              name = 'title'\n              component= {renderField}\n              type= 'text'\n              placeholder = 'Title'\n\n              />\n\n\n            </div>\n\n            <div style={{marginLeft:'50px', marginBottom:'15px'}}>\n              <Field\n              name = 'repeatCondition'\n              component = {renderRadioSelect}\n              onChange ={this.handleReoccuringChange}\n              />\n            </div>\n\n            <div style={{display:'flex', height:'30px', width:'600px'}} className = 'pointerEvent outerContainerPeople'>\n              <div class=\"innerContainerPeople\">\n                <i style={{marginLeft:'10px', marginRight:'25px'}}  class=\"fas fa-clock\"></i>\n\n                     <Field\n                       class=\"pointerEvent\"\n                       name = 'startDate'\n                       component = {renderStartDate}\n                       onChange = {this.onStartDateChange}\n                       type = 'date'\n                     />\n                   {\n                     /*\n                     <Field\n                      name = 'endDate'\n                      component = {this.renderEndDate}\n                      onChange = {this.handleEndTimeChange}\n                      type = 'date'\n                    />\n                    */\n                  }\n\n\n                   <Field\n                     style={{display: 'inline-block',float: 'left'}}\n                     name = 'startTime'\n                     component = {renderStartTimeSelect}\n                     onChange = {this.handleStartTimeChange}\n                     >\n                     {renderStartTime()}\n                   </Field>\n\n                   <Field\n                     style={{display: 'inline-block', marginRight:'15px'}}\n                     name = 'endTime'\n                     onChange = {this.handleEndTimeChange}\n                     component = {renderStartTimeSelect}\n                     >\n                     {this.renderEndTimeSelect()}\n                   </Field>\n              </div>\n            </div>\n\n\n\n            {/* need to implement redux form to people */}\n            <div>\n\n              <i style={{marginLeft:'10px', marginRight:'21px'}} class=\"fas fa-user-friends\"></i>\n              <Field\n              name = 'friends'\n              type='text'\n              onChange = {this.handleFriendChange}\n              component = {renderFriendSelect}\n              placeholder = 'Title'\n              >\n                {this.renderShareListSelect()}\n              </Field>\n\n\n              {/*<Input style={{width:'250px', marginBottom:'15px'}} placeholder=\"Add People\" prefix={<SearchOutlined />} /> */}\n            </div>\n\n\n            <br />\n            <div className  = 'reduxContent'>\n            <i class=\"fas fa-align-justify\" style={{marginLeft:'10px', marginRight:'25px', display: \"inline\"}}></i>\n\n              <Field\n              name = 'content'\n              component= {renderTextArea}\n              type= 'text'\n              placeholder = 'Description'\n              />\n            </div>\n\n            {/* location */}\n            <div style={{height:'50px'}} className = 'outerContainerPeople'>\n              <div class=\"innerContainerPeople\">\n                <i class=\"fas fa-globe-americas\"  style={{marginLeft:'10px', marginRight:'25px'}} ></i>\n                <Field\n                  name = 'location'\n                  placeholder=\"Location\"\n                  component= {renderLocationField}\n                  type= 'text'\n                />\n\n              <AimOutlined style={{marginLeft:'15px', fontSize:'15px', marginRight:'15px'}} className = 'aim'/>\n                <Field\n                    name = 'eventColor'\n                    component = {renderEventColor}\n                    type = 'text'\n                />\n            </div>\n\n            {/*\n            <div className = \"noMap\">\n                <div class=\"noMapFrame\">\n                <PictureOutlined />\n                <br />\n                <span> No Location </span>\n                </div>\n            </div>\n            */}\n\n\n\n            <div style={{marginBottom:'100px'}}></div>\n\n            {/*\n            <div class=\"mapEventCard\" style={{height:300, float:'left',  marginTop:100}}>\n              <p style={{fontSize:'20px', color:'black'}}\n                className=\"eventDetails\"> Location </p>\n              <div style={{height:'100px'}}>\n\n              </div>\n\n\n\n            </div>\n            */}\n\n\n\n            </div>\n\n\n\n\n\n\n          </div>\n        </Drawer>\n\n      </div>\n\n    )\n  }\n}\n\nDetailEditEventForm = reduxForm({\n  form: \"detailEventEdit\",\n  enableReinitialize: true,\n  validate //validate the fields to make sure they are correct\n}) (DetailEditEventForm);\n\nconst selector = formValueSelector(\"detailEventEdit\");\n\nexport default connect(state => ({\n  edit: selector(state, 'edit'),\n  title: selector(state, 'title'),\n  friends: selector(state, 'friends'),\n  content: selector (state, 'content'),\n  location: selector (state, 'location'),\n  startTime: selector(state, 'startTime'),\n  endTime: selector(state, 'endTime'),\n  startDate: selector(state, 'startDate'),\n  endDate: selector(state, 'endDate'),\n  repeatCondition: selector(state, 'repeatCondition')\n}))(DetailEditEventForm);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/UserEventTabFolder/UserEventList.js",["1092","1093"],"import React from 'react';\nimport './UserEventList.css';\nimport {PictureOutlined } from '@ant-design/icons';\nimport * as dateFns from 'date-fns';\nimport {Avatar} from 'antd';\nimport Liking from \"../NewsfeedItems/Liking\";\nimport userIcon from '../../components/images/user.png';\nimport ExploreWebSocketInstance from '../../exploreWebsocket';\n\n\n\nclass UserEventList extends React.Component{\n\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  sendJoinUserEvent = (userId, ownerId, eventId) => {\n    // This will be used to send the userId and the eventid ot the\n    // websocket\n    // The userId will be the person wanting to join the event\n    console.log(userId, eventId)\n    ExploreWebSocketInstance.sendSocialEventJoinPage(userId, ownerId, eventId)\n  }\n\n  sendLeaveUserEvent = (userId, ownerId, eventId) => {\n    // This is similar to the sendJoinUserEvent, difference is that you are\n    // just leaving the event\n    ExploreWebSocketInstance.sendSocialEventLeavePage(userId, ownerId, eventId)\n\n  }\n\n  openSocialEventPage = (eventId) => {\n    // This function will open the social event page\n    this.props.history.push(\"/socialcal/event/\"+eventId)\n\n  }\n\n  dateView(date) {\n    // This will be presenting the calendar day on the modal\n    // console.log(dateFns.format(new Date(date), ''))\n    console.log(date)\n    let month = ''\n    // let day = ''\n    if (date !== ''){\n      month = dateFns.format(dateFns.addHours(new Date(date),7), 'MMM d, yyyy')\n    }\n\n    // console.log(month)\n    return (\n\n      month\n\n\n    )\n\n  }\n\n  timeFormater(time){\n    // This will change the format of the time properly to the 1-12 hour\n    console.log(time)\n    const timeList = time.split(':')\n    let hour = parseInt(timeList[0])\n    let minutes = timeList[1]\n    var suffix  = hour >= 12 ? \"PM\":\"AM\"\n\n    console.log(11%12)\n    hour = ((hour+11)%12+1)+':'+minutes+\" \"+ suffix\n    return hour\n\n  }\n\n  checkUser = (personList) => {\n    // Check if user exist in teh list and will return true or false\n    // The person list is a dicitonary of users\n    let personListId = []\n    for (let i = 0; i<personList.length; i++){\n      const userId = personList[i].id\n      personListId.push(userId)\n    }\n\n    return personListId.includes(this.props.curId)\n  }\n\n  checkDay = (eventDay, eventTime) =>{\n    // Checks if the event day and time has passed the current event date and\n    // time. If it is then it will return true if it is not the it will retunr\n    // false\n\n    console.log(eventDay, eventTime)\n    let eventDate = dateFns.addHours(new Date(eventDay), 7)\n    const timeList = eventTime.split(\":\")\n    eventDate = dateFns.addHours(eventDate, timeList[0])\n    eventDate = dateFns.addMinutes(eventDate, timeList[1])\n    console.log(eventDate)\n    return dateFns.isAfter(eventDate, new Date())\n\n  }\n\n  profileDirect = (username) => {\n    // This will direct the user to a person's profile page when they\n    // click on a person's avatar\n\n    this.props.history.push('/explore/'+username)\n  }\n\n\n\n  renderEventCells = () => {\n    console.log(this.props)\n\n    let socialEventList = []\n    if(this.props.events){\n      socialEventList = this.props.events\n    }\n\n    if(socialEventList.length !== 0){\n      var boxes = []\n      for(let i = 0; i< socialEventList.length; i++){\n        boxes.push(\n\n            <div className = {`eventContainer\n            ${this.checkDay(socialEventList[i].event_day, socialEventList[i].end_time)\n              ? \"\" : \"active\" }`}>\n            {\n              socialEventList[i].backgroundImg === null ?\n              <div className = 'noPicBox'>\n              <PictureOutlined />\n              <br />\n                <span className = 'noPicWords'> No picture </span>\n              </div>\n              :\n              <div className = 'picBox'>\n                <img\n                className = \"picBoxPic\"\n                src = {'http://127.0.0.1:8000'+socialEventList[i].backgroundImg} />\n              </div>\n            }\n\n            <div className = \"eventBoxTitle\">{this.capitalize(socialEventList[i].title)}\n            {\n\n              this.checkDay(socialEventList[i].event_day, socialEventList[i].end_time) ?\n\n                <span> </span>\n\n                :\n\n                <span className = \"endTag\"> Ended</span>\n            }\n            </div>\n\n            <div className = \"eventBoxContent\">Content: {socialEventList[i].content} </div>\n            <div className = \"eventBoxLocation\">\n            <i class=\"fas fa-map-marker-alt\"></i> {socialEventList[i].location}</div>\n            <div className = \"eventBoxDay\">\n            <i class=\"far fa-calendar\"></i> {this.dateView(socialEventList[i].event_day)}\n            </div>\n            <div className = \"eventBoxTimes\"><i class=\"far fa-clock\"></i> {this.timeFormater(socialEventList[i].start_time)} - {this.timeFormater(socialEventList[i].end_time)}</div>\n\n            <div className = \"eventBoxHost \">\n            Host: <Avatar\n              size = {30}\n              style = {{\n                cursor: \"pointer\"\n              }}\n              onClick = { () => this.profileDirect(socialEventList[i].host.username)}\n              src = {\"http://127.0.0.1:8000\"+socialEventList[i].host.profile_picture}\n            /> {this.capitalize(socialEventList[i].host.first_name)} {this.capitalize(socialEventList[i].host.last_name)}\n            </div>\n\n            <div className = \"eventBoxParticipant\">\n            <span className = \"participants\"> Participants: </span>\n            <div className = \"likeList\"> <Liking\n            history = {this.props.history}\n            like_people = {socialEventList[i].persons} /> </div>\n            </div>\n\n        {this.checkDay(socialEventList[i].event_day, socialEventList[i].end_time) ?\n            <div>\n            {\n              this.checkUser(socialEventList[i].persons) ?\n                socialEventList[i].host.id === this.props.curId ?\n                <div className = \"hostButton\">\n                  <span className = \"hostText\"> Host </span>\n                </div>\n\n                :\n\n                <div\n                onClick = {() => this.sendLeaveUserEvent(this.props.curId, this.props.ownerId, socialEventList[i].id)}\n                className = \"leaveButton\">\n                  <span className = \"leaveText\"> Leave </span>\n                </div>\n\n                :\n\n                <div\n                onClick = {() => this.sendJoinUserEvent(this.props.curId, this.props.ownerId, socialEventList[i].id)}\n                className = \"joinButton\">\n                  <span className = \"joinText\"> Join </span>\n                </div>\n\n            }\n\n\n            <div\n            onClick = {() => this.openSocialEventPage(socialEventList[i].id)}\n            className = \"viewButton\">\n              <span className = 'viewText'> View </span>\n            </div>\n            </div>\n\n            :\n\n            <div\n            onClick = {() => this.openSocialEventPage(socialEventList[i].id)}\n            className = \"viewButtonPass\">\n              <span className = 'viewText'> View </span>\n            </div>\n\n          }\n\n            </div>\n\n\n\n\n\n        )\n      }\n\n\n      return <div className = \"eventListContainer\"> {boxes} </div>\n    } else {\n      return <div> No Events </div>\n    }\n  }\n\n\n  render(){\n    console.log(this.props)\n    console.log(new Date())\n    return (\n      <div className = \"eventListTabContainer\">\n\n        {this.renderEventCells()}\n\n      </div>\n    )\n  }\n}\n\nexport default UserEventList;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/UserProfiles/FollowList.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EditCalEventForms/RemoveEventModal.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/UserProfiles/EditProfile/EditProfileForm.js",["1094","1095","1096","1097","1098","1099","1100","1101","1102","1103"],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/CurrUser/ChangeProfilePic.js",["1104","1105"],"import React from 'react';\nimport { Upload, message, Modal } from 'antd';\nimport { LoadingOutlined, PlusOutlined, InboxOutlined } from '@ant-design/icons';\nimport './EditProfile.css'\n\n\n\nconst { Dragger } = Upload;\n\n\nfunction getBase64(img, callback) {\n  console.log(img)\n  const reader = new FileReader();\n  console.log(reader)\n  reader.addEventListener('load', () => callback(reader.result));\n  reader.readAsDataURL(img);\n}\n\nfunction beforeUpload(file) {\n  const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n  if (!isJpgOrPng) {\n    message.error('You can only upload JPG/PNG file!');\n  }\n  const isLt2M = file.size / 1024 / 1024 < 2;\n  if (!isLt2M) {\n    message.error('Image must smaller than 2MB!');\n  }\n  return isJpgOrPng && isLt2M;\n}\n\n\nclass ChangeProfilePic extends React.Component{\n\n  state = {\n      loading: false,\n      imageFile: '',\n    };\n\n    handleChange = info => {\n      if (info.file.status === 'uploading') {\n        this.setState({ loading: true });\n        return;\n      }\n      if (info.file.status === 'done') {\n        console.log(info.file)\n        this.setState({\n          imageFile: info.file.originFileObj\n        })\n        // Get this url from response in real world.\n        getBase64(info.file.originFileObj, imageUrl =>\n          this.setState({\n            imageUrl,\n            loading: false,\n          }),\n        );\n      }\n    };\n\n    handleSubmit = value => {\n      // Used to clear out the modal when you click sumbit\n      this.setState({\n        loading: false,\n        imageFile:\"\",\n        imageUrl: null,\n      })\n\n      this.props.onSubmit(value)\n    }\n\n    handleCancel = () => {\n      //This will handle the cancelin gof the model. It will clear out the state\n      this.setState({\n        loading: false,\n        imageFile: \"\",\n        imageUrl: null\n      })\n\n      this.props.onCancel();\n    }\n\n    render() {\n      console.log(this.props)\n      console.log(this.state)\n\n\n      const uploadButton = (\n        <div className = 'uploadBox'>\n          {this.state.loading ? <LoadingOutlined className = 'plusOutlined' spin /> : <PlusOutlined className = 'plusOutlined'/>}\n          <div className=\"ant-upload-text\">Upload</div>\n        </div>\n      );\n      const { imageUrl } = this.state;\n      return (\n      <Modal\n      visible = {this.props.visible}\n      onCancel = {() => this.handleCancel()}\n      width = {470}\n      okText = {'Save'}\n      onOk = {() => this.handleSubmit(this.state.imageFile)}\n      >\n      <span className = 'uploadProfileText'> Upload Profile Picture </span>\n        <Upload\n          name=\"avatar\"\n          listType=\"picture-card\"\n          className=\"avatar-uploader\"\n          showUploadList={false}\n          action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\n          beforeUpload={beforeUpload}\n          onChange={this.handleChange}\n\n        >\n          {imageUrl ? <img src={imageUrl} alt=\"avatar\" style={{ width: '400px' }} /> : uploadButton}\n        </Upload>\n      </Modal>\n      );\n    }\n}\n\n\n\n\n\nexport default ChangeProfilePic;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NewsfeedItems/Liking.js",["1106","1107","1108","1109"],"import React from 'react';\nimport { Avatar, Tooltip } from \"antd\";\nimport { UserOutlined, AntDesignOutlined } from \"@ant-design/icons\";\nimport \"./NewsfeedPost.css\";\nimport UserAvatar from './UserAvatar'\n\nclass Liking extends React.Component{\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      avatarColor: \"\",\n    }\n  }\n\n\n  profileDirect = (username) => {\n      // This will direct the user to a person's profile page when they\n      // click on a person's avatar\n\n      console.log(username)\n    this.props.history.push('/explore/'+username)\n  }\n\n  render(){\n    let like_people = this.props.like_people\n    // let profilePic = ''\n    //\n    // if (this.props.data.user.profile_picture){\n    //   profilePic = 'http://127.0.0.1:8000'+this.props.data.user.profile_picture\n    // }\n    //\n    // console.log(profilePic)\n    console.log(like_people)\n    console.log(this.props)\n    // let temp=\"http://127.0.0.1:8000\"+this.props.data.post_images;\n    // let viewPersonPage=\"http://localhost:3000/explore/\"+this.props.data.user.username;\n    return (\n      <div class=\"likeCSS\">\n\n\n\n\n\n\n        <span>\n        { /* If the user is not included in the likes */}\n        {\n          (like_people.length>3)?\n          <span>\n\n            <UserAvatar  {...this.props}/>\n          </span>\n\n          :\n\n            <span>\n              {\n                (like_people.length === 0) ?\n                <span>\n\n                  <Avatar.Group>\n                    <Avatar style={{background:'white'}}/>\n                  </Avatar.Group>\n                </span>\n\n                :\n\n\n\n                <div>\n                  {\n                    (like_people.length==1)?\n                    <span>\n\n                      <Avatar.Group>\n                        <Tooltip placement=\"topLeft\" title={`${like_people[0].first_name} ${like_people[0].last_name} `}>\n                             <Avatar\n                              onClick = {() => this.profileDirect(like_people[0].username)}\n                              src={'http://127.0.0.1:8000'+like_people[0].profile_picture}/>\n                        </Tooltip>\n                      </Avatar.Group>\n                    </span>\n\n\n                    :\n                    <span>\n\n                    {\n                      (like_people.length==2)?\n\n                      <Avatar.Group>\n                        <Tooltip placement=\"topLeft\" title={`${like_people[0].first_name} ${like_people[0].last_name} `}>\n                             <Avatar\n                             onClick = {() => this.profileDirect(like_people[0].username)}\n                              src={'http://127.0.0.1:8000'+like_people[0].profile_picture}/>\n                        </Tooltip>\n\n\n\n                        <Tooltip placement=\"topLeft\" title={`${like_people[1].first_name} ${like_people[1].last_name} `}>\n                             <Avatar\n                             onClick = {() => this.profileDirect(like_people[1].username)}\n                              src={'http://127.0.0.1:8000'+like_people[1].profile_picture}/>\n                        </Tooltip>\n\n\n                        </Avatar.Group>\n\n                        :\n                        <Avatar.Group>\n\n\n                        <Tooltip placement=\"topLeft\" title={`${like_people[0].first_name} ${like_people[0].last_name} `}>\n                             <Avatar\n                             onClick = {() => this.profileDirect(like_people[0].username)}\n                             src={'http://127.0.0.1:8000'+like_people[0].profile_picture}/>\n                       </Tooltip>\n                       <Tooltip placement=\"topLeft\" title={`${like_people[1].first_name} ${like_people[1].last_name} `}>\n                          <Avatar\n                          onClick = {() => this.profileDirect(like_people[1].username)}\n                          src={'http://127.0.0.1:8000'+like_people[1].profile_picture}/>\n                      </Tooltip>\n                      <Tooltip placement=\"topLeft\" title={`${like_people[2].first_name} ${like_people[2].last_name} `}>\n                          <Avatar\n                          onClick = {() => this.profileDirect(like_people[2].username)}\n                           src={'http://127.0.0.1:8000'+like_people[2].profile_picture}/>\n                     </Tooltip>\n\n                        </Avatar.Group>\n\n\n\n                      }\n                    </span>\n\n                  }\n                  </div>\n\n\n\n              }\n            </span>\n      }\n      </span>\n\n\n\n\n      </div>\n\n    )\n  }\n}\n\n\n\nexport default Liking;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NotificationFolder/PendingSocialPicsModal.js",["1110","1111","1112","1113"],"import React from 'react';\nimport { Button, Modal, Avatar, notification } from 'antd';\nimport ExploreWebSocketInstance from '../../exploreWebsocket';\nimport './PendingEventCard.css';\nimport { authAxios } from '../../components/util';\nimport PictureCarousel from '../SocialCalendarFolder/PictureCarousel';\nimport PendingPictureCarousel from './PendingPictureCarousel';\n// This will be the modal taht opens up ot check the pictures that the person\n// wnats to post on the calendar when you click on the notificaiton\n\nclass PendingSocialPicsModal extends React.Component{\n\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n\n  onAcceptPics = () => {\n    // This function will be called when you accept the followerfriend to post pics on\n    // on your calendar. This function will be similar to the handle picture upload in\n    // the social calendar. Like that, it will make an http call for all the pics\n    // and then return an object that contains all the pics into the weboscket\n\n\n    // OwnerId will just be the current user who is approving the notification\n    let ownerId = \"\"\n    let notificationId = \"\"\n    let date = \"\"\n    let curId = \"\"\n    let pictureLen = \"\"\n    if(this.props.ownerId){\n      ownerId = this.props.ownerId\n    }\n    if(this.props.notificationId){\n      notificationId = this.props.notificationId\n    }\n    if(this.props.eventDate){\n      date = this.props.eventDate\n    }\n\n    // curId will be the person that owns the pending pictures\n    if(this.props.curId){\n      curId = this.props.curId\n    }\n    if(this.props.pendingPictures){\n      pictureLen = this.props.pendingPictures.length\n    }\n\n\n    if(this.props.pendingPictures){\n      if(this.props.location.pathname.includes(\"explore\")){\n        //  put the websocket path here becuase if you are on an explore\n        // you are on one of the explore websocket and the explore weboskcet shold\n        // work. Put another condition wher eit has to be your ussername as well\n        ExploreWebSocketInstance.sendAcceptedSocialPics(notificationId, ownerId, date, curId)\n\n\n      } else {\n        // This will be where we just put the http call because you are not\n        // on your profile calendar. So you do not need to see things in real\n        // time\n        authAxios.post(\"http://127.0.0.1:8000/mySocialCal/uploadPicture\", {\n            notificationId: notificationId,\n            ownerId: ownerId,\n            date: date,\n            curId: curId\n        })\n      }\n\n\n\n\n    }\n\n    if(this.props.notificationId){\n      this.props.deleteNotification(this.props.notificationId)\n    }\n    this.openNotification(\"bottomRight\", date, pictureLen)\n    this.props.onClose()\n\n  }\n\n  onDeclinePics = () => {\n    // This function is called when you decline the pending pic\n    // it will mostly just close the modal. Decline the event\n    // and then delete the notification\n\n    if(this.props.notificationId){\n      this.props.deleteNotification(this.props.notificationId)\n    }\n    this.openDeclineNotification(\"bottomRight\")\n    this.props.onClose()\n\n\n  }\n\n  openNotification = (placement, date, picLen) => {\n    // The info parameter will be used to add stuff into the descrption\n\n\n  notification.info({\n    message: `New Social Picture Posted`,\n    description:\n      \"You added \"+picLen+\" to your social calendar on \"+date,\n    placement,\n  });\n};\n\nopenDeclineNotification = (placement) => {\n  // This will show a small notificaiton to show that you decline a requestion\n\n\n  notification.info({\n    message: `Decline Social Picture Request`,\n    description:\n      \"You decline a social picture request.\" ,\n    placement,\n  });\n}\n\n  render(){\n\n    console.log(this.props)\n    let user = \"\"\n    let date = \"\"\n    let userprofile = \"\"\n    let imageList = []\n\n    if(this.props.selectedUser){\n      user = this.props.selectedUser\n    }\n    if(this.props.userprofile){\n      userprofile = \"http://127.0.0.1:8000\"+this.props.userprofile\n    }\n    if(this.props.pendingPictures){\n      imageList = this.props.pendingPictures\n    }\n    if(this.props.eventDate){\n      date = this.props.eventDate\n    }\n\n    console.log(date)\n\n\n\n    return (\n      <Modal\n      visible = {this.props.visible}\n      onCancel = {() => this.props.onClose()}\n      footer ={null}\n      >\n      Would you like to allow {this.capitalize(user)} to post these pictures on {date} on your social calendar?\n      <PendingPictureCarousel items = {imageList} />\n\n      <div className = \"pendingButtons\">\n      <div\n      onClick = {() => this.onDeclinePics()}\n      className = \"pendingDeclineButton\"> Decline </div>\n      <div\n      onClick = {() => this.onAcceptPics()}\n      className = \"pendingAcceptButton\"> Accept </div>\n      </div>\n\n      </Modal>\n\n    )\n  }\n}\n\nexport default PendingSocialPicsModal;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NotificationFolder/PendingSocialEventModal.js",["1114"],"import React from 'react';\nimport { Button, Modal, Avatar, notification } from 'antd';\nimport ExploreWebSocketInstance from '../../exploreWebsocket';\nimport './PendingEventCard.css';\nimport { authAxios } from '../../components/util';\n\n\n// This will be a modal that opens to check the event that someone wants\n// to post on your calendar whne you click on the notificaiton\n\nclass PendingSocialEventModal extends React.Component{\n\n\n  confirmCloseEvent = () => {\n\n\n    this.props.onClose();\n  }\n\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  timeFormater(time){\n    // This will change the format of the time properly to the 1-12 hour\n    console.log(time)\n    const timeList = time.split(':')\n    let hour = parseInt(timeList[0])\n    let minutes = timeList[1]\n    var suffix  = hour >= 12 ? \"PM\":\"AM\"\n\n    console.log(11%12)\n    hour = ((hour+11)%12+1)+':'+minutes+\" \"+ suffix\n    return hour\n\n  }\n\n  onAcceptEvent = () => {\n    // This function will be called when you accep the follower friend to\n    // post and event on your page. This function will similar to the\n    // onHandleEventSubmit on the socialeventpostmodal. Gotta set up the\n    // eventobject and send it into the ExploreWebSocketInstance.sendSocialEvent\n\n    if(this.props.pendingEvent){\n      console.log(this.props.pendingEvent)\n      const eventObj = {\n        title: this.props.pendingEvent.title,\n        content: this.props.pendingEvent.content,\n        startTime: this.props.pendingEvent.eventStart,\n        endTime: this.props.pendingEvent.eventEnd,\n        location: this.props.pendingEvent.location,\n        curId: this.props.pendingEvent.curId,\n        calOwner: this.props.pendingEvent.ownerId,\n        date: this.props.pendingEvent.eventDate\n      }\n\n      const displayObj = {\n        title: this.props.pendingEvent.title,\n        content: this.props.pendingEvent.content,\n        startTime: this.timeFormater(this.props.pendingEvent.eventStart),\n        endTime: this.timeFormater(this.props.pendingEvent.eventEnd),\n        location: this.props.pendingEvent.location,\n        curId: this.props.pendingEvent.curId,\n        date: this.props.pendingEvent.eventDate\n      }\n\n      if(this.props.location.pathname.includes(\"explore\")){\n        ExploreWebSocketInstance.sendSocialEvent(eventObj)\n\n      } else {\n        console.log('authAxios here')\n        authAxios.post('http://127.0.0.1:8000/mySocialCal/uploadEvent', {\n          title: this.props.pendingEvent.title,\n          content: this.props.pendingEvent.content,\n          startTime: this.props.pendingEvent.eventStart,\n          endTime: this.props.pendingEvent.eventEnd,\n          location: this.props.pendingEvent.location,\n          curId: this.props.pendingEvent.curId,\n          calOwner: this.props.pendingEvent.ownerId,\n          date: this.props.pendingEvent.eventDate\n        })\n      }\n\n      if(this.props.notificationId){\n        this.props.deleteNotification(this.props.notificationId)\n      }\n      this.openNotification('bottomRight', displayObj)\n\n      this.props.onClose();\n\n    }\n\n  }\n\n  onDeclineEvents = () => {\n    // Used to decline social events\n    if(this.props.notificationId){\n      this.props.deleteNotification(this.props.notificationId)\n    }\n    this.openDeclineNotification(\"bottomRight\")\n    this.props.onClose()\n\n\n  }\n\n  openNotification = (placement, info) => {\n    // The info parameter will be used to add stuff into the descrption\n\n    const title = this.capitalize(info.title)\n\n  notification.info({\n    message: `New Social Event Posted`,\n    description:\n      'You added an public event '+title+' on '+info.startTime+' to '+info.endTime,\n    placement,\n  });\n};\n\nopenDeclineNotification = (placement) => {\n  // This will show a small notificaiton to show that you decline a requestion\n\n\n  notification.info({\n    message: `Decline Social Event Request`,\n    description:\n      \"You decline a social event request.\" ,\n    placement,\n  });\n}\n\n\n\n  render(){\n    console.log(this.props)\n\n    let title = \"\"\n    let content = \"\"\n    let location = \"\"\n    let date = \"\"\n    let startTime = \"\"\n    let endTime = \"\"\n    let user = \"\"\n    let userprofile = \"\"\n\n    if(this.props.pendingEvent) {\n      if(this.props.pendingEvent.title){\n        title = this.props.pendingEvent.title\n      }\n      if(this.props.pendingEvent.content){\n        content = this.props.pendingEvent.content\n      }\n      if(this.props.pendingEvent.location){\n        location = this.props.pendingEvent.location\n      }\n      if(this.props.pendingEvent.eventStart){\n        startTime = this.props.pendingEvent.eventStart\n      }\n      if(this.props.pendingEvent.eventEnd){\n        endTime = this.props.pendingEvent.eventEnd\n      }\n      if(this.props.pendingEvent.eventDate){\n        date = this.props.pendingEvent.eventDate\n      }\n    }\n    if(this.props.selectedUser){\n      user = this.props.selectedUser\n    }\n    if(this.props.userprofile){\n      userprofile = \"http://127.0.0.1:8000\"+this.props.userprofile\n    }\n\n    return (\n      <Modal\n      visible = {this.props.visible}\n      onCancel = {() => this.props.onClose()}\n      footer = {null}\n      >\n        <div>\n          Would you like to allow {this.capitalize(user)} to post this event on {date} on your social calendar?\n        </div>\n\n        <div className = \"pendingEventCard\">\n          <span className = \"title\"> {this.capitalize(title)} </span>\n          <div className = \"secondRow\">\n          <span className = \"times\"><i class=\"far fa-clock\"></i> {this.timeFormater(startTime)}-{this.timeFormater(endTime)}</span>\n          <span className = \"hostPic\"> Host: <Avatar src = {userprofile} /> </span>\n          </div>\n          <div className = \"location\"><i class=\"fas fa-map-marker-alt\"></i> {this.capitalize(location)} </div>\n          <br />\n          <div className = \"content\">{this.capitalize(content)} </div>\n\n        </div>\n        <div className = \"pendingButtons\">\n        <div\n        onClick = {() => this.onDeclineEvents()}\n        className = \"pendingDeclineButton\"> Decline </div>\n        <div\n        onClick = {() => this.onAcceptEvent()}\n        className = \"pendingAcceptButton\"> Accept </div>\n\n        </div>\n      </Modal>\n\n    )\n  }\n}\n\nexport default PendingSocialEventModal;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/actions/eventSync.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EventSyncForms/PickEventSyncModal.js",["1115","1116","1117","1118"],"import React from 'react';\nimport { Modal } from 'antd';\nimport * as eventSyncActions from '../../../store/actions/eventSync';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport { authAxios } from '../../../components/util';\nimport PickEventSyncWeek from './PickEventSyncWeek';\nimport PickEventSyncDay from './PickEventSyncDay';\nimport PickEventSyncForm from './PickEventSyncForm';\nimport CalendarEventWebSocketInstance from '../../../calendarEventWebsocket';\nimport * as dateFns from 'date-fns';\n\n\n// Unlike the event sync modal, this is where you would pick the\n// time you would like to be good to meet up\n// The eventsyncmodal is just to send the request\n\n\nclass PickEventSyncModal extends React.Component{\n  constructor(props){\n    super(props);\n    this.initialiseCalendarEvent()\n  }\n\n  state = {\n    syncEvents: []\n  }\n\n  initialiseCalendarEvent(){\n    // You can add a function in to the waitForSocketConnection\n    this.waitForSocketConnection()\n  }\n\n  waitForSocketConnection (callback){\n    const component = this;\n    setTimeout(\n      function(){\n\n        if (CalendarEventWebSocketInstance.state() === 1){\n\n          // callback();\n          return;\n        } else {\n\n            component.waitForSocketConnection();\n        }\n      }, 100)\n  }\n\n  componentDidMount () {\n    CalendarEventWebSocketInstance.connect(this.props.curId)\n    const friend = this.props.userFriend.username\n    const date_min = this.props.minDate\n    const date_max = this.props.maxDate\n    const person = this.props.currentUser\n    authAxios.get('http://127.0.0.1:8000/mycalendar/testEvents/', {\n      params:{\n        friend,\n        person,\n        date_min,\n        date_max\n      }\n    }) .then(res =>{\n      console.log(res)\n    })\n  }\n\n  componentWillReceiveProps (newProps){\n    console.log(this.props)\n    console.log(newProps)\n    // Gotta make sure that both the curId are the same type, it seems like it should\n    // not be a problem but sometiems it comes a string so you gotta convert both to ints\n    console.log(parseInt(this.props.curId) !== parseInt(newProps.curId))\n    if(parseInt(this.props.curId) !== parseInt(newProps.curId)){\n      CalendarEventWebSocketInstance.disconnect()\n      CalendarEventWebSocketInstance.connect(newProps.curId)\n      console.log('newWebsocket')\n    }\n\n    // friend is the person you are sending the request to\n    // Person is the person sending the request\n    // You want to get both events from both people and then add it to the\n    // same list so then you can render then on a min week check box\n    const friend = newProps.userFriend.username\n    const date_min = newProps.minDate\n    const date_max = newProps.maxDate\n    const person = newProps.currentUser\n\n    console.log(date_min, date_max)\n    authAxios.get('http://127.0.0.1:8000/mycalendar/testEvents/', {\n      params:{\n        friend,\n        person,\n        date_min,\n        date_max\n      }\n    }) .then(res =>{\n      console.log(res.data)\n      this.props.eventEventSyncModal(res.data)\n\n    })\n  }\n\n  // Now that you can pull the data from both users, now you will make a mincalendar\n  // where you can pick a date (remeber to use websocket so it sends over properly)\n\n\n  render () {\n    console.log(this.props)\n    console.log(this.state)\n    return(\n      <div>\n        <Modal\n          centered\n          footer = {null}\n          visible = {this.props.isVisible}\n          // visible = {true}\n          onCancel = {this.props.close}\n          width = {1550}>\n\n          { dateFns.differenceInCalendarDays(\n            new Date (this.props.maxDate),\n            new Date (this.props.minDate)\n          ) === 1 ?\n          <PickEventSyncDay />\n            :\n          <PickEventSyncWeek />\n          }\n\n        </Modal>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return{\n    currentUser: state.auth.username,\n    curId: state.auth.id,\n    userFriend: state.eventSync.userFriend,\n    minDate: state.eventSync.minDate,\n    maxDate: state.eventSync.maxDate\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    eventEventSyncModal: filterEvent => dispatch(eventSyncActions.eventEventSyncModal(filterEvent))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PickEventSyncModal);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NewsfeedItems/UserAvatar.js",["1119","1120"],"import React from 'react';\nimport { Avatar, Tooltip } from \"antd\";\nimport { UserOutlined, AntDesignOutlined } from \"@ant-design/icons\";\n\nclass UserAvatar extends React.Component{\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      avatarColor: \"\",\n    }\n  }\n\n  profileDirect = (username) => {\n      // This will direct the user to a person's profile page when they\n      // click on a person's avatar\n\n      console.log(username)\n    this.props.history.push('/explore/'+username)\n  }\n\n  render(){\n    console.log(this.props)\n    let like_people = this.props.like_people\n    console.log(like_people)\n    var num=0;\n    const avatarColor=['#bfbfbf']\n    const textColor=['#FFFFFF']\n    console.log(this.props.data)\n    console.log(like_people)\n    let defaultNum=3\n    if(this.props.num){\n      defaultNum=this.props.num;\n    }\n    return (\n      <span>\n\n        <Avatar.Group\n        maxStyle={{ color: textColor[num], backgroundColor: avatarColor[num] }}\n        maxCount={defaultNum}\n        >\n\n        {this.props.like_people.map((user) => (\n          <Tooltip placement=\"topLeft\" title={`${user.first_name} ${user.last_name} `}>\n        <Avatar\n        onClick = {() => this.profileDirect(user.username)}\n        src={'http://127.0.0.1:8000'+user.profile_picture}/>\n        </Tooltip>\n      ))}\n\n\n        </Avatar.Group>\n      </span>\n    )\n  }\n}\n\n\n\nexport default UserAvatar;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NotificationFolder/PendingPictureCarousel.js",["1121","1122"],"import React from 'react';\nimport { Carousel } from 'antd';\nimport {\n  RightCircleOutlined,\n  LeftCircleOutlined\n} from '@ant-design/icons';\nimport './PendingEventCard.css';\n\n\nclass PendingPictureCarousel extends React.Component{\n  constructor(props){\n    super(props);\n    this.next = this.next.bind(this)\n    this.previous = this.previous.bind(this);\n    // createRef is used to refer to the DOM element in the render with the\n    // ref in the tab\n    this.carousel = React.createRef()\n  }\n\n  next() {\n    this.carousel.next()\n  }\n\n  previous() {\n    this.carousel.prev()\n  }\n\n\n\n  renderPictures = pictureList => {\n    console.log(pictureList)\n    let socialItems = []\n\n    if(pictureList.length === 0){\n      return\n    } else {\n\n\n      for (let i = 0 ; i< pictureList.length; i++){\n        socialItems.push(\n          <div className = 'pendingPicRoll'>\n            <img\n            className = 'pendingSocialImg'\n            src ={'http://127.0.0.1:8000'+pictureList[i].itemImage} />\n          </div>\n        )\n      }\n    }\n\n    return socialItems\n  }\n\n  render(){\n    console.log(this.props)\n    let itemList = []\n    if(this.props.items.length !== 0){\n      itemList = this.props.items\n    }\n\n    function onChange(a, b, c) {\n      console.log(a, b, c);\n    }\n\n    const contentStyle = {\n      height: '800px',\n      color: '#fff',\n      lineHeight: '160px',\n      textAlign: 'center',\n      background: '#364d79',\n    };\n\n    return (\n      <div className = 'pendingEventCard'>\n\n        <Carousel\n        arrows = {true}\n        effect = 'null'\n        ref = {node => {this.carousel = node}}\n        afterChange={onChange}>\n          {this.renderPictures(itemList)}\n        </Carousel>\n        {\n          itemList.length > 1 ?\n          <div>\n          <LeftCircleOutlined\n          className = 'socialArrowLeft'\n          onClick = {this.previous} />\n          <RightCircleOutlined\n          className = 'socialArrowRight'\n          onClick = {this.next} />\n          </div>\n          :\n\n          <div></div>\n\n        }\n\n      </div>\n    )\n  }\n\n}\n\n\n\nexport default PendingPictureCarousel;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/SocialCalendarFolder/PictureCarousel.js",["1123","1124","1125","1126","1127","1128"],"import React from 'react';\nimport { Carousel, Avatar } from 'antd';\nimport {\n  RightCircleOutlined,\n  LeftCircleOutlined\n} from '@ant-design/icons';\nimport './SocialCalCSS/SocialCellPage.css';\n\n\nclass PictureCarousel extends React.Component{\n  constructor(props){\n    super(props);\n    this.next = this.next.bind(this)\n    this.previous = this.previous.bind(this);\n    // createRef is used to refer to the DOM element in the render with the\n    // ref in the tab\n    this.carousel = React.createRef()\n  }\n\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  next() {\n    this.carousel.next()\n  }\n\n  previous() {\n    this.carousel.prev()\n  }\n\n\n  getChatUserName(postOwnerName){\n    // This function will show the correct name of the user that you are chatting\n    // with\n\n    var name = \"\"\n\n    if(postOwnerName.creator){\n      name = this.capitalize(postOwnerName.creator.first_name)+ ' '\n          +this.capitalize(postOwnerName.creator.last_name)\n\n    }\n\n\n\n    console.log(name)\n    return name;\n\n  }\n\n\n\n\n  renderPictures = pictureList => {\n    console.log(pictureList)\n    let socialItems = []\n\n\n    {\n      pictureList.map(\n        item => {\n          if(item.socialItemType === \"clip\"){\n            socialItems.push(\n\n              <div className = \"clipPicBackground\">\n\n              <img\n              className = 'backgroundPic'\n              src ={'http://127.0.0.1:8000'+item.itemImage} />\n\n              <div className = 'clipPicturesRoll'>\n\n                <div className = \"ownerHolder\">\n                  <Avatar\n                  src = {'http://127.0.0.1:8000'+item.creator.profile_picture}\n                  size = {65}/>\n                  <div className = \"ownerName\">\n                    <div> {this.getChatUserName(item)} </div>\n                    <div> @{item.creator.username} </div>\n                  </div>\n                </div>\n                    <div className = \"polaroidHolder\">\n                    <img\n                    className = 'socialImages'\n                    src ={'http://127.0.0.1:8000'+item.itemImage} />\n                    </div>\n              </div>\n\n\n\n              </div>\n            )\n          }\n          if(item.socialItemType === \"picture\"){\n            socialItems.push(\n              <div className = 'picturesRoll'>\n                <img\n                className = 'socialImages'\n                src ={'http://127.0.0.1:8000'+item.itemImage} />\n              </div>\n            )\n          }\n\n        }\n      )\n    }\n\n    return socialItems\n  }\n\n  render(){\n    console.log(this.props)\n    let itemList = []\n    if(this.props.items !== []){\n      itemList = this.props.items\n    }\n\n    function onChange(a, b, c) {\n      console.log(a, b, c);\n    }\n\n    const contentStyle = {\n      height: '800px',\n      color: '#fff',\n      lineHeight: '160px',\n      textAlign: 'center',\n      background: '#364d79',\n    };\n\n    return (\n      <div className = 'socialLeftRight'>\n        <LeftCircleOutlined\n        className = 'socialArrowLeft'\n        onClick = {this.previous} />\n        <Carousel\n        arrows = {true}\n        effect = 'null'\n        ref = {node => {this.carousel = node}}\n        afterChange={onChange}>\n          {this.renderPictures(itemList)}\n        </Carousel>\n        <RightCircleOutlined\n        className = 'socialArrowRight'\n        onClick = {this.next} />\n      </div>\n    )\n  }\n\n}\n\n\n\nexport default PictureCarousel;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EventSyncForms/PickEventSyncForm.js",["1129","1130","1131","1132","1133","1134","1135","1136","1137","1138","1139","1140","1141","1142","1143","1144","1145","1146","1147"],"import React from 'react';\nimport { reset, Field, reduxForm } from 'redux-form';\nimport '../PersonalCalCSS/ReduxForm.css';\nimport { Form } from '@ant-design/compatible';\nimport '@ant-design/compatible/assets/index.css';\nimport { DatePicker, TimePicker, Button, Input, Select, Radio, Card} from 'antd';\nimport { AimOutlined, ArrowRightOutlined } from '@ant-design/icons';\nimport * as dateFns from 'date-fns';\nimport './PickEventSync.css';\n\nconst { Option } = Select;\n\nconst { TextArea } = Input\n\nconst required = value => value ? undefined : '*Required'\n\nconst renderField = (field) => {\nreturn (\n    <Input\n    {...field.input}\n    type = {field.type}\n    placeholder= {field.placeholder}\n    className = 'box'/>\n  )\n}\n\nconst renderTextArea = (field) => {\n  return (\n    <TextArea\n    {...field.input}\n    type = {field.type}\n    placeholder= {field.placeholder}\n    rows = {4}\n    className = 'box'\n    />\n  )\n}\n\nconst renderLocationField = (field) => {\n  console.log(field.meta)\n  return (\n    <span>\n    <Input style={{width:'50%',fontSize:'14px'}}\n    {...field.input}\n    type = {field.type}\n    placeholder= {field.placeholder}\n    className = 'box'/>\n\n    </span>\n  )\n}\n\n\n\n\n// <input {...field.input} type = {field.type} placeholder = {field.placeholder} />\n\nconst renderStartDate = (field) => {\n  console.log(field)\n  return (\n    <DatePicker\n    onChange = {field.input.onChange}\n    value = {field.input.value}\n    style = {{width: '110px', marginRight:'15px'}}\n    suffixIcon={<div></div>}\n    allowClear = {false}\n     />\n  )\n}\n\nconst renderEndDate = (field) => {\n  console.log(field)\n  return (\n    <DatePicker\n    onChange = {field.input.onChange}\n    value = {field.input.value}\n    style = {{width: '110px'}}\n    suffixIcon={<div></div>}\n    allowClear = {false}\n    className = {` ${field.meta.error === 'endDate error' ? 'datePicker' : ''}`}\n    />\n  )\n}\n\n\n\n\n\nconst renderStartTime = () => {\n    const timeFormat = \"hh:mm a\"\n    const time = []\n    let start = dateFns.startOfDay(new Date())\n    let startHour = dateFns.getHours(new Date())\n    let startMins = dateFns.getMinutes(new Date())\n    for (let i = 0; i< 48; i++){\n      const cloneTime = startHour + ':' + startMins\n      time.push(\n        <Option\n        key = {dateFns.format(start, timeFormat)}\n        value= {dateFns.format(start, timeFormat)} >\n        {dateFns.format(start, timeFormat)}\n        </Option>\n      )\n      start = dateFns.addMinutes(start, 30)\n    }\n    console.log(time)\n    return time\n  }\n\nconst renderEventColor = (field) => {\n  // This is just used to render the color of the event\n  return (\n    <Input\n    type = 'color'\n    className = 'reduxColor'\n    name = 'eventColor'\n    defaultValue = '#91d5ff'\n    {...field.input}/>\n  )\n}\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 8 },\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 16 },\n  },\n};\n\nconst config = {\n  rules: [{ type: 'object', required: true, message: 'Please select time!' }],\n};\n\nconst rangeConfig = {\n  rules: [{ type: 'array', required: true, message: 'Please select time!' }],\n};\n\n\n\n\nconst afterSubmit = (result, dispatch) =>\n  dispatch(reset('event sync add event'))\n// This is to reset the values of the form\n\n\n// So this form is when you pick a date and you want to schedule a time\nclass PickEventSyncForm extends React.Component {\n\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  renderStartDateSelect = (field) => {\n    // This const will render the start time of the event\n    // So before you choose any value you want to have the field\n    // input as a value in your select... because the input value will be the value\n    // that will be return to the field when you input a value\n    // Bascially everything goes through the value first, and what ever is here inspect\n    // is just for show\n    console.log(this.props)\n    console.log(this.props.startTime)\n\n    return (\n      <Select\n        // {...field.input}\n        style = {{width: '115px', marginRight:'15px'}}\n        onChange = {field.input.onChange}\n        value = {this.props.startTime}\n        className = 'timebox'>\n\n      {field.children}\n      </Select>\n    )\n  }\n\n  renderEndDateSelect = (field) => {\n    // This const will render the start time of the event\n    // So before you choose any value you want to have the field\n    // input as a value in your select... because the input value will be the value\n    // that will be return to the field when you input a value\n    // Bascially everything goes through the value first, and what ever is here inspect\n    // is just for show\n    console.log(this.props)\n    console.log(this.props.endTime)\n\n    return (\n      <Select\n        // {...field.input}\n        style = {{width: '115px', marginRight:'15px'}}\n        onChange = {field.input.onChange}\n        value = {this.props.endTime}\n        className = 'timebox'>\n\n      {field.children}\n      </Select>\n    )\n  }\n\n  handleStartTimeChange = (event, value) => {\n    const { change } = this.props\n    // So this handleStartTimechange pretty much is used to automatically\n    // change the values of the endTime, the only difference between this\n    // and that of the ReactAddEventForm is that we dont need to change the\n    // startTime value just the endTime value will be affected\n\n\n    console.log(value)\n    change('startTime', value)\n\n    // Like every other time related events we have to converted all\n    let startHour = parseInt(value.substring(0,2))\n    let startMin = parseInt(value.substring(3,5))\n    let ampm = value.substring(5,8)\n\n    let endHour = parseInt(this.props.endTime.substring(0,2))\n    let endMin = parseInt(this.props.endTime.substring(3,5))\n    let endTime = ''\n\n    console.log(startHour)\n\n\n\n    // These if statement is used to change the startTime values to the 1-24 hour format\n    if(value.includes('PM')){\n      if(startHour !== 12 ){\n        startHour = startHour + 12\n      }\n    } else if (value.includes('AM')){\n      if(startHour === 12){\n        startHour = 0\n      }\n    }\n\n    // These if statements here is to change the end time values from 1-2 to\n    // 1-24 for the end time\n    if (this.props.endTime.includes('PM')){\n      if (endHour !==  12){\n        endHour = endHour + 12\n      }\n    } else if (this.props.endTime.includes('AM')){\n      if(endHour === 12){\n        endHour = 0\n      }\n    }\n\n    // Now this is where the comparison of the times comes in an all the senarios\n    // For this one,for times that the start hour is smaller than that of the\n    // end time you don't need to change the value because due to the redux from\n    // the value of the start time will chagne it self\n    if(startHour === endHour ){\n      if (startMin > endMin){\n        endMin = \"00\"\n        endHour = startHour + 1\n        console.log(startHour)\n        console.log(endHour)\n        if (startHour === 11 && ampm === 'AM'){\n          endTime = '12:'+endMin + ' PM'\n        } else if (startHour === 23 && ampm === \" PM\"){\n          endTime = '12:'+endMin + ' AM'\n        } else {\n          if (endHour < 10){\n            endHour = '0'+endHour\n          } else {\n             if(ampm === ' AM'){\n               endHour = endHour\n             } else if (ampm === ' PM'){\n               endHour = endHour-12\n               if (endHour < 10){\n                 endHour = '0'+endHour\n               }\n             }\n           }\n           endTime = endHour + ':'+endMin+ampm\n\n        }\n\n\n        change('endTime', endTime )\n      } else if (startMin === endMin ){\n        // This is the case where the times are identical to each other\n        // REMEMBER THAT ENDHOUR AND STARTHOUR ARE USING THE 1-24 TIME\n        console.log(startHour, endHour)\n        if (startHour === 0 && ampm === ' AM' && startMin === 0){\n          endTime = '12:30 AM'\n        } else if (startHour === 12 && ampm === ' PM' && startMin === 0){\n          endTime = '12:30 PM'\n        } else {\n          if (startMin === 30){\n            endMin = '00'\n            if (startHour === 12){\n              endHour = '01'\n              endTime = endHour + ':'+endMin+' PM'\n            } else if (startHour === 11 && ampm === ' AM'){\n                endTime =   '12:' + endMin + ' PM'\n              } else if ((startHour-12) === 11 && ampm === ' PM'){\n                endTime =  '12:' + endMin + ' AM'\n              }\n            else {\n              console.log(endHour)\n              endHour = startHour +1\n                if (endHour<10){\n                    endHour = '0'+endHour\n                } else {\n                  if(ampm === ' AM'){\n                    endHour = endHour\n                  } else if (ampm === ' PM'){\n                    endHour = endHour-12\n                    if (endHour < 10){\n                      endHour = '0'+endHour\n                    }\n                  }\n                }\n              endTime = endHour + ':' +endMin+ampm\n            }\n          } else if (startMin === 0){\n            endMin = '30'\n            console.log(ampm)\n            if (endHour<10){\n                endHour = '0'+endHour\n            } else {\n              if(ampm === ' AM'){\n                console.log('am')\n                endHour = endHour\n              } else if (ampm === ' PM'){\n                console.log('pm')\n                if (endHour === 12){\n                  endHour = 12\n                }else {\n                  endHour = endHour-12\n                  if (endHour < 10){\n                    endHour = '0'+endHour\n                  }\n                }\n              }\n            }\n            endTime = endHour + ':'+endMin +ampm\n          }\n        }\n\n        change('endTime', endTime)\n      }\n    } else if (startHour > endHour) {\n      // let startHour = parseInt(time.substring(0,2))\n      // let startMin = parseInt(time.substring(3,5))\n      if (startHour === 11 && ampm === ' AM' && startMin === 30){\n        endTime = '12:00 PM'\n      } else if (startHour === 23 && ampm === ' PM' && startMin === 30){\n        endTime = '12:00 AM'\n      } else {\n        if (startMin === 30){\n          startMin = \"00\"\n          startHour = startHour + 1\n        } else if (startMin !== 30){\n          startMin = '30'\n        }\n        if (startHour < 10){\n          startHour = '0'+startHour\n        } else{\n          if(ampm === ' AM'){\n            startHour = startHour\n          } else if (ampm === ' PM'){\n            startHour = startHour-12\n            if (startHour < 10){\n              if (startHour === 0){\n                startHour = '12'\n              } else {\n                startHour = '0'+startHour\n              }\n            }\n          }\n        }\n\n\n          endTime = startHour + ':'+startMin+ampm\n      }\n\n\n\n      change('endTime', endTime)\n    }\n\n  }\n\n\n  handleEndTimeChange = (event) => {\n    console.log(event)\n\n    const {change} = this.props\n    return (\n      console.log('endTime')\n      // change('endTime', event)\n    )\n  }\n\n  onStartDateChange = (event, value) => {\n    const { change } = this.props\n\n    // So this is where the end Date will be changed if the startDate or endDate\n    // seems to be ahead of the endDate\n    console.log(value)\n    if (dateFns.isAfter(new Date(value),new Date(this.props.endDate))){\n      change('endDate', value)\n    }\n  }\n\n  renderEndTimeSelect = () => {\n    console.log(this.props.startTime)\n\n    if (this.props.startTime !== undefined ){\n      // So basically the way I am making this will be the same way I made the\n      // date pick in the addeventform. But instead of using state, we will use\n      // redux state\n      const baseTime = renderStartTime()\n      let endTime = []\n\n      let setHour = ''\n      let setMin = ''\n      // You will be using setHour and setMin in order to compare to the\n      // times in the baseTime so you will know which time to put inin the endTime\n\n      // In order to compare, you have to convert all the tiems into the 1-24 hour time\n      if (this.props.startTime.includes(\"PM\")){\n        setHour = parseInt(this.props.startTime.substring(0,2))\n        setMin = parseInt(this.props.startTime.substring(3,5))\n        if (setHour !== 12 ){\n          setHour = setHour + 12\n        }} else if (this.props.startTime.includes(\"AM\")){\n          setHour = parseInt(this.props.startTime.substring(0,2))\n          setMin = parseInt(this.props.startTime.substring(3,5))\n          if (setHour === 12){\n            setHour = 0\n          }\n        }\n\n        // Now we will run through the basetimes and then convert them to\n        // the 1-24 hour format the from there compare what needs date is put into the\n        // end date and what date does not get put in there\n      for( let i = 0; i< baseTime.length; i++){\n       if(baseTime[i].key.includes('PM')){\n         let hour = parseInt(baseTime[i].key.substring(0,2))\n         if (hour !== 12){\n           hour = hour+12\n         }\n         const min = baseTime[i].key.substring(3,5)\n         if (setHour < hour){\n           endTime.push(\n            <Option key = {baseTime[i].key}>{baseTime[i].key}</Option>\n          )} else if (setHour === hour){\n            if(setMin < min){\n              endTime.push(\n                <Option key = {baseTime[i].key}>{baseTime[i].key}</Option>\n              )\n            }\n          }\n       } else if (baseTime[i].key.includes(\"AM\")) {\n         let hour = parseInt(baseTime[i].key.substring(0,2))\n         if (hour === 12){\n           hour = 0\n         }\n         const min = baseTime[i].key.substring(3,5)\n         if( setHour < hour ) {\n           endTime.push(\n             <Option key = {baseTime[i].key}>{baseTime[i].key}</Option>\n          )} else if (setHour === hour){\n            if (setMin < min){\n              endTime.push(\n                <Option key = {baseTime[i].key}>{baseTime[i].key}</Option>\n              )\n            }\n          }\n        }\n      }\n      return (endTime)\n    }\n  }\n\n  // his.props.initialValues.start_date.format(\"D\")\n  render () {\n    console.log(this.state)\n    console.log(this.props)\n\n    const {handleSubmit, pristine, invalid, reset, submitting, error } = this.props\n    return (\n\n\n\n\n\n      <Card\n        title=\"Schedule event\"\n         extra={\n           <Button style={{float:'left', marginRight:'15px',\n             display:'inline-block'}} type=\"primary\"\n            shape=\"circle\" size={'large'}>\n             {this.props.whichDay}\n           </Button>\n         }\n        style={{ width: 400,\n          marginLeft:'25px',\n          marginTop:'15px',\n           padding:'10px' }}>\n\n          <form class=\"eSyncForm\">\n              <div className = 'eSyncTitle'>\n                <Field\n                name = 'title'\n                label = 'Title'\n                component= {renderField}\n                type= 'text'\n                validate = {required }\n                placeholder = 'Title'\n                />\n              </div>\n              {/*\n              <div className = 'reduxContent'>\n                <Field\n                name = 'content'\n                label = 'Content'\n                component= {renderTextArea}\n                type= 'text'\n                // validate = {required}\n                placeholder = 'Description'\n                />\n              </div>\n              */}\n\n              <div style={{height:'70px'}} className = 'outerContainerPeople'>\n                <div class=\"innerContainerPeople\">\n                  <i class=\"fas fa-globe-americas\"  style={{marginRight:'25px'}} ></i>\n                  <Field\n                    name = 'location'\n                    placeholder=\"Location\"\n                    component= {renderLocationField}\n                    type= 'text'\n\n\n                  />\n              </div>\n            </div>\n\n            <div style={{display:'flex', height:'30px', width:'500px'}} className = 'pointerEvent outerContainerPeople'>\n              <div class=\"innerContainerPeople\">\n                <i style={{marginRight:'25px'}}  class=\"fas fa-clock\"></i>\n\n\n                    {/*\n\n\n                      <Field\n                        name = 'startDate'\n                        component = {renderStartDate}\n                        onChange = {this.onStartDateChange}\n                        type = 'date'\n                      />\n                    */}\n\n\n\n                   <Field\n                     style={{display: 'inline-block',float: 'left'}}\n                     name = 'startTime'\n                     component = {this.renderStartDateSelect}\n                     onChange = {this.handleStartTimeChange}\n                     >\n                     {renderStartTime()}\n                   </Field>\n\n                   <Field\n                     style={{display: 'inline-block', marginRight:'15px'}}\n                     name = 'endTime'\n                     onChange = {this.handleEndTimeChange}\n                     component = {this.renderEndDateSelect}\n                     >\n                     {this.renderEndTimeSelect()}\n                   </Field>\n              </div>\n            </div>\n\n              {error && <strong style = {{color: 'red'}}>{error}</strong>}\n              <div className = 'eventSyncSurroundings'>\n            <div className = 'clearEventSyncFormButton' >\n              <Button\n              diabled = {pristine}\n              onClick= {reset}>Clear Values</Button>\n            </div>\n            <div className = 'eventSyncSubmitButton'>\n              <Button\n                type = 'primary'\n                onClick = {handleSubmit}\n                disabled = {invalid || this.props.active === null}>\n                Send Event\n              </Button>\n            </div>\n          </div>\n          </form>\n        </Card>\n\n    )\n  }\n\n}\n\nPickEventSyncForm = reduxForm ({\n  form: 'event sync add event',\n  onSubmitSuccess: afterSubmit\n}) (PickEventSyncForm)\n\nexport default PickEventSyncForm;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EventSyncForms/PickEventSyncDay.js",["1148","1149","1150","1151","1152","1153","1154","1155","1156","1157","1158","1159","1160","1161","1162","1163","1164","1165","1166","1167","1168","1169","1170","1171","1172","1173","1174","1175","1176","1177","1178","1179","1180","1181"],"import React from 'react';\nimport { connect } from 'react-redux';\nimport * as dateFns from 'date-fns';\nimport '../PersonalCalCSS/EventSync.css';\nimport { DatePicker, TimePicker, Button, Input, Select, Radio, Card, Row, Col, notification } from 'antd';\nimport PickEventSyncForm from './PickEventSyncForm';\nimport CalendarEventWebSocketInstance from '../../../calendarEventWebsocket';\nimport NotificationWebSocketInstance from '../../../notificationWebsocket';\nimport { Field, reduxForm, reset, formValueSelector, SubmissionError } from 'redux-form';\nimport * as eventSyncActions from '../../../store/actions/eventSync';\nimport * as notificationsActions from '../../../store/actions/notifications';\nimport { authAxios } from '../../../components/util';\nimport PickEventSyncUserProfileCard from './PickEventSyncUserProfileCard.js'\nimport moment from 'moment';\n\n\nconst { Option } = Select;\n\nconst { TextArea } = Input\nconst required = value => value ? undefined : '*Required'\nconst renderField = (field) => {\nreturn (\n    <Input\n    {...field.input}\n    type = {field.type}\n    placeholder= {field.placeholder}\n    className = 'box'/>\n  )\n}\n\nconst renderLocationField = (field) => {\n  console.log(field.meta)\n  return (\n    <span>\n    <Input style={{width:'50%',fontSize:'14px'}}\n    {...field.input}\n    type = {field.type}\n    placeholder= {field.placeholder}\n    className = 'box'/>\n\n    </span>\n  )\n}\n\nconst renderStartDateSelect = (field) => {\n  // This const will render the start time of the event\n  // So before you choose any value you want to have the field\n  // input as a value in your select... because the input value will be the value\n  // that will be return to the field when you input a value\n  // Bascially everything goes through the value first, and what ever is here inspect\n  // is just for show\n\n\n  console.log(field)\n  return (\n    <Select\n      // {...field.input}\n      style = {{width: '115px', marginRight:'15px'}}\n      onChange = {field.input.onChange}\n      value = {field.input.value}\n      className = 'timebox'>\n\n    {field.children}\n    </Select>\n  )\n}\n\n\nconst renderStartTime = () => {\n    const timeFormat = \"hh:mm a\"\n    const time = []\n    let start = dateFns.startOfDay(new Date())\n    let startHour = dateFns.getHours(new Date())\n    let startMins = dateFns.getMinutes(new Date())\n    for (let i = 0; i< 48; i++){\n      const cloneTime = startHour + ':' + startMins\n      time.push(\n        <Option\n        key = {dateFns.format(start, timeFormat)}\n        value= {dateFns.format(start, timeFormat)} >\n        {dateFns.format(start, timeFormat)}\n        </Option>\n      )\n      start = dateFns.addMinutes(start, 30)\n    }\n    console.log(time)\n    return time\n  }\n\nconst afterSubmit = (result, dispatch) =>\n  dispatch(reset('event sync add event'))\n\nconst renderStartDate = (field) => {\n  console.log(field)\n  return (\n    <DatePicker\n    onChange = {field.input.onChange}\n    value = {field.input.value}\n    style = {{width: '110px', marginRight:'15px'}}\n    suffixIcon={<div></div>}\n    allowClear = {false}\n     />\n  )\n}\n\nclass PickEventSyncDay extends React.Component{\n  state = {\n    active: null,\n    selectedDate: null,\n  }\n\n      renderHeader(){\n        // The difference between the week and the day is that\n        // the day cal is just for the next day so  you want to\n        // switch all the minDates with maxdates\n        const dateFormat = 'MMMM yyyy'\n        const minDate = this.props.maxDate\n        return(\n          <div className = 'header'>\n            <div className = 'col-center'>\n              <span>\n                {dateFns.format(new Date(minDate) , dateFormat)}\n              </span>\n            </div>\n          </div>\n        )\n      }\n\n      renderDays() {\n        // This is just to render out the days in the date range\n        const dateFormat = 'iii'\n        const dayFormat = 'd'\n        const days = []\n\n        let minDate = dateFns.addDays(new Date(this.props.minDate),1)\n        let maxDate = dateFns.addDays(new Date(this.props.maxDate),1)\n\n        const difference = -dateFns.differenceInCalendarDays(new Date(minDate), new Date(maxDate))\n        let cloneMaxDate = this.props.maxDate\n\n        // This is only for one day but the css and everything is already set up\n        for(let i = 0; i<difference; i++){\n            const cloneCloneMaxDate = cloneMaxDate\n            days.push(\n              <div\n              className = 'syncCol col-center '\n              key = {i}\n              >\n                {dateFns.format(dateFns.addDays(minDate, i), dateFormat)}\n                <br />\n                {dateFns.format(dateFns.addDays(minDate, i), dayFormat)}\n              </div>\n            )\n            cloneMaxDate = dateFns.addDays(cloneCloneMaxDate, 1)\n        }\n        return <div className = 'days row'>{days}</div>\n      }\n\n      renderSide() {\n        // Render side, you would want to start off at 11:30 am and end at 11:30 pm\n        const dateFormat = 'h a'\n        const hour = []\n        let startHour = dateFns.addHours(dateFns.startOfDay(new Date(this.props.maxDate)), 1)\n        for (let i = 0; i<23; i++){\n          const formattedHour = dateFns.format(startHour, dateFormat)\n          hour.push(\n            <div\n              className = 'cell'\n              key = {hour}\n            >\n            <span className = 'number'>{formattedHour}</span>\n            </div>\n          )\n          startHour = dateFns.addHours(startHour, 1)\n        }\n        return <div className= 'body'> {hour} </div>\n      }\n\n      renderWeekCell(events){\n        console.log(events)\n        // Render the week cell, so what you want to do is pick the first to be the minDate and\n        // the last day will be the maxDate\n        // You will loop through each hour of each day and then redner through each day of the week\n\n        // Probally have to fix this later when we readjust the timezone issue.\n        const minDate = dateFns.addHours(new Date(this.props.minDate),7);\n        const maxDate = dateFns.addHours(new Date(this.props.maxDate),7);\n        // This will be different from the calendar week calendar in that it doesn't start from the beginning\n        // of the week but rather it will start from beginning of the date range\n        console.log(this.props.minDate, this.props.maxDate)\n        console.log(minDate, maxDate)\n        const hourFormat = 'h a'\n        const dayFormat = 'd MMMM'\n        // This hour list will hold 24 items, each list will be for each hour of each day 5x24\n        const hours = []\n\n         // This list will hold all the events\n         let toDoStuff = []\n         // This will be a list with teh same hour of all the days\n         let days = []\n         // You will need the start day and the start hour\n         // The start day will be the minDate\n         let date = minDate\n         const startHourDay = dateFns.startOfDay(date);\n         const endHourDay = dateFns.endOfDay(date);\n\n         console.log(startHourDay)\n\n         let formattedDay = '';\n\n         let hour = startHourDay;\n         let formattedHour = '';\n\n         // The counter is to give each box a seperate id so that it will highlight when you click on it\n         let counter = 0\n\n         const difference = -dateFns.differenceInCalendarDays(new Date(minDate), new Date(maxDate))\n\n         // The plan for the loop is ot have a while loop that loops thorugh each hour of the same day\n         // then go down to the next hour then go through all the days\n\n         while (hour <= endHourDay){\n           // When adding things to the calendar you have to match the date and the hour\n           for (let i = counter; i< (counter+difference); i++){\n              const cloneDay = date\n              const cloneHour = hour\n              const checkMin = dateFns.getMinutes(new Date(hour))\n              formattedHour = dateFns.format(hour, hourFormat)\n              formattedDay = dateFns.format(date, dayFormat)\n              // This loop will loop thorugh all the events and if the hour and day matches and it will\n              // add it to the toDoStuff which will loopp thorugh each each cell then it will be\n              // cleared out again\n              for (let item = 0; item<events.length; item++){\n                const startHour = dateFns.getHours(new Date(events[item].start_time))\n                const startMin = dateFns.getMinutes(new Date(events[item].start_time))\n                const endHour = dateFns.getHours(new Date(events[item].end_time))\n                const endMin = dateFns.getMinutes(new Date(events[item].end_time))\n                const curHour = dateFns.getHours(new Date(hour))\n                const curMin = dateFns.getMinutes(new Date(hour))\n\n\n                const sameDayStart = dateFns.isSameDay(new Date(events[item].start_time), cloneDay)\n                const sameDayEnd = dateFns.isSameDay(new Date(events[item].end_time), cloneDay)\n\n                console.log(startHour, startMin)\n                console.log(sameDayStart, sameDayEnd, startHour, startMin,new Date(events[item].start_time), cloneDay )\n\n                if (\n                  startHour === 23\n                ){\n\n                  if(\n                   startMin === 30\n                   &&\n                   startHour === curHour\n                   &&\n                   startMin === curMin\n                   &&\n                   (sameDayStart || sameDayEnd)\n                 ){\n                   console.log('right here')\n                   toDoStuff.push(\n                     events[item]\n                   )\n                 }\n                  else if(\n                    startMin === 0\n                    &&\n                    startMin === curMin\n                    &&\n                    startHour === curHour\n                    &&\n                    (sameDayStart || sameDayEnd)\n                  ) {\n\n                    toDoStuff.push(\n                      events[item]\n                    )\n                  }\n\n\n                  if (endHour === 0){\n                    if (\n                      startMin === 0\n                      &&\n                      startHour === curHour\n                      &&\n                      (sameDayStart || sameDayEnd)\n                    ){\n                      toDoStuff.push(\n                        events[item]\n                      )\n                    } else if(\n                      startMin === 30\n                      &&\n                      startMin === curMin\n                      &&\n                      startHour === curHour\n                      &&\n                      (sameDayStart || sameDayEnd)\n                    ){\n                      toDoStuff.push(\n                        events[item]\n                      )\n                    }\n\n                  }\n\n\n                }\n                else {\n                  if (\n                    startHour === curHour\n                    &&\n                    startMin === curMin\n                    &&\n                    (sameDayStart || sameDayEnd)\n\n                  ){\n                    console.log('test1')\n                    toDoStuff.push(\n                      events[item]\n                    )\n                  }\n                  if(\n                    endHour === curHour\n                    &&\n                    endMin === 30\n                    &&\n                    endMin-30 === curMin\n                    &&\n                    (sameDayStart || sameDayEnd)\n                  ){\n                    console.log('test1')\n                    toDoStuff.push(\n                      events[item]\n                    )\n                  } else if (\n                    endMin === 0\n                    &&\n                    endHour -1 === curHour\n                    &&\n                    endMin+30 === curMin\n                    &&\n                    (sameDayStart || sameDayEnd)\n                  ){\n                    console.log('test1')\n                    toDoStuff.push(\n                      events[item]\n                    )\n                  }\n\n                  if(\n                    startMin === 30\n\n                  ){\n                    if(\n                      startHour < curHour\n                      &&\n                      endHour > curHour\n                      &&\n                      (0 === curMin\n                      ||\n                      30 === curMin)\n                      &&\n                      (sameDayStart || sameDayEnd)\n                    ){\n                      console.log('test1')\n                      toDoStuff.push(\n                        events[item]\n                      )\n                    }\n\n                  } else if (\n                    startMin === 0\n\n                  ){\n                    if (\n                      startHour <= curHour\n                      &&\n                      endHour> curHour\n                      &&\n                      (sameDayStart || sameDayEnd)\n                    ){\n                      toDoStuff.push(\n                        events[item]\n                      )\n                    }\n\n                  }\n\n\n                }\n\n\n              }\n\n              // You can always have access to the events, you just got to loop through\n              // toDoStruff in the if below if you want to check\n              if (toDoStuff.length > 0){\n                days.push(\n                  <div\n                    className = {`syncCol disabled ${checkMin === 0 ? \"nonhourcellT\":\"nonhourcellB\"} `}\n                  >\n                  </div>\n                )\n              } else {\n                days.push(\n                  <div\n                    style = {{background: this.color(i)}}\n                    className = {`syncCol ${checkMin === 0 ? \"hourcellT\" : \"hourcellB\"}`}\n                    onClick = {(e) => this.onDayHourClick(e, i, cloneDay, cloneHour)}\n                  >\n                  <span className = 'number'></span>\n                  </div>\n                )\n              }\n              toDoStuff = []\n              date = dateFns.addDays(date, 1)\n           }\n           // After you loop thorugh the hour, you will want to put that hur into the hour\n           // list and then clear out days list ot redo it again then you add in the next hour, then\n           // set the start day again to the start of the week then run it throuhg again\n           // Remember teh date must be resetted before adding the hour because\n           // of the while condition\n           hours.push(\n             <div className = 'row'>\n              {days}\n             </div>\n           )\n           counter = counter + 1\n           days = []\n           date = minDate\n           hour = dateFns.addMinutes(hour, 30)\n         }\n\n         return <div className = 'body'>{hours}</div>\n      }\n\n      onDayHourClick = (e,position, day, hour) => {\n        console.log(hour)\n        const selectedHour = dateFns.getHours(hour)\n        const selectedMin = dateFns.getMinutes(hour)\n        const selectedYear = dateFns.getYear(day)\n        const selectedMonth = dateFns.getMonth(day)\n        const selectedDate = dateFns.getDate(day)\n        const finalSelectedDate = new Date(selectedYear, selectedMonth, selectedDate, selectedHour, selectedMin)\n        if (this.state.active === position){\n          this.setState({\n            active: null,\n            selectedDate: null\n          })\n        } else {\n          this.setState({\n            active: position,\n            selectedDate: finalSelectedDate\n          })\n        }\n        console.log(finalSelectedDate)\n      }\n\n      renderEndTimeSelect = () => {\n      console.log(this.props.startTime)\n\n      if (this.props.startTime !== undefined ){\n        // So basically the way I am making this will be the same way I made the\n        // date pick in the addeventform. But instead of using state, we will use\n        // redux state\n        const baseTime = renderStartTime()\n        let endTime = []\n\n        let setHour = ''\n        let setMin = ''\n        // You will be using setHour and setMin in order to compare to the\n        // times in the baseTime so you will know which time to put inin the endTime\n\n        // In order to compare, you have to convert all the tiems into the 1-24 hour time\n        if (this.props.startTime.includes(\"PM\")){\n          setHour = parseInt(this.props.startTime.substring(0,2))\n          setMin = parseInt(this.props.startTime.substring(3,5))\n          if (setHour !== 12 ){\n            setHour = setHour + 12\n          }} else if (this.props.startTime.includes(\"AM\")){\n            setHour = parseInt(this.props.startTime.substring(0,2))\n            setMin = parseInt(this.props.startTime.substring(3,5))\n            if (setHour === 12){\n              setHour = 0\n            }\n          }\n\n          // Now we will run through the basetimes and then convert them to\n          // the 1-24 hour format the from there compare what needs date is put into the\n          // end date and what date does not get put in there\n        for( let i = 0; i< baseTime.length; i++){\n         if(baseTime[i].key.includes('PM')){\n           let hour = parseInt(baseTime[i].key.substring(0,2))\n           if (hour !== 12){\n             hour = hour+12\n           }\n           const min = baseTime[i].key.substring(3,5)\n           if (setHour < hour){\n             endTime.push(\n              <Option key = {baseTime[i].key}>{baseTime[i].key}</Option>\n            )} else if (setHour === hour){\n              if(setMin < min){\n                endTime.push(\n                  <Option key = {baseTime[i].key}>{baseTime[i].key}</Option>\n                )\n              }\n            }\n         } else if (baseTime[i].key.includes(\"AM\")) {\n           let hour = parseInt(baseTime[i].key.substring(0,2))\n           if (hour === 12){\n             hour = 0\n           }\n           const min = baseTime[i].key.substring(3,5)\n           if( setHour < hour ) {\n             endTime.push(\n               <Option key = {baseTime[i].key}>{baseTime[i].key}</Option>\n            )} else if (setHour === hour){\n              if (setMin < min){\n                endTime.push(\n                  <Option key = {baseTime[i].key}>{baseTime[i].key}</Option>\n                )\n              }\n            }\n          }\n        }\n        return (endTime)\n      }\n    }\n\n\n\n    onStartDateChange = (event, value) => {\n      const { change } = this.props\n\n      // So this is where the end Date will be changed if the startDate or endDate\n      // seems to be ahead of the endDate\n      console.log(value)\n      if (dateFns.isAfter(new Date(value),new Date(this.props.endDate))){\n        change('endDate', value)\n      }\n    }\n\n\n\n    handleStartTimeChange = (event, value) => {\n      const { change } = this.props\n      // So this handleStartTimechange pretty much is used to automatically\n      // change the values of the endTime, the only difference between this\n      // and that of the ReactAddEventForm is that we dont need to change the\n      // startTime value just the endTime value will be affected\n\n\n      console.log(value)\n      change('startTime', value)\n\n      // Like every other time related events we have to converted all\n      let startHour = parseInt(value.substring(0,2))\n      let startMin = parseInt(value.substring(3,5))\n      let ampm = value.substring(5,8)\n      let endHour = parseInt(this.props.endTime.substring(0,2))\n      let endMin = parseInt(this.props.endTime.substring(3,5))\n      let endTime = ''\n\n      console.log(startHour)\n\n\n\n      // These if statement is used to change the startTime values to the 1-24 hour format\n      if(value.includes('PM')){\n        if(startHour !== 12 ){\n          startHour = startHour + 12\n        }\n      } else if (value.includes('AM')){\n        if(startHour === 12){\n          startHour = 0\n        }\n      }\n\n      // These if statements here is to change the end time values from 1-2 to\n      // 1-24 for the end time\n      if (this.props.endTime.includes('PM')){\n        if (endHour !==  12){\n          endHour = endHour + 12\n        }\n      } else if (this.props.endTime.includes('AM')){\n        if(endHour === 12){\n          endHour = 0\n        }\n      }\n\n      // Now this is where the comparison of the times comes in an all the senarios\n      // For this one,for times that the start hour is smaller than that of the\n      // end time you don't need to change the value because due to the redux from\n      // the value of the start time will chagne it self\n      if(startHour === endHour ){\n        if (startMin > endMin){\n          endMin = \"00\"\n          endHour = startHour + 1\n          console.log(startHour)\n          console.log(endHour)\n          if (startHour === 11 && ampm === 'AM'){\n            endTime = '12:'+endMin + ' PM'\n          } else if (startHour === 23 && ampm === \" PM\"){\n            endTime = '12:'+endMin + ' AM'\n          } else {\n            if (endHour < 10){\n              endHour = '0'+endHour\n            } else {\n               if(ampm === ' AM'){\n                 endHour = endHour\n               } else if (ampm === ' PM'){\n                 endHour = endHour-12\n                 if (endHour < 10){\n                   endHour = '0'+endHour\n                 }\n               }\n             }\n             endTime = endHour + ':'+endMin+ampm\n\n          }\n\n\n          change('endTime', endTime )\n        } else if (startMin === endMin ){\n          // This is the case where the times are identical to each other\n          // REMEMBER THAT ENDHOUR AND STARTHOUR ARE USING THE 1-24 TIME\n          console.log(startHour, endHour)\n          if (startHour === 0 && ampm === ' AM' && startMin === 0){\n            endTime = '12:30 AM'\n          } else if (startHour === 12 && ampm === ' PM' && startMin === 0){\n            endTime = '12:30 PM'\n          } else {\n            if (startMin === 30){\n              endMin = '00'\n              if (startHour === 12){\n                endHour = '01'\n                endTime = endHour + ':'+endMin+' PM'\n              } else if (startHour === 11 && ampm === ' AM'){\n                  endTime =   '12:' + endMin + ' PM'\n                } else if ((startHour-12) === 11 && ampm === ' PM'){\n                  endTime =  '12:' + endMin + ' AM'\n                }\n              else {\n                console.log(endHour)\n                endHour = startHour +1\n                  if (endHour<10){\n                      endHour = '0'+endHour\n                  } else {\n                    if(ampm === ' AM'){\n                      endHour = endHour\n                    } else if (ampm === ' PM'){\n                      endHour = endHour-12\n                      if (endHour < 10){\n                        endHour = '0'+endHour\n                      }\n                    }\n                  }\n                endTime = endHour + ':' +endMin+ampm\n              }\n            } else if (startMin === 0){\n              endMin = '30'\n              console.log(ampm)\n              if (endHour<10){\n                  endHour = '0'+endHour\n              } else {\n                if(ampm === ' AM'){\n                  console.log('am')\n                  endHour = endHour\n                } else if (ampm === ' PM'){\n                  console.log('pm')\n                  if (endHour === 12){\n                    endHour = 12\n                  }else {\n                    endHour = endHour-12\n                    if (endHour < 10){\n                      endHour = '0'+endHour\n                    }\n                  }\n                }\n              }\n              endTime = endHour + ':'+endMin +ampm\n            }\n          }\n\n          change('endTime', endTime)\n        }\n      } else if (startHour > endHour) {\n        // let startHour = parseInt(time.substring(0,2))\n        // let startMin = parseInt(time.substring(3,5))\n        if (startHour === 11 && ampm === ' AM' && startMin === 30){\n          endTime = '12:00 PM'\n        } else if (startHour === 23 && ampm === ' PM' && startMin === 30){\n          endTime = '12:00 AM'\n        } else {\n          if (startMin === 30){\n            startMin = \"00\"\n            startHour = startHour + 1\n          } else if (startMin !== 30){\n            startMin = '30'\n          }\n          if (startHour < 10){\n            startHour = '0'+startHour\n          } else{\n            if(ampm === ' AM'){\n              startHour = startHour\n            } else if (ampm === ' PM'){\n              startHour = startHour-12\n              if (startHour < 10){\n                if (startHour === 0){\n                  startHour = '12'\n                } else {\n                  startHour = '0'+startHour\n                }\n              }\n            }\n          }\n\n\n            endTime = startHour + ':'+startMin+ampm\n        }\n\n\n\n        change('endTime', endTime)\n      }\n\n    }\n\n    handleEndTimeChange = (event) => {\n      console.log(event)\n\n      const {change} = this.props\n      return (\n        console.log('endTime')\n        // change('endTime', event)\n      )\n    }\n\n\n    renderHeader(){\n      // This is to render the mini Calendar month givien the date range\n      var eventSyncWeekText=\"'s calendar\"\n      const dateFormat = 'MMMM yyyy'\n      const minDate = this.props.minDate\n      return(\n        <div className = 'header'>\n          <div className = 'col-center'>\n            <span style={{display: 'inline-block'}}>\n              {dateFns.format(new Date(minDate) , dateFormat)}\n            </span>\n\n          </div>\n          <span className = 'col-center' style={{marginLeft:'400px', display: 'inline-block'}}>\n            {this.props.userFriend.first_name}{eventSyncWeekText}\n          </span>\n        </div>\n      )\n    }\n\n    renderDays() {\n      // This is just to render out the days in the date range\n      const dateFormat = 'iii'\n      const dayFormat = 'd'\n      const days = []\n\n      console.log (new Date(this.props.minDate))\n      let minDate = dateFns.addDays(new Date(this.props.minDate),1)\n      let maxDate = dateFns.addDays(new Date(this.props.maxDate),1)\n      // Added one day so that you can compare them to make sure things are more accurate\n      // Plus when you do new date it think it goes back 7 hours, and since the max and min\n      // dates are at 00\n      const difference = -dateFns.differenceInCalendarDays(new Date(minDate), new Date(maxDate))\n      let cloneMinDate = this.props.minDate\n\n      for(let i = 0; i<difference; i++){\n          const cloneCloneMinDate = cloneMinDate\n          days.push(\n            <div\n            className = 'syncCol col-center '\n            key = {i}\n            >\n              {dateFns.format(dateFns.addDays(minDate, i), dateFormat)}\n              <br />\n              {dateFns.format(dateFns.addDays(minDate, i), dayFormat)}\n            </div>\n          )\n          cloneMinDate = dateFns.addDays(cloneMinDate, 1)\n      }\n      return <div className = 'days row'>{days}</div>\n    }\n\n    renderSide() {\n      // Render side, you would want to start off at 11:30 am and end at 11:30 pm\n      const dateFormat = 'h a'\n      const hour = []\n      let startHour = dateFns.addHours(dateFns.startOfDay(new Date(this.props.minDate)), 1)\n      for (let i = 0; i<23; i++){\n        const formattedHour = dateFns.format(startHour, dateFormat)\n        hour.push(\n          <div\n            className = 'cell'\n            key = {hour}\n          >\n          <span className = 'number'>{formattedHour}</span>\n          </div>\n        )\n        startHour = dateFns.addHours(startHour, 1)\n      }\n      return <div className= 'body'> {hour} </div>\n    }\n\n    renderWeekCell(events){\n      console.log(events)\n      // Render the week cell, so what you want to do is pick the first to be the minDate and\n      // the last day will be the maxDate\n      // You will loop through each hour of each day and then redner through each day of the week\n      const minDate = dateFns.addDays(new Date(this.props.minDate),1);\n      const maxDate = dateFns.addDays(new Date(this.props.maxDate),1);\n      // This will be different from the calendar week calendar in that it doesn't start from the beginning\n      // of the week but rather it will start from beginning of the date range\n      const hourFormat = 'h a'\n      const dayFormat = 'd MMMM'\n      // This hour list will hold 24 items, each list will be for each hour of each day 5x24\n      const hours = []\n\n       // This list will hold all the events\n       let toDoStuff = []\n       // This will be a list with teh same hour of all the days\n       let days = []\n       // You will need the start day and the start hour\n       // The start day will be the minDate\n\n       let date = minDate\n       const startHourDay = dateFns.startOfDay(date);\n       const endHourDay = dateFns.endOfDay(date);\n\n       let formattedDay = '';\n\n       let hour = startHourDay;\n       let formattedHour = '';\n\n       // The counter is to give each box a seperate id so that it will highlight when you click on it\n       let counter = 0\n\n       const difference = -dateFns.differenceInCalendarDays(new Date(minDate), new Date(maxDate))\n\n\n\n       // The plan for the loop is ot have a while loop that loops thorugh each hour of the same day\n       // then go down to the next hour then go through all the days\n\n       while (hour <= endHourDay){\n         // When adding things to the calendar you have to match the date and the hour\n         console.log(hour)\n         for (let i = counter; i< (counter+difference); i++){\n            const cloneDay = date\n            const cloneHour = hour\n            const checkMin = dateFns.getMinutes(new Date(hour))\n            console.log(cloneDay, cloneHour)\n            formattedHour = dateFns.format(hour, hourFormat)\n            formattedDay = dateFns.format(date, dayFormat)\n            // This loop will loop thorugh all the events and if the hour and day matches and it will\n            // add it to the toDoStuff which will loopp thorugh each each cell then it will be\n            // cleared out again\n            for (let item = 0; item<events.length; item++){\n              // You gotta make the end time minus one because if you dont it will fill\n              //  up the cells of that time after it so thats not good\n              const startHour = dateFns.getHours(new Date(events[item].start_time))\n              const startMin = dateFns.getMinutes(new Date(events[item].start_time))\n              const endHour = dateFns.getHours(new Date(events[item].end_time))\n              const endMin = dateFns.getMinutes(new Date(events[item].end_time))\n              const curHour = dateFns.getHours(new Date(hour))\n              const curMin = dateFns.getMinutes(new Date(hour))\n\n              const sameDayStart = dateFns.isSameDay(new Date(events[item].start_time), cloneDay)\n              const sameDayEnd = dateFns.isSameDay(new Date(events[item].end_time), cloneDay)\n            // First is to get the start time to be there. Gotta make sure you get\n            // minutes correct\n\n            if (\n              startHour === 23\n            ){\n\n              if(\n               startMin === 30\n               &&\n               startHour === curHour\n               &&\n               startMin === curMin\n               &&\n               (sameDayStart || sameDayEnd)\n             ){\n               console.log('right here')\n               toDoStuff.push(\n                 events[item]\n               )\n             }\n              else if(\n                startMin === 0\n                &&\n                startMin === curMin\n                &&\n                startHour === curHour\n                &&\n                (sameDayStart || sameDayEnd)\n              ) {\n\n                toDoStuff.push(\n                  events[item]\n                )\n              }\n\n\n              if (endHour === 0){\n                if (\n                  startMin === 0\n                  &&\n                  startHour === curHour\n                  &&\n                  (sameDayStart || sameDayEnd)\n                ){\n                  toDoStuff.push(\n                    events[item]\n                  )\n                } else if(\n                  startMin === 30\n                  &&\n                  startMin === curMin\n                  &&\n                  startHour === curHour\n                  &&\n                  (sameDayStart || sameDayEnd)\n                ){\n                  toDoStuff.push(\n                    events[item]\n                  )\n                }\n\n              }\n\n\n            }\n            else {\n              if (\n                startHour === curHour\n                &&\n                startMin === curMin\n                &&\n                (sameDayStart || sameDayEnd)\n\n              ){\n                console.log('test1')\n                toDoStuff.push(\n                  events[item]\n                )\n              }\n              if(\n                endHour === curHour\n                &&\n                endMin === 30\n                &&\n                endMin-30 === curMin\n                &&\n                (sameDayStart || sameDayEnd)\n              ){\n                console.log('test1')\n                toDoStuff.push(\n                  events[item]\n                )\n              } else if (\n                endMin === 0\n                &&\n                endHour -1 === curHour\n                &&\n                endMin+30 === curMin\n                &&\n                (sameDayStart || sameDayEnd)\n              ){\n                console.log('test1')\n                toDoStuff.push(\n                  events[item]\n                )\n              }\n\n              if(\n                startMin === 30\n\n              ){\n                if(\n                  startHour < curHour\n                  &&\n                  endHour > curHour\n                  &&\n                  (0 === curMin\n                  ||\n                  30 === curMin)\n                  &&\n                  (sameDayStart || sameDayEnd)\n                ){\n                  console.log('test1')\n                  toDoStuff.push(\n                    events[item]\n                  )\n                }\n\n              } else if (\n                startMin === 0\n\n              ){\n                if (\n                  startHour <= curHour\n                  &&\n                  endHour> curHour\n                  &&\n                  (sameDayStart || sameDayEnd)\n                ){\n                  toDoStuff.push(\n                    events[item]\n                  )\n                }\n\n              }\n\n\n            }\n\n            // RENDER THE VERY FIRST CELL OF THE START TIME\n\n\n\n\n\n            }\n\n            // You can always have access to the events, you just got to loop through\n            // toDoStruff in the if below if you want to check\n            if (toDoStuff.length > 0){\n              days.push(\n                <div\n                className = {`syncCol disabled ${checkMin === 0 ? \"nonhourcellT\" : \"nonhourcellB\" }`}\n                  // className = 'syncCol nonhourcell disabled'\n                >\n                </div>\n              )\n            } else {\n              days.push(\n                <div\n                  style = {{background: this.color(i)}}\n                  className = {`syncCol ${checkMin === 0 ? \"hourcellT\" : \"hourcellB\"}`}\n                  // className = 'syncCol hourcell'\n                  onClick = {(e) => this.onDayHourClick(e, i, cloneDay, cloneHour)}\n                >\n                <span className = 'number'></span>\n                </div>\n              )\n            }\n            toDoStuff = []\n            date = dateFns.addDays(date, 1)\n         }\n         // After you loop thorugh the hour, you will want to put that hur into the hour\n         // list and then clear out days list ot redo it again then you add in the next hour, then\n         // set the start day again to the start of the week then run it throuhg again\n         // Remember teh date must be resetted before adding the hour because\n         // of the while condition\n         hours.push(\n           <div className = 'row'>\n            {days}\n           </div>\n         )\n         counter = counter + 7\n         days = []\n         date = minDate\n         hour = dateFns.addMinutes(hour, 30)\n       }\n\n       return <div className = 'body'>{hours}</div>\n    }\n\n    onDayHourClick = (e,position, day, hour) => {\n\n      const selectedHour = dateFns.getHours(hour)\n      const selectedYear = dateFns.getYear(day)\n      const selectedMonth = dateFns.getMonth(day)\n      const selectedDate = dateFns.getDate(day)\n      const selectedMin = dateFns.getMinutes(hour)\n\n      const finalSelectedDate = new Date(selectedYear, selectedMonth, selectedDate, selectedHour, selectedMin)\n      if (this.state.active === position){\n        this.setState({\n          active: null,\n          selectedDate: null\n        })\n      } else {\n        this.setState({\n          active: position,\n          selectedDate: finalSelectedDate\n        })\n      }\n      console.log(finalSelectedDate)\n    }\n\n    color = (position) => {\n      console.log(position)\n      // Just the color of the selected time on the pick event sync calendar\n      if (this.state.active === position-7){\n        return '#91d5ff'\n      }\n      if (this.state.active === position){\n        return '#91d5ff';\n      }\n\n      return '';\n    }\n\n    submit = (value) => {\n      // On this onSubmit, you want to first get both the date, the\n      // event information, and both the user and then you will pass into the the websocket\n      // stuff and then pass it into the backend into the consumer then create the new notificaiton\n      // then group send it, then pass into redux in the front end (make sure to crate the callbacks)\n      // The value includes\n\n      // IN PROGRESS OF CHECKING\n      console.log(value)\n      console.log(this.props.currentUser)\n      console.log(this.props.userFriend)\n      if (this.state.selectedDate === null){\n        throw new SubmissionError({\n          _error: '*Please pick a date'\n        })\n      } else {\n        const notificationId = this.props.notificationId\n        const startTime = this.state.selectedDate\n        const endTime = dateFns.addHours(startTime, 1)\n\n        let content = ''\n        let location = ''\n        if (value.content){\n          content = value.content\n        }\n        if (value.location){\n          location = value.location\n        }\n        // For submitEvent object:\n        // title, value, location, event color will just be strings\n        // person, and invited will be a list of usernames\n        // repeatCondition will be none\n        // the host will the id of the actor\n        const submitEvent = {\n          command: 'add_sync_event',\n          title: value.title,\n          person: [this.props.currentUser, this.props.userFriend.username],\n          invited: [this.props.userFriend.username],\n          content: content,\n          location: location,\n          eventColor: value.eventColor,\n          startDate: startTime,\n          endDate: endTime,\n          repeatCondition: \"none\",\n          host: this.props.id,\n        }\n        const submitNotification = {\n          command: 'send_new_event_sync_notification',\n          actor: this.props.currentUser,\n          recipient: this.props.userFriend.username,\n          date: this.state.selectedDate\n        }\n        console.log(submitEvent)\n        // So the webSocket is to send the info into the backend in tho the channles to make the\n        // event for both parties\n        CalendarEventWebSocketInstance.sendEvent(submitEvent);\n        // This is to send a notification to the other person that an event was choosen\n        NotificationWebSocketInstance.sendNotification(submitNotification)\n        this.props.closePickEventSyncModal()\n        // // This is just to delete the notificaiton\n        authAxios.delete('http://127.0.0.1:8000/userprofile/notifications/delete/'+notificationId)\n        this.props.deleteNotification(notificationId)\n        this.openNotification('bottomLeft', this.state.selectedDate)\n      }\n    }\n\n    openNotification = (placement,date)  => {\n      // this is to show a small notification on the side to show that the user\n      // added an event into his calendar\n      console.log(date)\n      const day = dateFns.format(new Date(date), 'MMM d, yyyy')\n      const time = dateFns.format(new Date(date), 'h a')\n      notification.info({\n        message: 'You set an event on '+ day + ' at ' + time + '.',\n        placement,\n      })\n    }\n\n\n    timeConvertFunction = (time) => {\n      // This fucntion will take in a 1-24 hour time\n      // and then returna  1-12 am/pm time\n      // This fucntion will take in the time as a string in the 1-24 hour\n      // time format\n\n      console.log(time)\n      if (time !== null){\n        let hour = time.substring(0, 2)\n        let min = time.substring(3, 5)\n        let final_time = ''\n        if (hour > 12 ){\n          hour = hour - 12\n          if (hour < 10){\n              final_time = \"0\"+hour + ':'+min+' PM'\n          } else {\n              final_time = hour + ':'+min+' PM'\n          }\n        } else if(hour <= 12 ){\n          if (hour == 0){\n            final_time = '12:' + min + ' AM'\n          } else if (hour == 12) {\n            final_time = '12:' + min + ' PM'\n          } else {\n            final_time = hour +':'+ min+' AM'\n          }\n        }\n        console.log(final_time)\n        // MIGHT HAVE TO TAKE INTO CONSIDERATION THE 12AM AND 12 PM\n        return final_time\n      }\n\n\n    }\n\n    getInitialValue = () => {\n      // This will pass an initial value through the Field\n\n      // There is an issue with the utc_start and utc_end and start_time and end time\n      const date_start = new Date(this.state.selectedDate)\n      const utc_start = dateFns.addHours(date_start, date_start.getTimezoneOffset()/60)\n      const date_end = new Date(this.state.end_date)\n      const utc_end = dateFns.addHours(date_end, date_end.getTimezoneOffset()/60)\n      // const start_time = dateFns.getHours(date_start)\n      // const end_time = dateFns.getMinutes(date_start)\n\n      // console.log(start_time)\n      return{\n        // start_time: dateFns.format(new Date(this.props.start_time), 'yyyy-MM-dd HH:mm a'),\n        // end_time: dateFns.format(new Date(this.props.end_time), 'yyyy-MM-dd HH:mm a'),\n        // dateRange: [dateFns.format(date_start, 'yyyy-MM-dd'), dateFns.format(date_end, 'yyyy-MM-dd')],\n        dateRange: [moment(this.props.start_date, 'YYYY-MM-DD'), moment(this.props.end_date, 'YYYY-MM-DD')],\n        startDate: moment(this.props.start_date, 'YYYY-MM-DD'),\n        endDate: moment(this.props.end_date, 'YYYY-MM-DD'),\n        location: this.props.location,\n        eventColor: this.props.eventColor,\n        repeatCondition: 'none',\n        friends: [],\n        eventColor:'#91d5ff',\n        startTime:\"12:00 AM\",\n        endTime:\"01:00 AM\",\n        whichDay:3,\n      }\n    }\n\n\n\n    render() {\n      console.log(this.state)\n      console.log(this.props)\n      return (\n        <div className = 'eventSyncCalendarContainer'>\n          <div className = 'syncCalendar'>\n            <div className = 'syncHeader'>\n              {this.renderHeader()}\n              {this.renderDays()}\n            </div>\n            <div className = 'syncBody'>\n              <div className = 'timecol'>\n                {this.renderSide()}\n              </div>\n              <div className = 'syncGrid'>\n              {this.renderWeekCell(this.props.filterEvent)}\n              </div>\n            </div>\n          </div>\n\n          <Row style={{}}>\n\n            <PickEventSyncUserProfileCard data = {this.props.userFriend}/>\n            <PickEventSyncForm\n            onSubmit = {this.submit}\n            initialValues = {this.getInitialValue()}\n            active = {this.state.active} />\n\n\n            <Col span={8}></Col>\n\n\n\n\n          </Row>\n\n        </div>\n      )\n    }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    minDate: state.eventSync.minDate,\n    maxDate: state.eventSync.maxDate,\n    filterEvent: state.eventSync.filterEvent,\n    currentUser: state.auth.username,\n    id: state.auth.id,\n    userFriend: state.eventSync.userFriend,\n    notificationId: state.eventSync.notificationId\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    closePickEventSyncModal: () => dispatch(eventSyncActions.closePickEventSyncModal()),\n    deleteNotification: notificationId => dispatch(notificationsActions.deleteNotification(notificationId))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PickEventSyncDay);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EventSyncForms/PickEventSyncWeek.js",["1182","1183","1184","1185","1186","1187","1188","1189","1190","1191","1192","1193","1194","1195","1196","1197","1198","1199","1200","1201","1202","1203","1204","1205","1206","1207","1208","1209","1210","1211","1212","1213","1214","1215","1216","1217","1218","1219"],"import React from 'react';\nimport { connect } from 'react-redux';\nimport * as dateFns from 'date-fns';\nimport '../PersonalCalCSS/EventSync.css';\nimport { DatePicker, TimePicker, Button, Input, Select, Radio, Card, Row, Col, notification } from 'antd';\nimport PickEventSyncForm from './PickEventSyncForm';\nimport CalendarEventWebSocketInstance from '../../../calendarEventWebsocket';\nimport NotificationWebSocketInstance from '../../../notificationWebsocket';\nimport { Field, reduxForm, reset, formValueSelector, SubmissionError } from 'redux-form';\nimport * as eventSyncActions from '../../../store/actions/eventSync';\nimport * as notificationsActions from '../../../store/actions/notifications';\nimport { authAxios } from '../../../components/util';\nimport PickEventSyncUserProfileCard from './PickEventSyncUserProfileCard.js';\nimport moment from 'moment';\n\nconst { Option } = Select;\n\nconst { TextArea } = Input\nconst required = value => value ? undefined : '*Required'\nconst renderField = (field) => {\nreturn (\n    <Input\n    {...field.input}\n    type = {field.type}\n    placeholder= {field.placeholder}\n    className = 'box'/>\n  )\n}\n\nconst renderLocationField = (field) => {\n  console.log(field.meta)\n  return (\n    <span>\n    <Input style={{width:'50%',fontSize:'14px'}}\n    {...field.input}\n    type = {field.type}\n    placeholder= {field.placeholder}\n    className = 'box'/>\n\n    </span>\n  )\n}\n\nconst renderStartDateSelect = (field) => {\n  // This const will render the start time of the event\n  // So before you choose any value you want to have the field\n  // input as a value in your select... because the input value will be the value\n  // that will be return to the field when you input a value\n  // Bascially everything goes through the value first, and what ever is here inspect\n  // is just for show\n\n\n  console.log(field)\n  return (\n    <Select\n      // {...field.input}\n      style = {{width: '115px', marginRight:'15px'}}\n      onChange = {field.input.onChange}\n      value = {field.input.value}\n      className = 'timebox'>\n\n    {field.children}\n    </Select>\n  )\n}\n\n\nconst renderStartTime = () => {\n    const timeFormat = \"hh:mm a\"\n    const time = []\n    let start = dateFns.startOfDay(new Date())\n    let startHour = dateFns.getHours(new Date())\n    let startMins = dateFns.getMinutes(new Date())\n    for (let i = 0; i< 48; i++){\n      const cloneTime = startHour + ':' + startMins\n      time.push(\n        <Option\n        key = {dateFns.format(start, timeFormat)}\n        value= {dateFns.format(start, timeFormat)} >\n        {dateFns.format(start, timeFormat)}\n        </Option>\n      )\n      start = dateFns.addMinutes(start, 30)\n    }\n    console.log(time)\n    return time\n  }\n\nconst afterSubmit = (result, dispatch) =>\n  dispatch(reset('event sync add event'))\n\nconst renderStartDate = (field) => {\n  console.log(field)\n  return (\n    <DatePicker\n    onChange = {field.input.onChange}\n    value = {field.input.value}\n    style = {{width: '110px', marginRight:'15px'}}\n    suffixIcon={<div></div>}\n    allowClear = {false}\n     />\n  )\n}\n\n\nclass PickEventSyncWeek extends React.Component{\n\n    state = {\n      active: null,\n      selectedDate: null,\n    }\n\n\n\n    renderHeader(){\n      // The difference between the week and the day is that\n      // the day cal is just for the next day so  you want to\n      // switch all the minDates with maxdates\n      const dateFormat = 'MMMM yyyy'\n      const minDate = this.props.maxDate\n      return(\n        <div className = 'header'>\n          <div className = 'col-center'>\n            <span>\n              {dateFns.format(new Date(minDate) , dateFormat)}\n            </span>\n          </div>\n        </div>\n      )\n    }\n\n    renderDays() {\n      // This is just to render out the days in the date range\n      const dateFormat = 'iii'\n      const dayFormat = 'd'\n      const days = []\n\n      let minDate = dateFns.addDays(new Date(this.props.minDate),1)\n      let maxDate = dateFns.addDays(new Date(this.props.maxDate),1)\n\n      const difference = -dateFns.differenceInCalendarDays(new Date(minDate), new Date(maxDate))\n      let cloneMaxDate = this.props.maxDate\n\n      // This is only for one day but the css and everything is already set up\n      for(let i = 0; i<difference; i++){\n          const cloneCloneMaxDate = cloneMaxDate\n          days.push(\n            <div\n            className = 'syncCol col-center '\n            key = {i}\n            >\n              {dateFns.format(dateFns.addDays(minDate, i), dateFormat)}\n              <br />\n              {dateFns.format(dateFns.addDays(minDate, i), dayFormat)}\n            </div>\n          )\n          cloneMaxDate = dateFns.addDays(cloneCloneMaxDate, 1)\n      }\n      return <div className = 'days row'>{days}</div>\n    }\n\n    renderSide() {\n      // Render side, you would want to start off at 11:30 am and end at 11:30 pm\n      const dateFormat = 'h a'\n      const hour = []\n      let startHour = dateFns.addHours(dateFns.startOfDay(new Date(this.props.maxDate)), 1)\n      for (let i = 0; i<23; i++){\n        const formattedHour = dateFns.format(startHour, dateFormat)\n        hour.push(\n          <div\n            className = 'cell'\n            key = {hour}\n          >\n          <span className = 'number'>{formattedHour}</span>\n          </div>\n        )\n        startHour = dateFns.addHours(startHour, 1)\n      }\n      return <div className= 'body'> {hour} </div>\n    }\n\n    renderWeekCell(events){\n      console.log(events)\n      // Render the week cell, so what you want to do is pick the first to be the minDate and\n      // the last day will be the maxDate\n      // You will loop through each hour of each day and then redner through each day of the week\n\n      // Probally have to fix this later when we readjust the timezone issue.\n      const minDate = dateFns.addHours(new Date(this.props.minDate),7);\n      const maxDate = dateFns.addHours(new Date(this.props.maxDate),7);\n      // This will be different from the calendar week calendar in that it doesn't start from the beginning\n      // of the week but rather it will start from beginning of the date range\n      console.log(this.props.minDate, this.props.maxDate)\n      console.log(minDate, maxDate)\n      const hourFormat = 'h a'\n      const dayFormat = 'd MMMM'\n      // This hour list will hold 24 items, each list will be for each hour of each day 5x24\n      const hours = []\n\n       // This list will hold all the events\n       let toDoStuff = []\n       // This will be a list with teh same hour of all the days\n       let days = []\n       // You will need the start day and the start hour\n       // The start day will be the minDate\n       let date = minDate\n       const startHourDay = dateFns.startOfDay(date);\n       const endHourDay = dateFns.endOfDay(date);\n\n       console.log(startHourDay)\n\n       let formattedDay = '';\n\n       let hour = startHourDay;\n       let formattedHour = '';\n\n       // The counter is to give each box a seperate id so that it will highlight when you click on it\n       let counter = 0\n\n       const difference = -dateFns.differenceInCalendarDays(new Date(minDate), new Date(maxDate))\n\n       // The plan for the loop is ot have a while loop that loops thorugh each hour of the same day\n       // then go down to the next hour then go through all the days\n\n       while (hour <= endHourDay){\n         // When adding things to the calendar you have to match the date and the hour\n         for (let i = counter; i< (counter+difference); i++){\n            const cloneDay = date\n            const cloneHour = hour\n            const checkMin = dateFns.getMinutes(new Date(hour))\n            formattedHour = dateFns.format(hour, hourFormat)\n            formattedDay = dateFns.format(date, dayFormat)\n            // This loop will loop thorugh all the events and if the hour and day matches and it will\n            // add it to the toDoStuff which will loopp thorugh each each cell then it will be\n            // cleared out again\n            for (let item = 0; item<events.length; item++){\n              const startHour = dateFns.getHours(new Date(events[item].start_time))\n              const startMin = dateFns.getMinutes(new Date(events[item].start_time))\n              const endHour = dateFns.getHours(new Date(events[item].end_time))\n              const endMin = dateFns.getMinutes(new Date(events[item].end_time))\n              const curHour = dateFns.getHours(new Date(hour))\n              const curMin = dateFns.getMinutes(new Date(hour))\n\n\n              const sameDayStart = dateFns.isSameDay(new Date(events[item].start_time), cloneDay)\n              const sameDayEnd = dateFns.isSameDay(new Date(events[item].end_time), cloneDay)\n\n              console.log(startHour, startMin)\n              console.log(sameDayStart, sameDayEnd, startHour, startMin,new Date(events[item].start_time), cloneDay )\n\n              if (\n                startHour === 23\n              ){\n\n                if(\n                 startMin === 30\n                 &&\n                 startHour === curHour\n                 &&\n                 startMin === curMin\n                 &&\n                 (sameDayStart || sameDayEnd)\n               ){\n                 console.log('right here')\n                 toDoStuff.push(\n                   events[item]\n                 )\n               }\n                else if(\n                  startMin === 0\n                  &&\n                  startMin === curMin\n                  &&\n                  startHour === curHour\n                  &&\n                  (sameDayStart || sameDayEnd)\n                ) {\n\n                  toDoStuff.push(\n                    events[item]\n                  )\n                }\n\n\n                if (endHour === 0){\n                  if (\n                    startMin === 0\n                    &&\n                    startHour === curHour\n                    &&\n                    (sameDayStart || sameDayEnd)\n                  ){\n                    toDoStuff.push(\n                      events[item]\n                    )\n                  } else if(\n                    startMin === 30\n                    &&\n                    startMin === curMin\n                    &&\n                    startHour === curHour\n                    &&\n                    (sameDayStart || sameDayEnd)\n                  ){\n                    toDoStuff.push(\n                      events[item]\n                    )\n                  }\n\n                }\n\n\n              }\n              else {\n                if (\n                  startHour === curHour\n                  &&\n                  startMin === curMin\n                  &&\n                  (sameDayStart || sameDayEnd)\n\n                ){\n                  console.log('test1')\n                  toDoStuff.push(\n                    events[item]\n                  )\n                }\n                if(\n                  endHour === curHour\n                  &&\n                  endMin === 30\n                  &&\n                  endMin-30 === curMin\n                  &&\n                  (sameDayStart || sameDayEnd)\n                ){\n                  console.log('test1')\n                  toDoStuff.push(\n                    events[item]\n                  )\n                } else if (\n                  endMin === 0\n                  &&\n                  endHour -1 === curHour\n                  &&\n                  endMin+30 === curMin\n                  &&\n                  (sameDayStart || sameDayEnd)\n                ){\n                  console.log('test1')\n                  toDoStuff.push(\n                    events[item]\n                  )\n                }\n\n                if(\n                  startMin === 30\n\n                ){\n                  if(\n                    startHour < curHour\n                    &&\n                    endHour > curHour\n                    &&\n                    (0 === curMin\n                    ||\n                    30 === curMin)\n                    &&\n                    (sameDayStart || sameDayEnd)\n                  ){\n                    console.log('test1')\n                    toDoStuff.push(\n                      events[item]\n                    )\n                  }\n\n                } else if (\n                  startMin === 0\n\n                ){\n                  if (\n                    startHour <= curHour\n                    &&\n                    endHour> curHour\n                    &&\n                    (sameDayStart || sameDayEnd)\n                  ){\n                    toDoStuff.push(\n                      events[item]\n                    )\n                  }\n\n                }\n\n\n              }\n\n\n            }\n\n            // You can always have access to the events, you just got to loop through\n            // toDoStruff in the if below if you want to check\n            if (toDoStuff.length > 0){\n              days.push(\n                <div\n                  className = {`syncCol disabled ${checkMin === 0 ? \"nonhourcellT\":\"nonhourcellB\"} `}\n                >\n                </div>\n              )\n            } else {\n              days.push(\n                <div\n                  style = {{background: this.color(i)}}\n                  className = {`syncCol ${checkMin === 0 ? \"hourcellT\" : \"hourcellB\"}`}\n                  onClick = {(e) => this.onDayHourClick(e, i, cloneDay, cloneHour)}\n                >\n                <span className = 'number'></span>\n                </div>\n              )\n            }\n            toDoStuff = []\n            date = dateFns.addDays(date, 1)\n         }\n         // After you loop thorugh the hour, you will want to put that hur into the hour\n         // list and then clear out days list ot redo it again then you add in the next hour, then\n         // set the start day again to the start of the week then run it throuhg again\n         // Remember teh date must be resetted before adding the hour because\n         // of the while condition\n         hours.push(\n           <div className = 'row'>\n            {days}\n           </div>\n         )\n         counter = counter + 1\n         days = []\n         date = minDate\n         hour = dateFns.addMinutes(hour, 30)\n       }\n\n       return <div className = 'body'>{hours}</div>\n    }\n\n    onDayHourClick = (e,position, day, hour) => {\n      console.log(hour)\n      const selectedHour = dateFns.getHours(hour)\n      const selectedMin = dateFns.getMinutes(hour)\n      const selectedYear = dateFns.getYear(day)\n      const selectedMonth = dateFns.getMonth(day)\n      const selectedDate = dateFns.getDate(day)\n      const finalSelectedDate = new Date(selectedYear, selectedMonth, selectedDate, selectedHour, selectedMin)\n      if (this.state.active === position){\n        this.setState({\n          active: null,\n          selectedDate: null\n        })\n      } else {\n        this.setState({\n          active: position,\n          selectedDate: finalSelectedDate\n        })\n      }\n      console.log(finalSelectedDate)\n    }\n\n    renderEndTimeSelect = () => {\n    console.log(this.props.startTime)\n\n    if (this.props.startTime !== undefined ){\n      // So basically the way I am making this will be the same way I made the\n      // date pick in the addeventform. But instead of using state, we will use\n      // redux state\n      const baseTime = renderStartTime()\n      let endTime = []\n\n      let setHour = ''\n      let setMin = ''\n      // You will be using setHour and setMin in order to compare to the\n      // times in the baseTime so you will know which time to put inin the endTime\n\n      // In order to compare, you have to convert all the tiems into the 1-24 hour time\n      if (this.props.startTime.includes(\"PM\")){\n        setHour = parseInt(this.props.startTime.substring(0,2))\n        setMin = parseInt(this.props.startTime.substring(3,5))\n        if (setHour !== 12 ){\n          setHour = setHour + 12\n        }} else if (this.props.startTime.includes(\"AM\")){\n          setHour = parseInt(this.props.startTime.substring(0,2))\n          setMin = parseInt(this.props.startTime.substring(3,5))\n          if (setHour === 12){\n            setHour = 0\n          }\n        }\n\n        // Now we will run through the basetimes and then convert them to\n        // the 1-24 hour format the from there compare what needs date is put into the\n        // end date and what date does not get put in there\n      for( let i = 0; i< baseTime.length; i++){\n       if(baseTime[i].key.includes('PM')){\n         let hour = parseInt(baseTime[i].key.substring(0,2))\n         if (hour !== 12){\n           hour = hour+12\n         }\n         const min = baseTime[i].key.substring(3,5)\n         if (setHour < hour){\n           endTime.push(\n            <Option key = {baseTime[i].key}>{baseTime[i].key}</Option>\n          )} else if (setHour === hour){\n            if(setMin < min){\n              endTime.push(\n                <Option key = {baseTime[i].key}>{baseTime[i].key}</Option>\n              )\n            }\n          }\n       } else if (baseTime[i].key.includes(\"AM\")) {\n         let hour = parseInt(baseTime[i].key.substring(0,2))\n         if (hour === 12){\n           hour = 0\n         }\n         const min = baseTime[i].key.substring(3,5)\n         if( setHour < hour ) {\n           endTime.push(\n             <Option key = {baseTime[i].key}>{baseTime[i].key}</Option>\n          )} else if (setHour === hour){\n            if (setMin < min){\n              endTime.push(\n                <Option key = {baseTime[i].key}>{baseTime[i].key}</Option>\n              )\n            }\n          }\n        }\n      }\n      return (endTime)\n    }\n  }\n\n\n\n  onStartDateChange = (event, value) => {\n    const { change } = this.props\n\n    // So this is where the end Date will be changed if the startDate or endDate\n    // seems to be ahead of the endDate\n    console.log(value)\n    if (dateFns.isAfter(new Date(value),new Date(this.props.endDate))){\n      change('endDate', value)\n    }\n  }\n\n\n\n  handleStartTimeChange = (event, value) => {\n    const { change } = this.props\n    // So this handleStartTimechange pretty much is used to automatically\n    // change the values of the endTime, the only difference between this\n    // and that of the ReactAddEventForm is that we dont need to change the\n    // startTime value just the endTime value will be affected\n\n\n    console.log(value)\n    change('startTime', value)\n\n    // Like every other time related events we have to converted all\n    let startHour = parseInt(value.substring(0,2))\n    let startMin = parseInt(value.substring(3,5))\n    let ampm = value.substring(5,8)\n    let endHour = parseInt(this.props.endTime.substring(0,2))\n    let endMin = parseInt(this.props.endTime.substring(3,5))\n    let endTime = ''\n\n    console.log(startHour)\n\n\n\n    // These if statement is used to change the startTime values to the 1-24 hour format\n    if(value.includes('PM')){\n      if(startHour !== 12 ){\n        startHour = startHour + 12\n      }\n    } else if (value.includes('AM')){\n      if(startHour === 12){\n        startHour = 0\n      }\n    }\n\n    // These if statements here is to change the end time values from 1-2 to\n    // 1-24 for the end time\n    if (this.props.endTime.includes('PM')){\n      if (endHour !==  12){\n        endHour = endHour + 12\n      }\n    } else if (this.props.endTime.includes('AM')){\n      if(endHour === 12){\n        endHour = 0\n      }\n    }\n\n    // Now this is where the comparison of the times comes in an all the senarios\n    // For this one,for times that the start hour is smaller than that of the\n    // end time you don't need to change the value because due to the redux from\n    // the value of the start time will chagne it self\n    if(startHour === endHour ){\n      if (startMin > endMin){\n        endMin = \"00\"\n        endHour = startHour + 1\n        console.log(startHour)\n        console.log(endHour)\n        if (startHour === 11 && ampm === 'AM'){\n          endTime = '12:'+endMin + ' PM'\n        } else if (startHour === 23 && ampm === \" PM\"){\n          endTime = '12:'+endMin + ' AM'\n        } else {\n          if (endHour < 10){\n            endHour = '0'+endHour\n          } else {\n             if(ampm === ' AM'){\n               endHour = endHour\n             } else if (ampm === ' PM'){\n               endHour = endHour-12\n               if (endHour < 10){\n                 endHour = '0'+endHour\n               }\n             }\n           }\n           endTime = endHour + ':'+endMin+ampm\n\n        }\n\n\n        change('endTime', endTime )\n      } else if (startMin === endMin ){\n        // This is the case where the times are identical to each other\n        // REMEMBER THAT ENDHOUR AND STARTHOUR ARE USING THE 1-24 TIME\n        console.log(startHour, endHour)\n        if (startHour === 0 && ampm === ' AM' && startMin === 0){\n          endTime = '12:30 AM'\n        } else if (startHour === 12 && ampm === ' PM' && startMin === 0){\n          endTime = '12:30 PM'\n        } else {\n          if (startMin === 30){\n            endMin = '00'\n            if (startHour === 12){\n              endHour = '01'\n              endTime = endHour + ':'+endMin+' PM'\n            } else if (startHour === 11 && ampm === ' AM'){\n                endTime =   '12:' + endMin + ' PM'\n              } else if ((startHour-12) === 11 && ampm === ' PM'){\n                endTime =  '12:' + endMin + ' AM'\n              }\n            else {\n              console.log(endHour)\n              endHour = startHour +1\n                if (endHour<10){\n                    endHour = '0'+endHour\n                } else {\n                  if(ampm === ' AM'){\n                    endHour = endHour\n                  } else if (ampm === ' PM'){\n                    endHour = endHour-12\n                    if (endHour < 10){\n                      endHour = '0'+endHour\n                    }\n                  }\n                }\n              endTime = endHour + ':' +endMin+ampm\n            }\n          } else if (startMin === 0){\n            endMin = '30'\n            console.log(ampm)\n            if (endHour<10){\n                endHour = '0'+endHour\n            } else {\n              if(ampm === ' AM'){\n                console.log('am')\n                endHour = endHour\n              } else if (ampm === ' PM'){\n                console.log('pm')\n                if (endHour === 12){\n                  endHour = 12\n                }else {\n                  endHour = endHour-12\n                  if (endHour < 10){\n                    endHour = '0'+endHour\n                  }\n                }\n              }\n            }\n            endTime = endHour + ':'+endMin +ampm\n          }\n        }\n\n        change('endTime', endTime)\n      }\n    } else if (startHour > endHour) {\n      // let startHour = parseInt(time.substring(0,2))\n      // let startMin = parseInt(time.substring(3,5))\n      if (startHour === 11 && ampm === ' AM' && startMin === 30){\n        endTime = '12:00 PM'\n      } else if (startHour === 23 && ampm === ' PM' && startMin === 30){\n        endTime = '12:00 AM'\n      } else {\n        if (startMin === 30){\n          startMin = \"00\"\n          startHour = startHour + 1\n        } else if (startMin !== 30){\n          startMin = '30'\n        }\n        if (startHour < 10){\n          startHour = '0'+startHour\n        } else{\n          if(ampm === ' AM'){\n            startHour = startHour\n          } else if (ampm === ' PM'){\n            startHour = startHour-12\n            if (startHour < 10){\n              if (startHour === 0){\n                startHour = '12'\n              } else {\n                startHour = '0'+startHour\n              }\n            }\n          }\n        }\n\n\n          endTime = startHour + ':'+startMin+ampm\n      }\n\n\n\n      change('endTime', endTime)\n    }\n\n  }\n\n  handleEndTimeChange = (event) => {\n    console.log(event)\n\n    const {change} = this.props\n    return (\n      console.log('endTime')\n      // change('endTime', event)\n    )\n  }\n\n\n  renderHeader(){\n    // This is to render the mini Calendar month givien the date range\n    var eventSyncWeekText=\"'s calendar\"\n    const dateFormat = 'MMMM yyyy'\n    const minDate = this.props.minDate\n    return(\n      <div className = 'header'>\n        <div className = 'col-center'>\n          <span style={{display: 'inline-block'}}>\n            {dateFns.format(new Date(minDate) , dateFormat)}\n          </span>\n\n        </div>\n        <span className = 'col-center' style={{marginLeft:'400px', display: 'inline-block'}}>\n          {this.props.userFriend.first_name}{eventSyncWeekText}\n        </span>\n      </div>\n    )\n  }\n\n  renderDays() {\n    // This is just to render out the days in the date range\n    const dateFormat = 'iii'\n    const dayFormat = 'd'\n    const days = []\n\n    console.log (new Date(this.props.minDate))\n    let minDate = dateFns.addDays(new Date(this.props.minDate),1)\n    let maxDate = dateFns.addDays(new Date(this.props.maxDate),1)\n    // Added one day so that you can compare them to make sure things are more accurate\n    // Plus when you do new date it think it goes back 7 hours, and since the max and min\n    // dates are at 00\n    const difference = -dateFns.differenceInCalendarDays(new Date(minDate), new Date(maxDate))\n    let cloneMinDate = this.props.minDate\n\n    for(let i = 0; i<difference; i++){\n        const cloneCloneMinDate = cloneMinDate\n        days.push(\n          <div\n          className = 'syncCol col-center '\n          key = {i}\n          >\n            {dateFns.format(dateFns.addDays(minDate, i), dateFormat)}\n            <br />\n            {dateFns.format(dateFns.addDays(minDate, i), dayFormat)}\n          </div>\n        )\n        cloneMinDate = dateFns.addDays(cloneMinDate, 1)\n    }\n    return <div className = 'days row'>{days}</div>\n  }\n\n  renderSide() {\n    // Render side, you would want to start off at 11:30 am and end at 11:30 pm\n    const dateFormat = 'h a'\n    const hour = []\n    let startHour = dateFns.addHours(dateFns.startOfDay(new Date(this.props.minDate)), 1)\n    for (let i = 0; i<23; i++){\n      const formattedHour = dateFns.format(startHour, dateFormat)\n      hour.push(\n        <div\n          className = 'cell'\n          key = {hour}\n        >\n        <span className = 'number'>{formattedHour}</span>\n        </div>\n      )\n      startHour = dateFns.addHours(startHour, 1)\n    }\n    return <div className= 'body'> {hour} </div>\n  }\n\n  renderWeekCell(events){\n    console.log(events)\n    // Render the week cell, so what you want to do is pick the first to be the minDate and\n    // the last day will be the maxDate\n    // You will loop through each hour of each day and then redner through each day of the week\n    const minDate = dateFns.addDays(new Date(this.props.minDate),1);\n    const maxDate = dateFns.addDays(new Date(this.props.maxDate),1);\n    // This will be different from the calendar week calendar in that it doesn't start from the beginning\n    // of the week but rather it will start from beginning of the date range\n    const hourFormat = 'h a'\n    const dayFormat = 'd MMMM'\n    // This hour list will hold 24 items, each list will be for each hour of each day 5x24\n    const hours = []\n\n     // This list will hold all the events\n     let toDoStuff = []\n     // This will be a list with teh same hour of all the days\n     let days = []\n     // You will need the start day and the start hour\n     // The start day will be the minDate\n\n     let date = minDate\n     const startHourDay = dateFns.startOfDay(date);\n     const endHourDay = dateFns.endOfDay(date);\n\n     let formattedDay = '';\n\n     let hour = startHourDay;\n     let formattedHour = '';\n\n     // The counter is to give each box a seperate id so that it will highlight when you click on it\n     let counter = 0\n\n     const difference = -dateFns.differenceInCalendarDays(new Date(minDate), new Date(maxDate))\n\n\n\n     // The plan for the loop is ot have a while loop that loops thorugh each hour of the same day\n     // then go down to the next hour then go through all the days\n\n     while (hour <= endHourDay){\n       // When adding things to the calendar you have to match the date and the hour\n       console.log(hour)\n       for (let i = counter; i< (counter+difference); i++){\n          const cloneDay = date\n          const cloneHour = hour\n          const checkMin = dateFns.getMinutes(new Date(hour))\n          console.log(cloneDay, cloneHour)\n          formattedHour = dateFns.format(hour, hourFormat)\n          formattedDay = dateFns.format(date, dayFormat)\n          // This loop will loop thorugh all the events and if the hour and day matches and it will\n          // add it to the toDoStuff which will loopp thorugh each each cell then it will be\n          // cleared out again\n          for (let item = 0; item<events.length; item++){\n            // You gotta make the end time minus one because if you dont it will fill\n            //  up the cells of that time after it so thats not good\n            const startHour = dateFns.getHours(new Date(events[item].start_time))\n            const startMin = dateFns.getMinutes(new Date(events[item].start_time))\n            const endHour = dateFns.getHours(new Date(events[item].end_time))\n            const endMin = dateFns.getMinutes(new Date(events[item].end_time))\n            const curHour = dateFns.getHours(new Date(hour))\n            const curMin = dateFns.getMinutes(new Date(hour))\n\n            const sameDayStart = dateFns.isSameDay(new Date(events[item].start_time), cloneDay)\n            const sameDayEnd = dateFns.isSameDay(new Date(events[item].end_time), cloneDay)\n          // First is to get the start time to be there. Gotta make sure you get\n          // minutes correct\n\n          if (\n            startHour === 23\n          ){\n\n            if(\n             startMin === 30\n             &&\n             startHour === curHour\n             &&\n             startMin === curMin\n             &&\n             (sameDayStart || sameDayEnd)\n           ){\n             console.log('right here')\n             toDoStuff.push(\n               events[item]\n             )\n           }\n            else if(\n              startMin === 0\n              &&\n              startMin === curMin\n              &&\n              startHour === curHour\n              &&\n              (sameDayStart || sameDayEnd)\n            ) {\n\n              toDoStuff.push(\n                events[item]\n              )\n            }\n\n\n            if (endHour === 0){\n              if (\n                startMin === 0\n                &&\n                startHour === curHour\n                &&\n                (sameDayStart || sameDayEnd)\n              ){\n                toDoStuff.push(\n                  events[item]\n                )\n              } else if(\n                startMin === 30\n                &&\n                startMin === curMin\n                &&\n                startHour === curHour\n                &&\n                (sameDayStart || sameDayEnd)\n              ){\n                toDoStuff.push(\n                  events[item]\n                )\n              }\n\n            }\n\n\n          }\n          else {\n            if (\n              startHour === curHour\n              &&\n              startMin === curMin\n              &&\n              (sameDayStart || sameDayEnd)\n\n            ){\n              console.log('test1')\n              toDoStuff.push(\n                events[item]\n              )\n            }\n            if(\n              endHour === curHour\n              &&\n              endMin === 30\n              &&\n              endMin-30 === curMin\n              &&\n              (sameDayStart || sameDayEnd)\n            ){\n              console.log('test1')\n              toDoStuff.push(\n                events[item]\n              )\n            } else if (\n              endMin === 0\n              &&\n              endHour -1 === curHour\n              &&\n              endMin+30 === curMin\n              &&\n              (sameDayStart || sameDayEnd)\n            ){\n              console.log('test1')\n              toDoStuff.push(\n                events[item]\n              )\n            }\n\n            if(\n              startMin === 30\n\n            ){\n              if(\n                startHour < curHour\n                &&\n                endHour > curHour\n                &&\n                (0 === curMin\n                ||\n                30 === curMin)\n                &&\n                (sameDayStart || sameDayEnd)\n              ){\n                console.log('test1')\n                toDoStuff.push(\n                  events[item]\n                )\n              }\n\n            } else if (\n              startMin === 0\n\n            ){\n              if (\n                startHour <= curHour\n                &&\n                endHour> curHour\n                &&\n                (sameDayStart || sameDayEnd)\n              ){\n                toDoStuff.push(\n                  events[item]\n                )\n              }\n\n            }\n\n\n          }\n\n          // RENDER THE VERY FIRST CELL OF THE START TIME\n\n\n\n\n\n          }\n\n          // You can always have access to the events, you just got to loop through\n          // toDoStruff in the if below if you want to check\n          if (toDoStuff.length > 0){\n            days.push(\n              <div\n              className = {`syncCol disabled ${checkMin === 0 ? \"nonhourcellT\" : \"nonhourcellB\" }`}\n                // className = 'syncCol nonhourcell disabled'\n              >\n              </div>\n            )\n          } else {\n            days.push(\n              <div\n                style = {{background: this.color(i)}}\n                className = {`syncCol ${checkMin === 0 ? \"hourcellT\" : \"hourcellB\"}`}\n                // className = 'syncCol hourcell'\n                onClick = {(e) => this.onDayHourClick(e, i, cloneDay, cloneHour)}\n              >\n              <span className = 'number'></span>\n              </div>\n            )\n          }\n          toDoStuff = []\n          date = dateFns.addDays(date, 1)\n       }\n       // After you loop thorugh the hour, you will want to put that hur into the hour\n       // list and then clear out days list ot redo it again then you add in the next hour, then\n       // set the start day again to the start of the week then run it throuhg again\n       // Remember teh date must be resetted before adding the hour because\n       // of the while condition\n       hours.push(\n         <div className = 'row'>\n          {days}\n         </div>\n       )\n       counter = counter + 7\n       days = []\n       date = minDate\n       hour = dateFns.addMinutes(hour, 30)\n     }\n\n     return <div className = 'body'>{hours}</div>\n  }\n\n  onDayHourClick = (e,position, day, hour) => {\n\n    const selectedHour = dateFns.getHours(hour)\n    const selectedYear = dateFns.getYear(day)\n    const selectedMonth = dateFns.getMonth(day)\n    const selectedDate = dateFns.getDate(day)\n    const selectedMin = dateFns.getMinutes(hour)\n\n    const finalSelectedDate = new Date(selectedYear, selectedMonth, selectedDate, selectedHour, selectedMin)\n    if (this.state.active === position){\n      this.setState({\n        active: null,\n        selectedDate: null\n      })\n    } else {\n      this.setState({\n        active: position,\n        selectedDate: finalSelectedDate\n      })\n    }\n    console.log(finalSelectedDate)\n  }\n\n  color = (position) => {\n    console.log(position)\n    // Just the color of the selected time on the pick event sync calendar\n    if (this.state.active === position-7){\n      return '#91d5ff'\n    }\n    if (this.state.active === position){\n      return '#91d5ff';\n    }\n\n    return '';\n  }\n\n  submit = (value) => {\n    // On this onSubmit, you want to first get both the date, the\n    // event information, and both the user and then you will pass into the the websocket\n    // stuff and then pass it into the backend into the consumer then create the new notificaiton\n    // then group send it, then pass into redux in the front end (make sure to crate the callbacks)\n    // The value includes\n\n    // IN PROGRESS OF CHECKING\n    console.log(value)\n    console.log(this.props.currentUser)\n    console.log(this.props.userFriend)\n    if (this.state.selectedDate === null){\n      throw new SubmissionError({\n        _error: '*Please pick a date'\n      })\n    } else {\n      const notificationId = this.props.notificationId\n      const startTime = this.state.selectedDate\n      const endTime = dateFns.addHours(startTime, 1)\n\n      let content = ''\n      let location = ''\n      if (value.content){\n        content = value.content\n      }\n      if (value.location){\n        location = value.location\n      }\n      // For submitEvent object:\n      // title, value, location, event color will just be strings\n      // person, and invited will be a list of usernames\n      // repeatCondition will be none\n      // the host will the id of the actor\n      const submitEvent = {\n        command: 'add_sync_event',\n        title: value.title,\n        person: [this.props.currentUser, this.props.userFriend.username],\n        invited: [this.props.userFriend.username],\n        content: content,\n        location: location,\n        eventColor: value.eventColor,\n        startDate: startTime,\n        endDate: endTime,\n        repeatCondition: \"none\",\n        host: this.props.id,\n      }\n      const submitNotification = {\n        command: 'send_new_event_sync_notification',\n        actor: this.props.currentUser,\n        recipient: this.props.userFriend.username,\n        date: this.state.selectedDate\n      }\n      console.log(submitEvent)\n      // So the webSocket is to send the info into the backend in tho the channles to make the\n      // event for both parties\n      CalendarEventWebSocketInstance.sendEvent(submitEvent);\n      // This is to send a notification to the other person that an event was choosen\n      NotificationWebSocketInstance.sendNotification(submitNotification)\n      this.props.closePickEventSyncModal()\n      // // This is just to delete the notificaiton\n      authAxios.delete('http://127.0.0.1:8000/userprofile/notifications/delete/'+notificationId)\n      this.props.deleteNotification(notificationId)\n      this.openNotification('bottomLeft', this.state.selectedDate)\n    }\n  }\n\n  openNotification = (placement,date)  => {\n    // this is to show a small notification on the side to show that the user\n    // added an event into his calendar\n    console.log(date)\n    const day = dateFns.format(new Date(date), 'MMM d, yyyy')\n    const time = dateFns.format(new Date(date), 'h a')\n    notification.info({\n      message: 'You set an event on '+ day + ' at ' + time + '.',\n      placement,\n    })\n  }\n\n\n  timeConvertFunction = (time) => {\n    // This fucntion will take in a 1-24 hour time\n    // and then returna  1-12 am/pm time\n    // This fucntion will take in the time as a string in the 1-24 hour\n    // time format\n\n    console.log(time)\n    if (time !== null){\n      let hour = time.substring(0, 2)\n      let min = time.substring(3, 5)\n      let final_time = ''\n      if (hour > 12 ){\n        hour = hour - 12\n        if (hour < 10){\n            final_time = \"0\"+hour + ':'+min+' PM'\n        } else {\n            final_time = hour + ':'+min+' PM'\n        }\n      } else if(hour <= 12 ){\n        if (hour == 0){\n          final_time = '12:' + min + ' AM'\n        } else if (hour == 12) {\n          final_time = '12:' + min + ' PM'\n        } else {\n          final_time = hour +':'+ min+' AM'\n        }\n      }\n      console.log(final_time)\n      // MIGHT HAVE TO TAKE INTO CONSIDERATION THE 12AM AND 12 PM\n      return final_time\n    }\n\n\n  }\n\n  getInitialValue = () => {\n    // This will pass an initial value through the Field\n\n    // There is an issue with the utc_start and utc_end and start_time and end time\n    const date_start = new Date(this.state.selectedDate)\n    const utc_start = dateFns.addHours(date_start, date_start.getTimezoneOffset()/60)\n    const date_end = new Date(this.state.end_date)\n    const utc_end = dateFns.addHours(date_end, date_end.getTimezoneOffset()/60)\n    // const start_time = dateFns.getHours(date_start)\n    // const end_time = dateFns.getMinutes(date_start)\n\n    // console.log(start_time)\n    return{\n      // start_time: dateFns.format(new Date(this.props.start_time), 'yyyy-MM-dd HH:mm a'),\n      // end_time: dateFns.format(new Date(this.props.end_time), 'yyyy-MM-dd HH:mm a'),\n      // dateRange: [dateFns.format(date_start, 'yyyy-MM-dd'), dateFns.format(date_end, 'yyyy-MM-dd')],\n      dateRange: [moment(this.props.start_date, 'YYYY-MM-DD'), moment(this.props.end_date, 'YYYY-MM-DD')],\n      startDate: moment(this.props.start_date, 'YYYY-MM-DD'),\n      endDate: moment(this.props.end_date, 'YYYY-MM-DD'),\n      location: this.props.location,\n      eventColor: this.props.eventColor,\n      repeatCondition: 'none',\n      friends: [],\n      eventColor:'#91d5ff',\n      startTime:\"12:00 AM\",\n      endTime:\"01:00 AM\",\n      whichDay:3,\n    }\n  }\n\n\n  render() {\n    const { Meta } = Card\n\n    console.log(this.state)\n    console.log(this.props)\n    const {handleSubmit, pristine, invalid, reset, submitting, error } = this.props\n    return (\n      <div className = 'eventSyncCalendarContainer'>\n        <div className = 'syncCalendar'>\n          <div className = 'syncHeader'>\n            {this.renderHeader()}\n            {this.renderDays()}\n          </div>\n          <div className = 'syncBody'>\n            <div className = 'timecol'>\n              {this.renderSide()}\n            </div>\n            <div className = 'syncGrid'>\n            {this.renderWeekCell(this.props.filterEvent)}\n            </div>\n          </div>\n        </div>\n        {/*\n        <PickEventSyncForm\n        onSubmit = {this.submit}\n        initialValues = {this.getInitialValue()}\n        active = {this.state.active} />\n        */}\n        <Row style={{}}>\n\n\n          <PickEventSyncUserProfileCard data = {this.props.userFriend}/>\n\n\n              <PickEventSyncForm\n              onSubmit = {this.submit}\n              initialValues = {this.getInitialValue()}\n              active = {this.state.active}\n              startTime={dateFns.format(new Date(this.state.selectedDate), \"hh:mm a\" )}\n              endTime={dateFns.format(dateFns.addHours(new Date(this.state.selectedDate),1), \"hh:mm a\" )}\n              whichDay={dateFns.format(new Date(this.state.selectedDate), \"d\" )}\n\n\n               />\n\n\n\n          <Col span={8}></Col>\n\n\n\n\n        </Row>\n      </div>\n    )\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    minDate: state.eventSync.minDate,\n    maxDate: state.eventSync.maxDate,\n    filterEvent: state.eventSync.filterEvent,\n    currentUser: state.auth.username,\n    currentProfile: state.auth.profilePic,\n    userFriend: state.eventSync.userFriend,\n    notificationId: state.eventSync.notificationId,\n    id: state.auth.id,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    closePickEventSyncModal: () => dispatch(eventSyncActions.closePickEventSyncModal()),\n    deleteNotification: notificationId => dispatch(notificationsActions.deleteNotification(notificationId))\n  }\n}\nPickEventSyncWeek = reduxForm ({\n  form: 'event sync add event',\n  onSubmitSuccess: afterSubmit\n}) (PickEventSyncWeek)\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PickEventSyncWeek);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EventSyncForms/PickEventSyncUserProfileCard.js",["1220","1221","1222"],"import React from \"react\";\nimport { Button, Card } from 'antd';\nimport { authAxios } from '../.././../components/util';\nimport { EnvironmentOutlined, MoreOutlined } from '@ant-design/icons';\nimport defaultPicture from '../../../components/images/default.png';\n\nimport './PickEventSync.css';\n\n\n\nconst { Meta } = Card;\n\nclass PickEventSyncUserProfileCard extends React.Component {\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: true,\n      active: false\n    };\n  }\n\n  onClickSend = (e) => {\n    const username = this.props.data.username;\n    console.log(this.props)\n    authAxios.post('http://127.0.0.1:8000/userprofile/friend-request/send/'+username)\n\n    this.setState({value: e.target.value});\n    }\n\n  onClickActive = (e) => {\n    if (this.state.active === false){\n      this.setState({\n        active: true\n      })\n    } else if (this.state.active === true){\n      this.setState({\n        active: false\n      })\n    }\n  }\n\n  onClickToggle = () =>{\n    let btn = document.querySelector('.btn');\n    let profileCard = document.querySelector('.profileCard');\n    profileCard.classList.toggle('active');\n  }\n\n  onProfileClick = () => {\n    const user = this.props.data.username\n    // this.prop.history.push('userview/'+user)\n    window.location.href = 'explore/'+user;\n\n  }\n\n\n\n\n\n\n\n  render() {\n    console.log(this.props.data)\n    let profileImage = null\n\n    if(this.props.data){\n      if(this.props.data.profile_picture){\n        profileImage = 'http://127.0.0.1:8000'+this.props.data.profile_picture\n      }\n    }\n\n    console.log(profileImage)\n    return (\n\n      <div className = \"EsyncProfileCard\">\n        <div className = 'image-box'>\n\n        {profileImage === null ?\n\n\n          <img className = 'profile-image' src = {defaultPicture} alt = 'Avatar'/>\n\n          :\n\n          <img className = 'profile-image' src = {profileImage} alt = 'Avatar'/>\n\n\n        }\n\n\n\n        </div>\n        <div className = 'EsyncTop'>\n        <MoreOutlined />\n        </div>\n        <div className = 'bottom'>\n          <div className = 'name'> {this.capitalize(this.props.data.first_name)+\" \"+this.capitalize(this.props.data.last_name)} </div>\n          <div className = 'location'> <EnvironmentOutlined /> Tucson, AZ </div>\n        </div>\n        <div className = 'social'>\n        <div className = 'social-links'>\n          <div\n          onClick = {this.onProfileClick}\n          className = 'btn'> Profile </div>\n          <div className = 'btn'> Follow </div>\n        </div>\n        </div>\n      </div>\n\n\n\n    );\n\n  }\n}\n\nexport default PickEventSyncUserProfileCard;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EventPage/ChangeBackgroundModal.js",["1223","1224","1225","1226","1227","1228","1229","1230"],"import React from 'react';\nimport { Modal, notification, Upload, message, Avatar } from 'antd';\nimport { LoadingOutlined, PlusOutlined, InboxOutlined, UserOutlined } from '@ant-design/icons';\n// import ImgCrop from 'antd-img-crop';\n\nconst {Dragger}  = Upload;\n\nfunction getBase64(img, callback) {\n\n  // Pretty much read the image into a url so that it can be sent properly into\n  // backend\n\n  // The callback function is the function that gets passed in, this this case the\n  // call back would be the setState fucntion taht adds in the imageurl into the\n  // setstate\n  console.log(img)\n  const reader = new FileReader();\n  // Filereader lets webapplciations async red the content files stored in the user's\n  // computer\n  console.log(reader)\n  reader.addEventListener('load', () => callback(reader.result));\n  // addEventListener sets up a function to be called whenever the specific\n  // event is deleived to the target which in this case is the reader.result\n  // The load is a case sensative term and it checks if things have finished loading\n  reader.readAsDataURL(img);\n  // Pretty much reads the data then turn it into a url that represent the file's data\n\n}\n\nfunction beforeUpload(file) {\n  // Check if the file that you upload fits the requriements are set up\n  console.log(file)\n  const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n  if (!isJpgOrPng) {\n    message.error('You can only upload JPG/PNG file!');\n  }\n  const isLt2M = file.size / 1024 / 1024 < 2;\n  if (!isLt2M) {\n    message.error('Image must smaller than 2MB!');\n  }\n  return isJpgOrPng && isLt2M;\n}\n\n\nclass ChangeBackgroundModal extends React.Component{\n  //Remember when you are uploading a file you will need to do it through a\n  // form data. The form data formats it and puts in the right form in order to be\n  // passed through the axios or send it through the backend or else it would not be\n  // sent correctly.\n\n\n\n  state = {\n    loading: false,\n    imageFile: \"\"\n  }\n\n  handleChange = info => {\n\n    console.log(info)\n    // Handle the change of the picture\n    if(info.file.status === \"uploading\"){\n      this.setState({loading: true});\n      return;\n    }\n    if(info.file.status  === \"done\"){\n      // Whne uploading is done, you will upload it\n      this.setState({\n        imageFile: info.file.originFileObj\n      })\n      getBase64(info.file.originFileObj, imageUrl =>\n        this.setState({\n          imageUrl,\n          loading: false\n        })\n      )\n    }\n\n  }\n\n  handleSubmit = value => {\n    // This will handle the submitting of changing the background picture of the\n    // event. It will do this by changing all the states back to normal and then\n    // call the submit funciton taht was pass in the props\n\n    this.setState({\n      loading: false,\n      imageFile: \"\",\n      imageUrl: null,\n    })\n\n    this.props.onSubmit(value)\n  }\n\n  handleCancel = () => {\n    //This will just handle the canceling of modal. It will clear out the\n    // state\n    this.setState({\n      loading: false,\n      imageFile: \"\",\n      imageUrl: null,\n    })\n    this.props.close();\n  }\n\n\n  render(){\n    console.log(this.props)\n    console.log(this.state)\n    // This is just to render the uploadButton\n    const uploadButton = (\n      <div className = 'uploadBox'>\n        {this.state.loading ? <LoadingOutlined className = 'plusOutlined' /> : <PlusOutlined className = 'plusOutlined'/>}\n        <div className=\"ant-upload-text\">Upload</div>\n      </div>\n    );\n\n    const { imageUrl } = this.state;\n\n    return(\n      <Modal\n        centered\n        visible = {this.props.visible}\n        bodyStyle={{height:'450px'}}\n        width={800}\n        okText = {'Save'}\n        okButtonProps={{ disabled: this.state.imageFile == \"\" ? true : false }}\n        onCancel = {() => this.handleCancel()}\n        onOk = {() => this.handleSubmit(this.state.imageFile)}\n      >\n        <div class=\"sideContainer\">\n\n\n          <div class=\"side1\">\n\n            {\n            (this.props.pic.length>0)?\n\n                  <img class=\"changeProfilePic\"\n                    src={'http://127.0.0.1:8000'+this.props.pic}></img>\n\n\n\n              :\n              <div><Avatar style={{left:'20%', marginTop:'150px'}} size={200}\n                icon={<img class=\"changeAvatar\" src={'http://127.0.0.1:8000'+this.props.hostPic}></img>} /></div>\n\n\n             }\n          </div>\n          <div class=\"side2\">\n\n            <Upload\n              name=\"avatar\"\n              listType=\"picture-card\"\n              className=\"uploadBox\"\n              showUploadList={false}\n              action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\n              beforeUpload={beforeUpload}\n              onChange={this.handleChange}\n\n\n            >\n              <div>\n                {\n                  (imageUrl) ?\n                  <img class=\"fitPhoto\" src={imageUrl} alt=\"avatar\" />\n                  :\n\n                  <i style={{fontSize:'60px', marginTop:'130px'}} class=\"fas fa-upload uploadBox\"></i>\n                }\n              </div>\n\n            </Upload>\n\n          </div>\n\n\n\n        </div>\n      </Modal>\n    )\n  }\n}\n\nexport default ChangeBackgroundModal;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/store/actions/calendarEvent.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EventPage/AcceptShareModal.js",["1231","1232","1233","1234"],"import React from 'react';\nimport {Button, Progress, Avatar, Modal} from 'antd';\nimport EventPageWebSocketInstance from '../../../eventPageWebsocket';\n\n\nclass AcceptShareModal extends React.Component{\n\n  \n\n  render(){\n    console.log(this.props)\n    return(\n      <Modal\n      onCancel = {this.props.onCancel}\n      visible ={this.props.visible}\n      onOk = {this.props.onSubmit}\n      okText= \"Yes\"\n      >\n      Are you sure you want to unshare with: {this.props.tempDifference}\n      </Modal>\n    )\n  }\n}\n\nexport default AcceptShareModal;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EditCalEventForms/ReduxEditEventForm.js",["1235","1236","1237","1238","1239","1240","1241","1242","1243","1244","1245","1246","1247","1248","1249","1250","1251","1252","1253","1254"],"import React from 'react';\nimport * as dateFns from 'date-fns';\nimport moment from 'moment';\nimport { connect } from \"react-redux\";\nimport { Form } from '@ant-design/compatible';\nimport { DatePicker, TimePicker, Button, Input, Select, Radio } from 'antd';\nimport { AimOutlined, ArrowRightOutlined, UserOutlined, SearchOutlined } from '@ant-design/icons';\nimport { Field, reduxForm, formValueSelector } from 'redux-form';\nimport * as navActions from '../../../store/actions/nav';\nimport * as calendarEventActions from '../../../store/actions/calendarEvent';\nimport '../PersonalCalCSS/ReduxForm.css';\nimport 'antd/dist/antd.css';\nimport '@ant-design/compatible/assets/index.css';\n\n\nconst { Option } = Select;\n\nconst { TextArea } = Input\n\n\n// You can also validate the fields on the forms btw\n\n\n// input component must be place in a Field component inorder to\n// have props such as value, onChange and stuff be passed in\n// Field basically replaces <input>\n\n\n// So in order to have more control over your input types you can make\n// your own components and pass them into the compoents of field\n// The parameter can be pretty much anything\n// Basically the field or parameter is basically all the props in the field is getting\n// passed into the renderField\n// With the props passed in, it makes it pretty 'universal' to all the Fields in the form\nconst renderRadioSelect = (field) => {\n  // render the radio to pick normal date, weekly, or daily\n  console.log(field)\n  const options = [\n  { label: 'Non-repeating', value: 'none' },\n  { label: 'Weekly', value: 'weekly' },\n  { label: 'Daily', value: 'daily' },\n];\n\n  return (\n    <Radio.Group\n          {...field.input}\n          options={options}\n          // value={}\n          optionType=\"button\"\n        />\n  )\n}\n\nconst renderFriendSelect = (field) => {\n  //This will render the list of friends so you can pick which friends you want\n  // to share this event with\n  console.log(field)\n  return (\n    <Select\n    mode=\"multiple\"\n    style={{ width: '50%', marginTop:'20px'}}\n    optionLabelProp=\"label\"\n    onChange = {field.input.onChange}\n    value = {field.input.value}\n    placeholder=\"Add friends\"\n        >\n    {field.children}\n\n    </Select>\n  )\n\n}\n\nconst renderField = (field) => {\n  // Typical input field, most use for the title\n  console.log(field.meta)\n  return (\n    <span>\n    <Input style={{width:'50%', height:'30px', fontSize:'15px'}}\n    {...field.input}\n    type = {field.type}\n    placeholder= {field.placeholder}\n    style={{display:'inline-block'}}\n    maxLength = \"80\"\n    className = 'box'/>\n\n    </span>\n  )\n}\n\nconst renderLocationField = (field) => {\n  //Typical input field, used for the location\n  console.log(field.meta)\n  return (\n    <span>\n    <Input style={{width:'50%',fontSize:'14px'}}\n    {...field.input}\n    type = {field.type}\n    placeholder= {field.placeholder}\n    className = 'box'/>\n\n    </span>\n  )\n}\n\n\n\nconst renderTextArea = (field) => {\n  // Text field used for the content\n  console.log(field.meta)\n  return (\n    <TextArea\n    {...field.input}\n    type = {field.type}\n    placeholder= {field.placeholder}\n    rows = {2}\n    className = 'box'\n    style={{fontSize:'14px'}}\n    />\n  )\n}\n\n// <input {...field.input} type = {field.type} placeholder = {field.placeholder} />\n\nconst renderStartDate = (field) => {\n\n  // This is used for the date selection (to pick the right day)\n  console.log(field)\n  return (\n    <DatePicker\n    onChange = {field.input.onChange}\n    value = {field.input.value}\n    style = {{width: '110px', marginRight:'15px'}}\n    suffixIcon={<div></div>}\n    allowClear = {false}\n     />\n  )\n}\n\nconst renderEndDate = (field) => {\n  console.log(field)\n  return (\n    <DatePicker\n    onChange = {field.input.onChange}\n    value = {field.input.value}\n    style = {{width: '110px'}}\n    suffixIcon={<div></div>}\n    allowClear = {false}\n    className = {` ${field.meta.error === 'endDate error' ? 'datePicker' : ''}`}\n    />\n  )\n}\n\n\n\nconst renderStartDateTime = (field) => {\n  // This const will render the start time of the event\n  // So before you choose any value you want to have the field\n  // input as a value in your select... because the input value will be the value\n  // that will be return to the field when you input a value\n  // Bascially everything goes through the value first, and what ever is here inspect\n  // is just for show\n\n  // Used to pick the right start time.\n  console.log(field)\n  return (\n    <Select\n      // {...field.input}\n      style = {{width: '115px', marginRight:'15px'}}\n      onChange = {field.input.onChange}\n      value = {field.input.value}\n      className = 'timebox'>\n\n    {field.children}\n    </Select>\n  )\n}\n\n\nconst renderEventColor = (field) => {\n  // This is just used to render the color of the event\n  return (\n    <Input\n    style = {{width: '45px', marginRight:'15px'}}\n    type = 'color'\n    className = 'reduxColor'\n    name = 'eventColor'\n    defaultValue = '#fadb14'\n    {...field.input}/>\n  )\n}\n\n\nconst renderStartTime = () => {\n  // This funciton is to fill in the child of the time select\n  // example 12:00 am, 12:30 am etc\n\n    const timeFormat = \"hh:mm a\"\n    const time = []\n    let start = dateFns.startOfDay(new Date())\n    let startHour = dateFns.getHours(new Date())\n    let startMins = dateFns.getMinutes(new Date())\n    for (let i = 0; i< 48; i++){\n      const cloneTime = startHour + ':' + startMins\n      time.push(\n        <Option\n        key = {dateFns.format(start, timeFormat)}\n        value= {dateFns.format(start, timeFormat)} >\n        {dateFns.format(start, timeFormat)}\n        </Option>\n      )\n      start = dateFns.addMinutes(start, 30)\n    }\n    console.log(time)\n    return time\n  }\n\n\nconst { RangePicker } = DatePicker;\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 8 },\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 16 },\n  },\n};\n\n\nconst required = value => value ? undefined : 'Required'\n\nconst validate = values => {\n  // As the name implies , it will validate the values of the form.\n  const errors = {}\n\n  console.log(values)\n  if (!values.title){\n    errors.title = \"Required\"\n  }\n  if(dateFns.isAfter(new Date(values.startDate), new Date(values.endDate))){\n    errors.endDate = 'endDate error'\n  } else if (values.repeatCondition === 'weekly' &&\n    !dateFns.isSameWeek(new Date(values.startDate), new Date(values.endDate))\n  ) {\n    errors.endDate = \"endDate error\"\n  } else if (values.repeatCondition === 'daily' &&\n    !dateFns.isSameDay(new Date(values.startDate), new Date(values.endDate))\n  ) {\n    errors.endDate = \"endDate error\"\n  }\n\n  return errors\n}\n\n\nclass ReduxEditEventForm extends React.Component{\n\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  handleStartTimeChange = (event, value) => {\n    const { change } = this.props\n    // So this handleStartTimechange pretty much is used to automatically\n    // change the values of the endTime, the only difference between this\n    // and that of the ReactAddEventForm is that we dont need to change the\n    // startTime value just the endTime value will be affected\n\n\n    console.log(value)\n    change('startTime', value)\n\n    // Like every other time related events we have to converted all\n    let startHour = parseInt(value.substring(0,2))\n    let startMin = parseInt(value.substring(3,5))\n    let ampm = value.substring(5,8)\n    let endHour = parseInt(this.props.endTime.substring(0,2))\n    let endMin = parseInt(this.props.endTime.substring(3,5))\n    let endTime = ''\n\n    console.log(startHour)\n\n\n\n    // These if statement is used to change the startTime values to the 1-24 hour format\n    if(value.includes('PM')){\n      if(startHour !== 12 ){\n        startHour = startHour + 12\n      }\n    } else if (value.includes('AM')){\n      if(startHour === 12){\n        startHour = 0\n      }\n    }\n\n    // These if statements here is to change the end time values from 1-2 to\n    // 1-24 for the end time\n    if (this.props.endTime.includes('PM')){\n      if (endHour !==  12){\n        endHour = endHour + 12\n      }\n    } else if (this.props.endTime.includes('AM')){\n      if(endHour === 12){\n        endHour = 0\n      }\n    }\n\n    // Now this is where the comparison of the times comes in an all the senarios\n    // For this one,for times that the start hour is smaller than that of the\n    // end time you don't need to change the value because due to the redux from\n    // the value of the start time will chagne it self\n    if(startHour === endHour ){\n      if (startMin > endMin){\n        endMin = \"00\"\n        endHour = startHour + 1\n        console.log(startHour)\n        console.log(endHour)\n        if (startHour === 11 && ampm === 'AM'){\n          endTime = '12:'+endMin + ' PM'\n        } else if (startHour === 23 && ampm === \" PM\"){\n          endTime = '12:'+endMin + ' AM'\n        } else {\n          if (endHour < 10){\n            endHour = '0'+endHour\n          } else {\n             if(ampm === ' AM'){\n               endHour = endHour\n             } else if (ampm === ' PM'){\n               endHour = endHour-12\n               if (endHour < 10){\n                 endHour = '0'+endHour\n               }\n             }\n           }\n           endTime = endHour + ':'+endMin+ampm\n\n        }\n\n\n        change('endTime', endTime )\n      } else if (startMin === endMin ){\n        // This is the case where the times are identical to each other\n        // REMEMBER THAT ENDHOUR AND STARTHOUR ARE USING THE 1-24 TIME\n        console.log(startHour, endHour)\n        if (startHour === 0 && ampm === ' AM' && startMin === 0){\n          endTime = '12:30 AM'\n        } else if (startHour === 12 && ampm === ' PM' && startMin === 0){\n          endTime = '12:30 PM'\n        } else {\n          if (startMin === 30){\n            endMin = '00'\n            if (startHour === 12){\n              endHour = '01'\n              endTime = endHour + ':'+endMin+' PM'\n            } else if (startHour === 11 && ampm === ' AM'){\n                endTime =   '12:' + endMin + ' PM'\n              } else if ((startHour-12) === 11 && ampm === ' PM'){\n                endTime =  '12:' + endMin + ' AM'\n              }\n            else {\n              console.log(endHour)\n              endHour = startHour +1\n                if (endHour<10){\n                    endHour = '0'+endHour\n                } else {\n                  if(ampm === ' AM'){\n                    endHour = endHour\n                  } else if (ampm === ' PM'){\n                    endHour = endHour-12\n                    if (endHour < 10){\n                      endHour = '0'+endHour\n                    }\n                  }\n                }\n              endTime = endHour + ':' +endMin+ampm\n            }\n          } else if (startMin === 0){\n            endMin = '30'\n            console.log(ampm)\n            if (endHour<10){\n                endHour = '0'+endHour\n            } else {\n              if(ampm === ' AM'){\n                console.log('am')\n                endHour = endHour\n              } else if (ampm === ' PM'){\n                console.log('pm')\n                if (endHour === 12){\n                  endHour = 12\n                }else {\n                  endHour = endHour-12\n                  if (endHour < 10){\n                    endHour = '0'+endHour\n                  }\n                }\n              }\n            }\n            endTime = endHour + ':'+endMin +ampm\n          }\n        }\n\n        change('endTime', endTime)\n      }\n    } else if (startHour > endHour) {\n      // let startHour = parseInt(time.substring(0,2))\n      // let startMin = parseInt(time.substring(3,5))\n      if (startHour === 11 && ampm === ' AM' && startMin === 30){\n        endTime = '12:00 PM'\n      } else if (startHour === 23 && ampm === ' PM' && startMin === 30){\n        endTime = '12:00 AM'\n      } else {\n        if (startMin === 30){\n          startMin = \"00\"\n          startHour = startHour + 1\n        } else if (startMin !== 30){\n          startMin = '30'\n        }\n        if (startHour < 10){\n          startHour = '0'+startHour\n        } else{\n          if(ampm === ' AM'){\n            startHour = startHour\n          } else if (ampm === ' PM'){\n            startHour = startHour-12\n            if (startHour < 10){\n              if (startHour === 0){\n                startHour = '12'\n              } else {\n                startHour = '0'+startHour\n              }\n            }\n          }\n        }\n\n\n          endTime = startHour + ':'+startMin+ampm\n      }\n\n\n\n      change('endTime', endTime)\n    }\n\n  }\n\n  handleEndTimeChange = (event) => {\n    console.log(event)\n\n    const {change} = this.props\n    return (\n      console.log('endTime')\n      // change('endTime', event)\n    )\n  }\n\n  handleReoccuringChange = (event) => {\n     const { change } = this.props\n\n     change('repeatCondition', event.target.value)\n     console.log(this.props)\n\n  }\n\n\n\n  onRed = () => {\n    // This will give an error if you were to pick a weekly, event and then you\n    // make an event that exceeds the weekly mark\n    let startDate = this.props.startDate\n    let endDate = this.props.endDate\n    let repeatCondition = ''\n    if (this.props.repeatCondition){\n        repeatCondition = this.props.repeatCondition\n    }\n\n    let boxcolor = false\n\n    console.log(repeatCondition)\n\n\n    if (repeatCondition === 'weekly'){\n      if(dateFns.differenceInDays(startDate, endDate) > 7){\n        boxcolor = true\n      }\n    }\n\n\n    if (dateFns.isAfter(new Date(startDate),new Date(endDate))){\n      boxcolor = true\n    }\n\n    return boxcolor\n  }\n\n\n  // renderEndDate = (field) => {\n  //   console.log(field.meta)\n  //   return (\n  //     <DatePicker\n  //     onChange = {field.input.onChange}\n  //     value = {field.input.value}\n  //     style = {{width: '110px'}}\n  //     suffixIcon={<div></div>}\n  //     allowClear = {false}\n  //     // className = {` ${this.onRed() ? 'datePicker' : ''}`}\n  //     />\n  //   )\n  // }\n\n  onStartDateChange = (event, value) => {\n    const { change } = this.props\n\n    // So this is where the end Date will be changed if the startDate or endDate\n    // seems to be ahead of the endDate\n    console.log(value)\n    if (dateFns.isAfter(new Date(value),new Date(this.props.endDate))){\n      change('endDate', value)\n    }\n  }\n\n  renderShareListSelect = () => {\n    if(this.props.following !== undefined && this.props.followers !== undefined){\n      const friendList = this.props.following\n\n      let shareOptions = []\n\n      for (let friend = 0; friend< friendList.length; friend++ ){\n        shareOptions.push(\n          <Option value = {friendList[friend].username}\n          label = {this.capitalize(friendList[friend].username)}>\n            {this.capitalize(friendList[friend].username)}\n          </Option>\n        )\n      }\n\n      return shareOptions\n    }\n  }\n\n  handleFriendChange = (value) => {\n    console.log(value)\n  }\n\n  renderEndTimeSelect = () => {\n    console.log(this.props.startTime)\n\n    if (this.props.startTime !== undefined ){\n      // So basically the way I am making this will be the same way I made the\n      // date pick in the addeventform. But instead of using state, we will use\n      // redux state\n      const baseTime = renderStartTime()\n      let endTime = []\n\n      let setHour = ''\n      let setMin = ''\n      // You will be using setHour and setMin in order to compare to the\n      // times in the baseTime so you will know which time to put inin the endTime\n\n      // In order to compare, you have to convert all the tiems into the 1-24 hour time\n      if (this.props.startTime.includes(\"PM\")){\n        setHour = parseInt(this.props.startTime.substring(0,2))\n        setMin = parseInt(this.props.startTime.substring(3,5))\n        if (setHour !== 12 ){\n          setHour = setHour + 12\n        }} else if (this.props.startTime.includes(\"AM\")){\n          setHour = parseInt(this.props.startTime.substring(0,2))\n          setMin = parseInt(this.props.startTime.substring(3,5))\n          if (setHour === 12){\n            setHour = 0\n          }\n        }\n\n        // Now we will run through the basetimes and then convert them to\n        // the 1-24 hour format the from there compare what needs date is put into the\n        // end date and what date does not get put in there\n      for( let i = 0; i< baseTime.length; i++){\n       if(baseTime[i].key.includes('PM')){\n         let hour = parseInt(baseTime[i].key.substring(0,2))\n         if (hour !== 12){\n           hour = hour+12\n         }\n         const min = baseTime[i].key.substring(3,5)\n         if (setHour < hour){\n           endTime.push(\n            <Option key = {baseTime[i].key}>{baseTime[i].key}</Option>\n          )} else if (setHour === hour){\n            if(setMin < min){\n              endTime.push(\n                <Option key = {baseTime[i].key}>{baseTime[i].key}</Option>\n              )\n            }\n          }\n       } else if (baseTime[i].key.includes(\"AM\")) {\n         let hour = parseInt(baseTime[i].key.substring(0,2))\n         if (hour === 12){\n           hour = 0\n         }\n         const min = baseTime[i].key.substring(3,5)\n         if( setHour < hour ) {\n           endTime.push(\n             <Option key = {baseTime[i].key}>{baseTime[i].key}</Option>\n          )} else if (setHour === hour){\n            if (setMin < min){\n              endTime.push(\n                <Option key = {baseTime[i].key}>{baseTime[i].key}</Option>\n              )\n            }\n          }\n        }\n      }\n      return (endTime)\n    }\n  }\n\n\n\n    render(){\n      console.log(this.props)\n      // handleSubmit will actually run this.prop.onSubmit\n      const {handleSubmit, pristine, invalid, reset} = this.props;\n      // For the component of the fields you can create your own stateles function\n      // to be put in there but it has to be outisde of your render\n      // You can call an <input/> into the field component\n      // You can put in initial values when you call the props initialValue\n      // you can actually call it and modify it in a higher order component and it will change\n\n\n      // EXPLAINATION OF HOW THINGS WORK IN THIS REDUX FORM\n      // So basically what going on is that this is a redux form, and then there is\n      // the selectors I mension at the bottom. So the selection is not what is\n      // being submitted(it is pretty much just used for the end tiem and end date so that\n      // when you change the start date and start time so that it can accomate\n      // for the time change.\n      // However, the actual submitting in a sense it is connected to the props but most\n      // it is all the values from input itself, and when you input those value\n      // since they are connected to the props itself, it will be passed into\n      // the submit function in the eventeditpopup. so all the values that are in\n      // that form even though it might not seem like it from just this file\n      return(\n        <form style={{padding:'25px'}}>\n            <div className = 'reduxTitle'>\n              <Button style={{float:'left', marginRight:'15px', display:'inline-block'}} type=\"primary\" shape=\"circle\" size={'large'}>\n                {this.props.dayNum}\n              </Button>\n              <Field\n              name = 'title'\n              component= {renderField}\n              type= 'text'\n              placeholder = 'Title'\n\n              />\n\n\n            </div>\n\n            <div style={{marginLeft:'50px', marginBottom:'15px'}}>\n              <Field\n              name = 'repeatCondition'\n              component = {renderRadioSelect}\n              onChange ={this.handleReoccuringChange}\n              />\n            </div>\n\n            <div style={{display:'flex', height:'30px', width:'500px'}} className = 'pointerEvent outerContainerPeople'>\n              <div class=\"innerContainerPeople\">\n                <i style={{marginLeft:'10px', marginRight:'25px'}}  class=\"fas fa-clock\"></i>\n\n                     <Field\n                       name = 'startDate'\n                       component = {renderStartDate}\n                       onChange = {this.onStartDateChange}\n                       type = 'date'\n                     />\n\n\n                   <Field\n                     style={{display: 'inline-block',float: 'left'}}\n                     name = 'startTime'\n                     component = {renderStartDateTime}\n                     onChange = {this.handleStartTimeChange}\n                     >\n                     {renderStartTime()}\n                   </Field>\n\n                   <Field\n                     style={{display: 'inline-block', marginRight:'15px'}}\n                     name = 'endTime'\n                     onChange = {this.handleEndTimeChange}\n                     component = {renderStartDateTime}\n                     >\n                     {this.renderEndTimeSelect()}\n                   </Field>\n              </div>\n            </div>\n\n\n\n            {/* need to implement redux form to people */}\n            <div>\n\n              <i style={{marginLeft:'10px', marginRight:'21px'}} class=\"fas fa-user-friends\"></i>\n              <Field\n              name = 'friends'\n              type='text'\n              onChange = {this.handleFriendChange}\n              component = {renderFriendSelect}\n              placeholder = 'Title'\n              >\n                {this.renderShareListSelect()}\n              </Field>\n\n\n              {/*<Input style={{width:'250px', marginBottom:'15px'}} placeholder=\"Add People\" prefix={<SearchOutlined />} /> */}\n            </div>\n\n\n            {/* Description of event\n            <div className  = 'reduxContent'>\n              <Field\n              name = 'content'\n              component= {renderTextArea}\n              type= 'text'\n              placeholder = 'Description'\n              />\n            </div>\n\n            */}\n            {/* location */}\n            <div style={{height:'70px'}} className = 'outerContainerPeople'>\n              <div class=\"innerContainerPeople\">\n                <i class=\"fas fa-globe-americas\"  style={{marginLeft:'10px', marginRight:'25px'}} ></i>\n                <Field\n                  name = 'location'\n                  placeholder=\"Location\"\n                  component= {renderLocationField}\n                  type= 'text'\n\n\n                />\n              <AimOutlined style={{marginLeft:'15px', fontSize:'15px', marginRight:'15px'}} className = 'aim'/>\n                <Field\n                    name = 'eventColor'\n                    component = {renderEventColor}\n                    type = 'text'\n\n                />\n            </div>\n\n\n\n            </div>\n\n            { this.props.addEvent ?\n              <div className = 'reduxButton' style={{padding:'10px'}}>\n              <Button\n              onClick = {reset}\n              >\n              Clear\n              </Button>\n              <Button\n              type = 'primary'\n              onClick = {handleSubmit}\n              style = {{left: '10px', fontSize: '15px'}}\n              disabled = {pristine || invalid || this.onRed()}\n              >Add</Button>\n              </div>\n\n              :\n\n              <div className = 'reduxButton'>\n              <Button\n              onClick = {(e) => this.props.onDelete(e,this.props.calendarId)}\n              >\n              Delete\n              </Button>\n              <Button\n              type = 'primary'\n              onClick = {handleSubmit}\n              style = {{left: '10px', fontSize: '15px'}}\n              disabled = {pristine || invalid || this.onRed()}\n              >Save</Button>\n              </div>\n\n             }\n\n        </form>\n      )\n    }\n  }\n\n// So once you put everything in a field you will then put everything\n// inside the reduxForm\n// When you wrap your whole from around with redux form, redux form provides you\n// will all sort of functions that is prep filled in redux form\n// You can also design your own functions based on the given props to be put into the props too\n\n// The redux form is what communicates with the store, it will provide props about\n// the form state and functions to handle submission\n\n// In order to modify this you have to call a constant outside the class\nReduxEditEventForm = reduxForm({\n  form: 'edit event', //you will give the form a name\n  enableReinitialize: true,\n  validate //This will reintialzie the prestine values everytime the props changes\n})(ReduxEditEventForm);\n\n\n\nconst selector = formValueSelector('edit event')\n// The formValueSelector basically lets you select the values from a selected list that you have\n// put in the paraethesis\n// When you get the selector you can then choose which filed you want to take from the form through\n// connecting with the file --> similar to mapStateToProps but you are just doing it directly now\n// and the states in this case is the form fields\n// You can basically treat it as a state but in props\n\n\n// The gist of redux form is bascially the redux form can be modified and such and then\n// you can pass those inputs into an action created by the redux form then those actions will\n// be dispatched in into the reducers then the reduces will change the states and then if there is\n// an onchange or whatever, changes the Fields in the forms\nexport default connect(state =>({\n  title: selector(state, 'title'),\n  friends: selector(state, 'friends'),\n  content: selector (state, 'content'),\n  location: selector (state, 'content'),\n  startTime: selector(state, 'startTime'),\n  endTime: selector(state, 'endTime'),\n  startDate: selector(state, 'startDate'),\n  endDate: selector(state, 'endDate'),\n  repeatCondition: selector(state, 'repeatCondition')\n}))(ReduxEditEventForm);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/PostPageFolder/UserPostPage.js",["1255","1256","1257"],"import React from 'react';\nimport {  Avatar } from 'antd';\nimport Liking from '../../containers/NewsfeedItems/Liking';\nimport UserPostComments from './UserPostComments';\nimport UserPostPageWebSocketInstance from '../../UserPostPageWebsocket'\nimport { connect } from 'react-redux';\nimport PostPicCarousel from './PostPicCarousel';\nimport * as newsfeedActions from '../../store/actions/newsfeed';\nimport * as dateFns from 'date-fns';\n\n\nclass UserPostPage extends React.Component{\n\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  initialisePage(){\n    this.waitForSocketConnection(() => {\n      UserPostPageWebSocketInstance.fetchUserPostInfo(\n        this.props.match.params.postId\n      )\n    })\n    if(this.props.match.params.postId && this.props.match.params.username){\n      UserPostPageWebSocketInstance.connect(\n        this.props.match.params.username,\n        this.props.match.params.postId\n      )\n    }\n\n  }\n\n  componentDidMount(){\n    this.initialisePage()\n  }\n\n  waitForSocketConnection(callback){\n    // This is pretty much a recursion that tries to reconnect to the websocket\n    // if it does not connect\n    const component = this;\n    setTimeout(\n      function(){\n        console.log(UserPostPageWebSocketInstance.state())\n        if (UserPostPageWebSocketInstance.state() === 1){\n          console.log('connection is secure');\n          callback();\n          return;\n        } else {\n          console.log('waiting for connection...')\n          component.waitForSocketConnection(callback)\n        }\n      }, 100)\n  }\n\n  componentWillReceiveProps(newProps){\n    if(this.props.match.params.username !== newProps.match.params.username\n      || this.props.match.params.postId !== newProps.match.params.postId\n    ) {\n      UserPostPageWebSocketInstance.disconnect();\n      this.waitForSocketConnection(() =>{\n        UserPostPageWebSocketInstance.fetchUserPostInfo(\n          this.props.match.params.postId\n        )\n      })\n      UserPostPageWebSocketInstance.connect(\n        this.props.match.params.username,\n        this.props.match.params.postId\n      )\n\n    }\n  }\n\n  componentWillUnmount(){\n    UserPostPageWebSocketInstance.disconnect();\n    this.props.closePost();\n\n  }\n\n  renderTimestamp = timestamp =>{\n    console.log(timestamp)\n    let prefix = '';\n    console.log(new Date().getTime())\n    console.log(new Date(timestamp).getTime())\n    const timeDiff = Math.round((new Date().getTime() - new Date(timestamp).getTime())/60000)\n    console.log(timeDiff)\n    if (timeDiff < 1 ) {\n      prefix = `Just now`;\n    } else if (timeDiff < 60 && timeDiff >= 1 ) {\n      prefix = `${timeDiff} minutes ago`;\n    }else if (timeDiff < 24*60 && timeDiff > 60) {\n      prefix = `${Math.round(timeDiff/60)} hours ago`;\n    } else if (timeDiff < 31*24*60 && timeDiff > 24*60) {\n      prefix = `${Math.round(timeDiff/(60*24))} days ago`;\n    } else {\n        prefix = `${dateFns.format(new Date(timestamp), \"MMMM d, yyyy\")}`;\n    }\n\n    return prefix;\n  }\n\n  onPostLike = (personLike) => {\n    // personLike will be the person that like the post\n    // owner will be the owner of the of the post,\n    // you probally just need the person like and the post id and then you\n    // just add the person like to it\n\n    console.log(personLike)\n    UserPostPageWebSocketInstance.sendUserPostLike(personLike, this.props.match.params.postId)\n\n  }\n\n  onPostUnlike = (personUnlike) => {\n\n    UserPostPageWebSocketInstance.sendUserPostUnlike(personUnlike, this.props.match.params.postId)\n  }\n\n  render() {\n\n    console.log(this.props)\n\n    let userPostImages = []\n    let userPostComments = []\n    let userPostUsername = ''\n    let userPostUserId = ''\n    let userPostProfilePic = ''\n\n    let userPostDate = ''\n    let people_like = []\n    // let curDate = year+\"-\"+month+\"-\"+day\n    let socialCalCellId = ''\n\n    // peopleLikeId is just used for the like and unlike button\n    let peopleLikeId =[]\n\n\n\n    if(this.props.post){\n      if(this.props.post.post_images){\n        userPostImages = this.props.post.post_images\n      }\n      if(this.props.post.post_comments){\n        userPostComments = this.props.post.post_comments\n      }\n      if(this.props.post.user){\n        userPostUsername = this.props.post.user.username\n        userPostProfilePic = 'http://127.0.0.1:8000'+this.props.post.user.profile_picture\n        userPostUserId = this.props.post.user.id\n      }\n      if(this.props.post.created_at){\n        userPostDate = this.renderTimestamp(this.props.post.created_at)\n      }\n      if(this.props.post.people_like){\n        people_like = this.props.post.people_like\n      }\n    }\n\n    if (people_like.length > 0){\n      for (let i = 0; i < people_like.length; i++){\n        peopleLikeId.push(people_like[i].id)\n      }\n    }\n\n    return(\n      <div\n      className = \"userPostModal\"\n      >\n        <div\n        className = \"postHolder\"\n        >\n        {\n          userPostImages.length === 1 ?\n          <div className = \"postPicturesCarousel\">\n            <img\n              className = 'singlePic'\n              src = {'http://127.0.0.1:8000/media/'+userPostImages[0]}\n             />\n          </div>\n\n          :\n\n          <div className = \"postPicturesCarousel\">\n             <PostPicCarousel items = {userPostImages} />\n          </div>\n\n        }\n\n\n          <div className = \"postModalRight\">\n              <div className = \"postNameTag\">\n                <Avatar size = {50}\n                src = {userPostProfilePic}\n                className = 'socialProfileImage'/>\n                <div>\n                  <div className = 'postName'> {this.capitalize(userPostUsername)}</div>\n                  <div className = \"postNameUsername\"> @{this.capitalize(userPostUsername)} </div>\n                  <div className = \"postTimeStamp\"> {userPostDate} </div>\n                </div>\n              </div>\n\n              <div className = \"postLikeCommentNum\">\n              {\n                peopleLikeId.includes(this.props.curId) ?\n\n                <div className = 'socialLikeCircle'>\n                <i class=\"fab fa-gratipay\" style={{marginRight:'5px', color:'red'}}></i>\n                </div>\n\n                :\n\n                <div className = 'socialLikeCircle'>\n                <i class=\"fab fa-gratipay\" style={{marginRight:'5px'}}></i>\n                </div>\n              }\n\n              <span className = 'postLikeCommentText'> {people_like.length} Likes . {userPostComments.length} comments </span>\n              <div className = 'postLikeAvatar'>\n                <Liking {...this.props} like_people={people_like}/>\n              </div>\n              </div>\n\n              <div className = \"postLikeComment\">\n              {\n                peopleLikeId.includes(this.props.curId) ?\n\n                <div\n                onClick = {() => this.onPostUnlike(this.props.curId)}\n                className ='postLike'>\n                <i\n                  style={{ marginRight:'10px', color:'red'}}\n                  class=\"fa fa-heart\">\n                </i>\n                Unlike\n                </div>\n\n                :\n\n                <div\n                onClick = {() => this.onPostLike(this.props.curId)}\n                className ='postLike'>\n                <i\n                  style={{ marginRight:'10px'}}\n                  class=\"fa fa-heart\">\n                </i>\n                Like\n                </div>\n\n\n\n              }\n              <div className  = 'postComment'>\n              <i style={{ marginRight:'10px'}} class=\"far fa-comments fa-lg\"></i>\n               Comment </div>\n              </div>\n              <UserPostComments\n\n              curUser = {this.props.curId}\n              postId = {this.props.match.params.postId}\n              items = {userPostComments}\n              profilePic = {this.props.curProfilePic}\n               />\n\n\n\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    post: state.newsfeed.post,\n    curId: state.auth.id,\n    curProfilePic: state.auth.profilePic\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    closePost: () => dispatch(newsfeedActions.closePost()),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserPostPage);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/SocialCalendarFolder/SocialEventPage/SocialEventGroupChat.js",["1258","1259","1260","1261","1262"],"import React from 'react';\nimport \"./SocialEventPage.css\";\nimport moment from 'moment';\nimport { Comment, Tooltip, List, Avatar, Input, Form, Button } from 'antd';\nimport SocialEventPageWebSocketInstance from '../../../socialEventPageWebsocket';\nimport * as dateFns from 'date-fns';\n\n\nclass SocialEventGroupChat extends React.Component{\n// This class is to hold the information for the group chats in\n// the socialEventgroupchat\n\n\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  state = {\n    message: ''\n  }\n\n\n  renderTimestamp = timestamp =>{\n    let prefix = '';\n    const timeDiff = Math.round((new Date().getTime() - new Date(timestamp).getTime())/60000)\n    if (timeDiff <= 1 ) {\n      prefix = `Just now`;\n    } else if (timeDiff < 60 && timeDiff >1 ) {\n      prefix = `${timeDiff} minutes ago`;\n    }else if (timeDiff < 24*60 && timeDiff > 60) {\n      prefix = `${Math.round(timeDiff/60)} hours ago`;\n    } else if (timeDiff < 31*24*60 && timeDiff > 24*60) {\n      prefix = `${Math.round(timeDiff/(60*24))} days ago`;\n    } else {\n        prefix = `${new Date(timestamp)}`;\n    }\n\n    return prefix;\n  }\n\n  handleChange = e => {\n    console.log(e.target.value)\n    this.setState({\n      message: e.target.value\n    })\n  }\n\n  handleSubmit = e => {\n    // handle sending information into the backend then to channels\n    if(this.state.message !== ''){\n      SocialEventPageWebSocketInstance.sendSocialEventMessage(\n        this.state.message,\n        this.props.id,\n        this.props.eventId\n      )\n\n      this.setState({message: ''})\n\n    }\n  }\n\n  scrollToBottom = () => {\n    //This function along with the componentDidMount and componentDidUpdate will\n    // let the chat keep scrolling down as you type more text\n    if(this.messagesEnd){\n      this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n\n    }\n  }\n\n\n  checkDay = (eventDay, eventTime) =>{\n      // Checks if the event day and time has passed the current event date and\n      // time. If it is then it will return true if it is not the it will retunr\n      // false\n\n    console.log(eventDay, eventTime)\n    let eventDate = dateFns.addHours(new Date(eventDay), 7)\n    const timeList = eventTime.split(\":\")\n    eventDate = dateFns.addHours(eventDate, timeList[0])\n    eventDate = dateFns.addMinutes(eventDate, timeList[1])\n    console.log(eventDate)\n    return dateFns.isAfter(eventDate, new Date())\n\n  }\n\n  componentDidMount() {\n    this.scrollToBottom();\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  render(){\n\n    let messages = []\n    if(this.props.messages){\n      messages = this.props.messages\n    }\n\n  console.log(this.props)\n\n        const data = [\n      {\n        title: 'Ant Design Title 1',\n      },\n      {\n        title: 'Ant Design Title 2',\n      },\n      {\n        title: 'Ant Design Title 3',\n      },\n      {\n        title: 'Ant Design Title 4',\n      },\n    ];\n    return (\n      <div className = {`socialEventGroupChat ${this.props.active ? \"\" : \"active\"}`}>\n         <div className = \"socialMessageList\">\n         <List\n             itemLayout=\"horizontal\"\n             dataSource={messages}\n             renderItem={item => (\n               <div className = {`${this.props.id === item.messageUser.id ?\n                 \"eventMessageItemUser\" : \"eventMessageItemNotUser\"}`}>\n\n                 {this.props.id !== item.messageUser.id ?\n                   <div>\n                   <Avatar\n                   className = 'eventMessageAvatar'\n                   size = {30} src = {'http://127.0.0.1:8000'+item.messageUser.profile_picture} />\n                   </div>\n                   :\n\n                   <div></div>\n                 }\n                 <div className = 'messageP'>\n                 {this.props.id !== item.messageUser.id ?\n                   <span className = 'userName'>{this.capitalize(item.messageUser.first_name)} {this.capitalize(item.messageUser.last_name)}\n                   </span>\n                   :\n                   <span></span>\n\n                 }\n\n\n               <div>{item.body}</div>\n               <div className = 'eventTimeStamp'> {this.renderTimestamp(item.created_on)}</div>\n               </div>\n               </div>\n             )}\n           >\n           <div style={{ float:\"left\", clear: \"both\" }}\n               ref={(el) => { this.messagesEnd = el; }}>\n          </div>\n           </List>\n        </div>\n\n\n        <div className = \"inputForm\">\n        {\n          this.checkDay(this.props.date, this.props.endTime) ?\n\n          <Form>\n            <Input\n            className = \"socialEventChatInput\"\n            onChange = {this.handleChange}\n            value = {this.state.message}\n            onPressEnter = {this.handleSubmit}\n            placeholder = \"Write a message...\"\n            />\n          </Form>\n\n          :\n\n          <div className = 'eventEndText' >\n            Event has ended. You can no long send messages.\n          </div>\n        }\n\n\n        </div>\n\n      </div>\n    )\n  }\n}\n\n\nexport default SocialEventGroupChat;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/SocialCalendarFolder/SocialEventPage/SocialEventInfo.js",["1263","1264","1265","1266","1267","1268","1269","1270"],"import React from 'react';\nimport {Button, Progress, Avatar, Modal, message, notification} from 'antd';\nimport * as dateFns from 'date-fns';\nimport EditSocialEventForm from './EditSocialEventForm';\nimport {PictureOutlined} from '@ant-design/icons';\nimport SocialEventPageWebSocketInstance from '../../../socialEventPageWebsocket';\nimport ChangeBackgroundModal from '../../PersonalCalendar/EventPage/ChangeBackgroundModal';\nimport { authAxios } from '../../../components/util';\nimport * as socialActions from '../../../store/actions/socialCalendar';\nimport { connect } from \"react-redux\";\nimport DeleteSocialEventModal from './DeleteSocialEventModal';\n\n\nclass SocialEventInfo extends React.Component{\n\n  constructor(props){\n    super(props);\n  }\n\n  state = {\n    edit: false,\n    changeBackgroundView: false,\n    showDeleteModal: false,\n  }\n\n  capitalize (str) {\n    if(str){\n        return str.charAt(0).toUpperCase() + str.slice(1)\n    }\n\n  }\n\n  onChangeBackgroundOpen = () => {\n    // This is to open the modal for changing the background picture\n    console.log('open')\n    this.setState({\n      changeBackgroundView: true\n    })\n  }\n\n  onChangeBackgroundClose = () => {\n    // This is to close the modal for changing the background picture\n    this.setState({\n      changeBackgroundView: false\n    })\n  }\n\n  onEditClick = () => {\n    // This will show the function to edit events\n    this.setState({\n      edit: true\n    })\n  }\n\n  onCancelEventClick = () => {\n    this.setState({\n      edit: false\n    })\n  }\n\n\n  timeFormater(time){\n    // This will change the format of the time properly to the 1-12 hour\n    console.log(time)\n    const timeList = time.split(':')\n    let hour = parseInt(timeList[0])\n    let minutes = timeList[1]\n    var suffix  = hour >= 12 ? \"PM\":\"AM\"\n\n    console.log(11%12)\n    hour = ((hour+11)%12+1)+':'+minutes+\" \"+ suffix\n    return hour\n\n  }\n\n  checkDay = (eventDay, eventTime) =>{\n    // Checks if the event day and time has passed the current event date and\n    // time. If it is then it will return true if it is not the it will retunr\n    // false\n\n    console.log(eventDay, eventTime)\n    let eventDate = dateFns.addHours(new Date(eventDay), 7)\n    const timeList = eventTime.split(\":\")\n    eventDate = dateFns.addHours(eventDate, timeList[0])\n    eventDate = dateFns.addMinutes(eventDate, timeList[1])\n    console.log(eventDate)\n    console.log(dateFns.isAfter(eventDate, new Date()))\n    return dateFns.isAfter(eventDate, new Date())\n\n  }\n\n  getInitialValue = () => {\n    //This will be passed into\n    if(this.props.info){\n      let title = \"\";\n      let content = \"\";\n      const start_time = this.timeFormater(this.props.info.start_time)\n      const end_time = this.timeFormater(this.props.info.end_time)\n      if(this.props.info.title){\n        title = this.props.info.title\n      }\n\n      if(this.props.info.content){\n        content = this.props.info.content\n      }\n\n\n      return {\n        title: this.capitalize(title),\n        content: this.capitalize(content),\n        startTime: start_time,\n        endTime: end_time,\n        location: this.props.info.location,\n      }\n\n\n\n    }\n\n\n  }\n\n  onSaveEdit = (values) => {\n    // Social event is never gonna be a unshare event becuaes it social so its\n    // doesn't have to deal with the single or shared event-\n\n    // This function will be called when you want to save the newly edited event\n    // within the EditSocialEventForm\n    // The form is gonna take input information and then that information is gonna\n    // get passed into this funciton. AFterwards it will be sent thorugh the soicaleventWebsocket\n    // then it will go into the back end and change the exisitng event object then\n    // sent through the channels\n    console.log(values)\n    const start_time = values.startTime\n    const end_time = values.endTime\n    const event_day = this.props.info.event_day\n\n    let content = \"\"\n    let location = \"\"\n    // Reason for having these lets is because title and content are not required and\n    // could be empty at times\n    if(values.content){\n      content = values.content\n    }\n    if(values.location){\n      location = values.location\n    }\n\n    const editSocialEventObj = {\n      eventId: this.props.info.id,\n      title: values.title,\n      content: content,\n      location: location,\n      start_time: start_time,\n      end_time: end_time,\n      event_day:event_day\n\n    }\n\n    SocialEventPageWebSocketInstance.sendEditSocialEvent(editSocialEventObj)\n\n  }\n\n  handleBackgroundPictureChange = value => {\n    // This is responsible for changing the background picture fo the events\n    // Unlike the eventPage, this one will alwasy be shared among all the members but since\n    // the picture change will happen when people log back in it will be change\n    // so no need to put channels on it\n\n    console.log(value)\n    const eventId = this.props.info.id\n    var data = new FormData();\n\n    data.append(\"backgroundImg\", value)\n    authAxios.put('http://127.0.0.1:8000/mySocialCal/socialEvent/updatebackground/'+eventId,\n    data\n  ).then(res => {\n    // Now you will run the redux to replace the picture\n    console.log(res.data)\n    this.props.updateSocialEventBackground(res.data.backgroundImg.substring(21,))\n\n  })\n\n  }\n\n  onDeleteSocialEvent = () =>{\n    console.log(this.props.info.id)\n\n    // This sendSocialEventDelete will send notifications of whoever is still in the\n    // event room that the event has been delete so refresh... nothign you do matters\n    SocialEventPageWebSocketInstance.sendSocialEventDelete(this.props.info.id)\n\n    // authAxios.delete('http://127.0.0.1:8000/mySocialCal/socialEvent/delete/'+this.props.info.id)\n    if(this.props.history){\n      this.props.history.push('/current-user/')\n    }\n    this.setState({\n      showDeleteModal: false,\n    })\n  }\n\n\n  onOpenDeleteSocialModal = () => {\n    this.setState({\n      showDeleteModal: true\n    })\n  }\n\n  onCloseDeleteSocialModal = () => {\n    // This is to close teh dletesocialmodal\n    this.setState({\n      showDeleteModal: false\n    })\n  }\n\n\n  render() {\n    console.log(this.props)\n\n    let username = ''\n    let eventHostId = ''\n\n    let title = '';\n    let content = '';\n    let date = ''\n    let start_time = ''\n    let end_time = ''\n    let eventBackgroundPic = \"\";\n    let location = '';\n    let month = \"\";\n    let day = \"\";\n    let persons = [];\n    let host = \"\";\n\n    if(this.props.info){\n      if(this.props.info.host){\n        username = this.props.info.host.username\n        eventHostId = this.props.info.host.id\n      }\n      if(this.props.info.title){\n        title = this.props.info.title\n      }\n      if(this.props.info.content){\n        content = this.props.info.content\n      }\n      if(this.props.info.start_time){\n        console.log(dateFns.addHours(new Date(this.props.info.event_day), 7))\n        start_time = this.timeFormater(this.props.info.start_time)\n        date = dateFns.format(dateFns.addHours(new Date(this.props.info.event_day), 7), 'iii, MMMM dd, yyyy ')\n        // console.log(dateFns.format(new Date(this.props.info.start_time), 'HH:mm'))\n        month = dateFns.format(dateFns.addHours(new Date(this.props.info.event_day), 7), 'MMM')\n        day = dateFns.format(dateFns.addHours(new Date(this.props.info.event_day),7), 'dd')\n      }\n\n      if(this.props.info.end_time){\n        end_time = this.timeFormater(this.props.info.end_time)\n      }\n\n      if(this.props.info.location){\n        location = this.props.info.location\n      }\n      if(this.props.info.host){\n        host = this.props.info.host\n      }\n      if(this.props.info.backgroundImg){\n        eventBackgroundPic = this.props.info.backgroundImg\n\n      }\n      if(this.props.info.persons){\n        persons = this.props.info.persons\n      }\n\n    }\n\n    return (\n      <div className = {`socialEventInfoContainerContainer ${this.props.active ? \"\" : \"active\"}` }>\n      <div className = \"socialEventInfoContainer\" >\n\n      {\n        this.state.edit ?\n\n        <div>\n        <EditSocialEventForm\n        {...this.props}\n        initialValues = {this.getInitialValue()}\n        onSubmit = {this.onSaveEdit}\n        onDelete = {this.onOpenDeleteSocialModal}\n         />\n\n\n        <div\n        className = \"editEventBackButtonContainer \"\n        onClick = {() => this.onCancelEventClick()}>\n\n        <i class=\"fas fa-arrow-left\"></i>\n\n        </div>\n        </div>\n\n        :\n\n        <div className = \"eventInfoView\">\n\n        <div className = \"topSectContainier\">\n\n          {\n            eventBackgroundPic === \"\" ?\n            <div\n            className = 'eventBackgroundPic'>\n            <div className = \"pictureFrame\">\n                <PictureOutlined />\n                <br />\n                <span> No background </span>\n            </div>\n            </div>\n\n            :\n\n            <div\n            className = 'eventBackgroundWPic'>\n            {/*\n              <div className =\"pictureFrame\">\n\n              <PictureOutlined />\n              <br />\n              <span> No background </span>\n                </div>\n              */}\n              <img\n              src = {'http://127.0.0.1:8000'+eventBackgroundPic}\n              className = 'eventBackgroundImg'\n               />\n            </div>\n\n\n          }\n\n          <div className = \"eventTopSide\">\n            <div\n              className = \"dateCircle\"\n              style = {{\n                backgroundColor: \"blue\"\n              }}\n            >\n            <div\n            style = {{\n              color: \"white\",\n              fontSize: \"20px\"\n            }}\n            clasName = \"month\" > {month}</div>\n            <div className = \"day\"> {day} </div>\n            </div>\n\n            <div className = 'eventTitle'> {this.capitalize(title)} </div>\n            <div className = \"eventDate\"> {date} </div>\n            <div className = \"eventTime\">{start_time}-{end_time}</div>\n\n            <div className = \"eventHost\">\n              <Avatar\n              src = {\"http://127.0.0.1:8000\"+host.profile_picture}\n              />\n              <span> {this.capitalize(host.first_name)} {this.capitalize(host.last_name)}</span>\n            </div>\n\n            <div className = \"invitedNum\"> {persons.length} Going </div>\n\n          </div>\n\n          </div>\n\n          <div className = \"eventInfo\">\n            <div className = \"aboutEvent\"> About the Event </div>\n            {\n              content === \"\" ?\n\n              <div className = \"contentEventEmpty\"> No info... </div>\n              :\n              <div className = \"contentEvent\"> {content} </div>\n\n\n            }\n\n            <div className = \"locationEventWord\"> Location</div>\n            {\n              location === \"\" ?\n              <div className = \"contentEventEmpty\"> No info... </div>\n              :\n              <div> {this.capitalize(location)} </div>\n            }\n\n            <div className = \"eventPeopleWord\"> People </div>\n\n\n            <div className = 'editEventButtonContainer'>\n            {\n              eventHostId === this.props.userId && this.checkDay(this.props.info.event_day ,this.props.info.end_time) ?\n\n              <div\n              className = 'editEventButton'\n              // onClick= {() => this.onEditClick()} /\n              >\n              <div\n              onClick = {() => this.onChangeBackgroundOpen()}\n              >\n              <i class=\"far fa-image\"></i>\n              <div style = {{fontSize: \"8px\", marginBottom: \"20px\"}}>\n              Change Background\n              </div>\n              </div>\n\n\n              <div\n              onClick={() => this.onEditClick()}\n              >\n              <i class=\"fas fa-pen\" ></i>\n              <div style = {{fontSize: \"15px\"}}>\n              Edit Event\n              </div>\n              </div>\n\n              <div>\n              <i class=\"fas fa-chevron-down\"></i>\n              </div>\n              </div>\n\n              :\n\n              <div></div>\n\n            }\n\n            </div>\n\n          </div>\n\n        </div>\n\n      }\n\n\n\n\n      <ChangeBackgroundModal\n      visible = {this.state.changeBackgroundView}\n      close = {this.onChangeBackgroundClose}\n      onSubmit = {this.handleBackgroundPictureChange}\n      pic = {eventBackgroundPic}\n      />\n\n      <DeleteSocialEventModal\n      visible = {this.state.showDeleteModal}\n      onCancel = {this.onCloseDeleteSocialModal}\n      eventId = {this.props.info.id}\n      onDelete = {this.onDeleteSocialEvent}\n      />\n\n\n      </div>\n\n    </div>\n    )\n  }\n\n}\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateSocialEventBackground: backgroundPic => dispatch(socialActions.updateSocialEventBackground(backgroundPic)),\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(SocialEventInfo);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/SocialCalendarFolder/SocialEventList.js",["1271","1272","1273","1274","1275","1276","1277","1278"],"import React from 'react';\nimport * as dateFns from 'date-fns';\nimport { List, Avatar } from 'antd';\nimport { ClockCircleOutlined } from '@ant-design/icons';\nimport clock from '../../components/images/clock.png';\nimport location from '../../components/images/pin.png';\nimport AvatarGroups from '../../components/AvatarGroups';\nimport userIcon from '../../components/images/user.png';\nimport ExploreWebSocketInstance from '../../exploreWebsocket';\nimport SocialCalCellPageWebSocketInstance from '../../socialCalCellWebsocket';\nimport './SocialCalCSS/SocialCellPage.css';\nimport Liking from \"../NewsfeedItems/Liking\";\n\n\n\nclass SocialEventList extends React.Component{\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  timeFormater(time){\n    // This will change the format of the time properly to the 1-12 hour\n    console.log(time)\n    const timeList = time.split(':')\n    let hour = parseInt(timeList[0])\n    let minutes = timeList[1]\n    var suffix  = hour >= 12 ? \"PM\":\"AM\"\n\n    console.log(11%12)\n    hour = ((hour+11)%12+1)+':'+minutes+\" \"+ suffix\n    return hour\n\n  }\n\n  checkUser = (personList) => {\n    // This will check if a users exist in a list and will return true or false\n    // The personList is a list of dictionary of users\n    let personListId = []\n    for (let i = 0; i<personList.length; i++){\n      const userId = personList[i].id\n      personListId.push(userId)\n    }\n\n    return personListId.includes(this.props.curId)\n  }\n\n  sendJoinUserEvent = (userId, eventId , socialCalCellId, cellDate)=> {\n    // This will be used to send the userId and the event Id to the websocket\n    console.log(userId, eventId, socialCalCellId)\n    SocialCalCellPageWebSocketInstance.sendSocialEventJoin(userId, eventId, socialCalCellId, cellDate)\n  }\n\n  sendLeaveUserEvent = (userId, eventId, socialCalCellId, cellDate) => {\n    // This willb e sued to sne dthe useId and the eventid to the websocket\n    // so that you can remove some from an event because they want to leave\n\n    console.log(userId, eventId)\n    SocialCalCellPageWebSocketInstance.sendSocialEventLeave(userId, eventId, socialCalCellId, cellDate)\n  }\n\n  viewSocialEventPage = (eventId) => {\n    console.log(eventId)\n    this.props.history.push(\"/socialcal/event/\"+eventId)\n  }\n\n\n  render(){\n\n    console.log(this.props)\n    // For events I don't think we will be needing channels because, when we move\n    // between profiles and newsfeed, it kinda refershs each time so the events\n    // just shows up, so for the evnets you can just make it and sent it to the redux\n    // and maybe you don't need channels for when you post events... maybe notificaitons are\n    // sent when you make an event --> this will direct the user to the event page\n    console.log(dateFns.addHours(new Date(this.props.cellDate), 7))\n\n    let itemList = []\n    if(this.props.items !== []){\n      itemList = this.props.items\n    }\n\n    console.log(itemList)\n\n    const data = [\n      {\n        title: 'Ant Design Title 1',\n      },\n      {\n        title: 'Ant Design Title 2',\n      },\n      {\n        title: 'Ant Design Title 3',\n      },\n      {\n        title: 'Ant Design Title 4',\n      },\n    ];\n\n\n    return (\n      <div className = 'socialListBox' >\n      <List\n       itemLayout=\"horizontal\"\n       dataSource={itemList}\n       renderItem={item => (\n         <List.Item className = 'socialListItem'>\n          <div className = 'socialListItemText'>\n\n            <div className = 'socialEventTitleContainer'>\n            <span className = 'socialEventTitle'>{this.capitalize(item.title)} </span>\n            {\n              true ?\n\n              <div className = 'socialPublicTag'> Public </div>\n\n              :\n\n              <div className = 'socialPrivateTag'> Private </div>\n            }\n            </div>\n\n            <span className = 'socialEventTime'>\n            <img src = {clock} className = 'socialEventClock' />\n            {this.timeFormater(item.start_time)}-\n            {this.timeFormater(item.end_time)}\n            </span>\n\n            <span className = 'socialEventLocation'>\n            <img src = {location} className = 'socialEventPin' />\n            {this.capitalize(item.location)}\n            </span>\n\n            <br />\n\n            <span className = 'socialEventCapcity'>\n            <img src ={userIcon} className = 'socialUserIcon' />\n            {item.persons.length}\n            <div>\n            <Liking like_people = {item.persons} />\n            </div>\n            </span>\n\n            {dateFns.isAfter(dateFns.endOfDay(dateFns.addHours(new Date(this.props.cellDate), 7)), new Date()) ?\n              <div>\n              {\n                this.checkUser(item.persons) ?\n                  item.host.id === this.props.curId ?\n                  <div className = 'alreadyJoinButton'>\n                  <span className = 'joinText'> Host </span>\n                </div>\n\n                :\n\n                <div\n                onClick = {() => this.sendLeaveUserEvent(\n                  this.props.curId,\n                  item.id,\n                  this.props.socialCalCellId,\n                  this.props.cellDate\n                )}\n                className = 'alreadyJoinButton'>\n                <span className = 'joinText'> Leave </span>\n              </div>\n\n\n\n                   :\n\n                   <div\n                   onClick = {()=> this.sendJoinUserEvent(\n                     this.props.curId,\n                     item.id,\n                     this.props.socialCalCellId,\n                     this.props.cellDate\n                   )}\n                   className = 'joinEventButton'>\n                     <span className = 'joinText'> Join </span>\n                   </div>\n\n              }\n\n\n\n\n              <div\n              onClick = {() => this.viewSocialEventPage(item.id)}\n              className = 'viewEventButton'>\n                <span className = 'viewText'> View </span>\n              </div>\n\n              </div>\n\n\n              :\n\n              <div className = 'viewEventButtonPass'>\n\n              <span\n              onClick = {() => this.viewSocialEventPage(item.id)}\n              className = 'viewText'>View </span>\n              </div>\n\n             }\n\n\n\n\n\n          </div>\n         </List.Item>\n       )}\n     />\n     </div>\n    )\n  }\n}\n\nexport default SocialEventList;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/SocialCalendarFolder/SocialComments.js",["1279","1280","1281","1282","1283","1284","1285"],"import React from 'react';\nimport moment from 'moment';\nimport { Comment, Tooltip, List, Avatar, Input, Form, Button } from 'antd';\nimport { SendOutlined  } from '@ant-design/icons';\nimport ExploreWebSocketInstance from '../../exploreWebsocket';\nimport SocialCalCellPageWebSocketInstance from '../../socialCalCellWebsocket';\nimport './SocialCalCSS/SocialCellPage.css';\nimport * as dateFns from 'date-fns';\n\n\nconst { TextArea } = Input;\n\nclass SocialComments extends React.Component{\n\n  state = {\n    comment: ''\n  }\n\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  handleSubmit = e => {\n    console.log('comment submit')\n    console.log(this.state.comment)\n    if (this.state.comment !== ''){\n      SocialCalCellPageWebSocketInstance.sendSocialCalCellComment(\n        this.props.currentDate,\n        this.props.curUser,\n        this.state.comment,\n        this.props.owner\n      )\n      this.setState({comment: ''})\n    }\n\n  }\n\n  handleChange = e =>{\n    console.log(e.target.value)\n    this.setState({\n      comment: e.target.value\n    })\n\n  }\n\n  componentWillReceiveProps = (newProps) => {\n    console.log(newProps)\n  }\n\n  renderTimestamp = timestamp =>{\n    console.log(timestamp)\n    let prefix = '';\n    console.log(new Date().getTime())\n    console.log(new Date(timestamp).getTime())\n    const timeDiff = Math.round((new Date().getTime() - new Date(timestamp).getTime())/60000)\n    console.log(timeDiff)\n    if (timeDiff < 1 ) {\n      prefix = `Just now`;\n    } else if (timeDiff < 60 && timeDiff >= 1 ) {\n      prefix = `${timeDiff} minutes ago`;\n    }else if (timeDiff < 24*60 && timeDiff > 60) {\n      prefix = `${Math.round(timeDiff/60)} hours ago`;\n    } else if (timeDiff < 31*24*60 && timeDiff > 24*60) {\n      prefix = `${Math.round(timeDiff/(60*24))} days ago`;\n    } else {\n        prefix = `${dateFns.format(new Date(timestamp), \"MMMM d, yyyy\")}`;\n    }\n\n    return prefix;\n  }\n\n\n  render() {\n    console.log(this.props)\n    console.log(this.state)\n\n    return (\n      <div className = 'socialCommentBoxBox'>\n      <div className = 'socialCommentBox'>\n      <List\n        className=\"comment-list\"\n        itemLayout=\"horizontal\"\n        dataSource={this.props.items}\n        renderItem={item => (\n\n            <div className = 'socialCommentItem'>\n\n            <div className = 'socialCommentNameTag'>\n              <Avatar size = {40} src = {'http://127.0.0.1:8000'+item.commentUser.profile_picture} />\n              <div className = 'socialCommentName'>\n                <div className = 'socialCommentUsername'>\n                <b>{this.capitalize(item.commentUser.first_name)} {this.capitalize(item.commentUser.last_name)} </b>\n                </div>\n                <div className = 'socialCommentDate'>\n                {this.renderTimestamp(new Date(item.created_on))}\n                </div>\n\n\n              </div>\n            </div>\n\n            <div className = 'socialCommentText'>\n            {item.body}\n            </div>\n\n            </div>\n        )}\n      />\n      <div className = 'socialCommentInput'>\n        <Avatar\n        size = {40}\n        className ='socialPicInput'\n        src = {'http://127.0.0.1:8000'+ this.props.profilePic}/>\n        <Form>\n          <Input\n          className= 'socialBoxInput'\n          onChange ={this.handleChange}\n          value = {this.state.comment}\n          // bordered = {false}\n          placeholder = 'Write a comment'\n          name = 'socialComment'\n          onPressEnter = {this.handleSubmit}\n          // rows = {1}\n           />\n\n          <button\n          // type = 'submit'\n          // onClick = {this.handleSubmit}\n          style = {{display: 'none'}}\n          />\n        </Form>\n      </div>\n      </div>\n\n    </div>\n    )\n  }\n}\n\nexport default SocialComments;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NewChatFolder/NoChatsScreen.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NewChatFolder/CurChatManager.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NewChatFolder/AddNewChatContent.js",["1286","1287","1288","1289","1290"],"import React from 'react';\nimport { Input, List, Avatar, Spin, Select} from 'antd';\nimport './NewChat.css';\nimport { connect } from 'react-redux';\nimport { authAxios } from '../../components/util';\nimport ChatSidePanelWebSocketInstance from '../../newChatSidePanelWebsocket';\n\n\n// This fucntion will be the search function and add function\n// when you are trying to add new chats or make new chats\nconst { Option } = Select;\n\n\n\nclass AddNewChatContent extends React.Component{\n\n  constructor(props){\n    super(props);\n    this.state = {\n      person: [],\n      messages: [],\n      message: '',\n      curChatId: ''\n    }\n  }\n\n  scrollToBottom = () => {\n    if(this.messagesEnd){\n        this.messagesEnd.scrollIntoView({ behavior: \"auto\" });\n    }\n\n  }\n\n  componentDidMount() {\n    this.scrollToBottom();\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  handleInputChange = e => {\n    // This is the handle change for the input\n    this.setState({\n      message: e.target.value\n    })\n  }\n\n  handleMessageSubmit = e => {\n    e.preventDefault()\n    // This will handle the submission of the chats. What is gonna happend\n    // is that you are gonna send it by the chats websocket. You will\n    // find the right chat, get out the messages and then send out the\n    // chat list, you don't need to send the message because you will make it\n    // in the backend before the chat renders so it would get it\n\n    // You have to handle the case where a chat does exist and a chant doesnot exist\n\n    if(this.state.curChatId !== \"\"){\n      // This would mean that there is a chat that exist, so you would just send\n      // a message.\n      // The updateRecentChat should work for this part\n      ChatSidePanelWebSocketInstance.updateRecentChatMessage(\n        this.state.curChatId,\n        this.props.curId,\n        this.state.message\n      )\n\n      this.setState({\n        person: [],\n        messages: [],\n        message: '',\n        curChatId: ''\n      })\n\n      this.props.history.push(\"/chat/\"+this.state.curChatId)\n\n\n    } else{\n      // If there is no curChatId then you gotta make it so that the chat creates\n      // and then direct to the new chat page\n\n      console.log('create new chat here')\n      authAxios.post(\"http://127.0.0.1:8000/newChat/createChat\",{\n        senderId: this.props.curId,\n        chatParticipants: [...this.state.person, this.props.curId],\n        message: this.state.message\n      })\n      .then(\n        res=> {\n          console.log(res.data)\n          // Now that you created the chat you can redirect to the new page\n          // Now you would wnat to throw in the websocket for chatList her\n          ChatSidePanelWebSocketInstance.sendNewCreatedChat(res.data)\n\n          this.setState({\n            person: [],\n            messages: [],\n            message: '',\n            curChatId: ''\n          })\n          this.props.history.push(\"/chat/\"+res.data)\n        }\n      )\n      // ChatSidePanelWebSocketInstance.createNewChatMessage(\n      //   this.props.curId,\n      //   this.state.person,\n      //   this.state.message\n      // )\n\n    }\n  }\n\n  renderPeopleSearch = () => {\n    // This part will consit of all your followers and following\n    // let followers = this.props.followers\n    // let following = this.props.following\n    // const newList = followers.concat(following)\n    let followers = []\n    let following = []\n    let searchList = []\n    if(this.props.followers){\n      followers = this.props.followers\n    }\n    if(this.props.following){\n      following = this.props.following\n    }\n    // To pick who you want to serach just change the list here\n\n\n    // Do it with just following for now\n\n    let chatOptions = []\n\n    for(let i = 0; i<following.length; i++){\n      // This will make all the select child\n      chatOptions.push(\n        <Option value = {following[i].id}\n        label = {this.capitalize(following[i].username)}>\n          {this.capitalize(following[i].username)}\n        </Option>\n\n      )\n    }\n\n    return chatOptions\n\n  }\n\n  handleChange = (value) =>{\n    this.setState({\n      person: value\n    })\n\n    if(value.length > 0){\n      authAxios.post(\"http://127.0.0.1:8000/newChat/getChat\",\n        {\n          person: [...value, this.props.curId]\n        }\n      ).then(\n        res => {\n          console.log(res.data)\n          this.setState({\n            messages:res.data.messages,\n            curChatId: res.data.chatId\n          })\n        }\n      )\n    } else {\n      this.setState({\n        messages: []\n      })\n    }\n\n\n\n\n  }\n\n\n  render(){\n\n    console.log(this.props)\n    console.log(this.state)\n\n\n    const data = [\n      {\n        title: 'Ant Design Title 1',\n      },\n      {\n        title: 'Ant Design Title 2',\n      },\n      {\n        title: 'Ant Design Title 3',\n      },\n      {\n        title: 'Ant Design Title 4',\n      },\n    ];\n\n\n    return(\n      <div className =\"addNewChatContainer\">\n        <div className = \"searchFormBox\">\n          <form className = \"searchForm\">\n          <div className = 'toText'>\n          To:\n          </div>\n          <Select\n            mode=\"multiple\"\n            // style={{ width: '100%' }}\n            placeholder=\"Search users\"\n            onChange={this.handleChange}\n            value = {this.state.person}\n            optionLabelProp=\"label\"\n            className = \"searchBox\"\n          >\n            {this.renderPeopleSearch()}\n            </Select>\n          </form>\n        </div>\n\n      <div className = \"searchChatContent\">\n\n\n      <List\n      className = \"newChatTextContainer\"\n      itemLayout = \"horizontal\"\n      dataSource = {this.state.messages}\n      renderItem = { item => (\n\n        <div>\n        {\n          this.props.curId === item.messageUser.id ?\n\n          <div className = \"chatTextBoxRight\">\n          <Avatar size = {45} src = {'http://127.0.0.1:8000' +item.messageUser.profile_picture}  />\n          <div className = 'chatNameTimeRight'>\n            <div className = 'chatNameRight'>\n              {this.capitalize(item.messageUser.first_name)} {this.capitalize(item.messageUser.last_name)}\n            </div>\n            <div>\n\n            </div>\n          </div>\n\n          <div className = \"chatContentTextRight\">\n            {item.body}\n          </div>\n\n          </div>\n\n          :\n\n          <div className = \"chatTextBox\">\n          <Avatar size = {45} src = {'http://127.0.0.1:8000' +item.messageUser.profile_picture}  />\n          <div className = 'chatNameTime'>\n            <div className = 'chatName'>\n              {this.capitalize(item.messageUser.first_name)} {this.capitalize(item.messageUser.last_name)}\n            </div>\n            <div>\n\n            </div>\n          </div>\n\n          <div className = \"chatContentText\">\n            {item.body}\n          </div>\n\n          </div>\n\n        }\n\n\n        </div>\n\n\n      )\n\n      }\n\n      >\n      <div style={{ float:\"left\", clear: \"both\" }}\n          ref={(el) => { this.messagesEnd = el; }}>\n     </div>\n      </List>\n\n\n\n      </div>\n\n      {\n        this.state.person.length > 0 ?\n        <div className = \"searchChatInput\">\n          <form>\n            <div className = \"searchChatInputBox\">\n            <Input\n            onChange = {this.handleInputChange}\n            value = {this.state.message}\n            placeholder = \"Write your message...\"\n            className = \"chatInput\"\n            onPressEnter = {this.handleMessageSubmit}\n             />\n            </div>\n          </form>\n        </div>\n\n        :\n\n        <div></div>\n\n      }\n\n\n\n\n      </div>\n\n    )\n\n  }\n}\n\nexport default AddNewChatContent;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NewChatFolder/ManageChatHeader.js",["1291","1292","1293"],"import React from 'react';\nimport { Input, List, Avatar, Spin} from 'antd';\nimport './NewChat.css';\n\nclass ManageChatHeader extends React.Component{\n\n  onClickAddChats = () =>{\n    // This will redirect to the right create chat area\n    this.props.history.push(\"/chat/newchat\")\n  }\n\n\n  render(){\n    return(\n        <div className = \"newManageChatHeader\">\n          <form\n          className = \"manageChatForm\"\n\n          >\n            <Input\n            className = \"searchInput\"\n            placeholder = \"Search chats...\"\n            />\n          </form>\n        <div\n        className = \"addChatsButton\"\n        >\n\n\n          <i\n          onClick = {() => this.onClickAddChats()}\n          class=\"fas fa-feather-alt\"></i>\n        </div>\n\n        </div>\n    )\n  }\n}\n\nexport default ManageChatHeader;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NewChatFolder/NewChatHeader.js",["1294"],"import React from 'react';\nimport \"./NewChat.css\";\nimport { Avatar } from 'antd';\nimport { UserOutlined } from '@ant-design/icons';\nimport Liking from \"../NewsfeedItems/Liking\";\n\n\nclass NewChatHeader extends React.Component{\n\n  // This class will take care of the header for the chat, including names\n  // and such\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  getChatUserProfile(participantList){\n    // This function will show the correct userProfile that you are chatting\n    // with\n\n    // There should jsut be 2 for here so not too much run time\n    var profilePic = \"\"\n    for(let i = 0; i<participantList.length; i++){\n      if(participantList[i].id !== this.props.curId){\n        profilePic = participantList[i].profile_picture\n      }\n    }\n\n    return profilePic;\n\n  }\n\n  getChatUserName(participantList){\n    // This function will show the correct name of the user that you are chatting\n    // with\n\n    var name = \"\"\n    for(let i = 0; i<participantList.length; i++){\n      if(participantList[i].id !== this.props.curId){\n        name = this.capitalize(participantList[i].first_name)+ ' '\n        +this.capitalize(participantList[i].last_name)\n      }\n    }\n\n    return name;\n\n  }\n\n  getGroupChatName(participantList){\n    // This function will show the correct name of the group chats\n    var names = \"\"\n    let noCurUserList = []\n    for(let i = 0; i < participantList.length; i++){\n      console.log(participantList[i].first_name)\n      if(participantList[i].id !== this.props.curId){\n        const name = this.capitalize(participantList[i].first_name)+ ' '\n        +this.capitalize(participantList[i].last_name)\n        noCurUserList.push(name)\n      }\n    }\n\n    if(noCurUserList.length <= 3){\n      for (let i = 0; i < noCurUserList.length; i++){\n        if(i === 0){\n          names = names+noCurUserList[i]\n        } else if(i === noCurUserList.length-1){\n          if(noCurUserList.length === 2){\n              names = names+\" and \"+noCurUserList[i]\n          } else {\n            names = names+\" ,and \"+noCurUserList[i]\n          }\n        } else {\n          names = names + \", \"+ noCurUserList[i]\n        }\n\n      }\n\n\n    } else {\n      for (let i = 0; i < 2; i++){\n        if(i === 0){\n          names = names+noCurUserList[i]\n        } else {\n          names = names + \", \"+ noCurUserList[i]\n        }\n\n      }\n\n      names = names +\", and \"+(noCurUserList.length-2)+ \" others\"\n\n    }\n\n\n\n    console.log(noCurUserList)\n\n\n    return names;\n  }\n\n\n  render(){\n    console.log(this.props)\n    let profilePic = \"\"\n    let name = \"\"\n    let chatLen = 0\n    if(this.props.curChat){\n\n      if(this.props.curChat.participants){\n        chatLen = this.props.curChat.participants.length\n        if(this.props.curChat.participants.length > 2){\n          name = this.getGroupChatName(this.props.curChat.participants)\n          profilePic = this.props.curChat.participants\n        } else{\n          name = this.getChatUserName(this.props.curChat.participants)\n          profilePic = this.getChatUserProfile(this.props.curChat.participants)\n\n        }\n\n      }\n\n    }\n\n    return(\n      <div className = 'newChatHeader'>\n      {\n        chatLen > 2 ?\n        <div className = \"groupsHeader\">\n          <Liking like_people ={profilePic} />\n          <span\n          className = \"nameHeader\"\n          >{name}</span>\n\n        </div>\n        :\n\n        <div>\n          <Avatar\n          className = \"avaHeader\"\n           size={50}\n           src = {'http://127.0.0.1:8000'+profilePic}\n            />\n          <span\n            className = \"nameHeader\"\n          >{name}</span>\n        </div>\n\n      }\n\n\n      </div>\n    )\n  }\n\n}\n\nexport default NewChatHeader;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NewChatFolder/NewSidePanel.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NewChatFolder/NewChatContent.js",["1295"],"import React from 'react';\nimport './NewChat.css';\nimport { Input, List, Avatar, Spin} from 'antd';\nimport NewChatWebSocketInstance from '../../newChatWebsocket';\nimport ChatSidePanelWebSocketInstance from '../../newChatSidePanelWebsocket';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport * as dateFns from 'date-fns';\n\n\n\nclass NewChatContent extends React.Component{\n  // This file will contain all the text in the current chat.\n\n  state = {\n    message: \"\"\n  }\n\n  handleChange = e => {\n    console.log(e.target.value)\n    this.setState({\n      message: e.target.value\n    })\n  }\n\n\n  // This will handle the submiting of the chats. You will need to submit\n  // the chatid, current person sending the chat id, and the message\n  handleMessageSubmit = e => {\n    e.preventDefault()\n    if(this.state.message !== \"\"){\n      NewChatWebSocketInstance.sendNewChatCreatedMessage(\n        this.props.parameter.id,\n        this.props.curId,\n        this.state.message\n      )\n\n      // Send one to the chat list as well to update it\n      // This where you will be adding people to seen here\n      ChatSidePanelWebSocketInstance.updateRecentChat(\n        this.props.parameter.id,\n        this.props.curId,\n        this.state.message\n      )\n\n      this.setState({\n        message: \"\"\n      })\n    }\n  }\n\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  scrollToBottom = () => {\n    if(this.messagesEnd){\n        this.messagesEnd.scrollIntoView({ behavior: \"auto\" });\n    }\n\n  }\n\n  componentDidMount() {\n    this.scrollToBottom();\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  renderMessages = (messageItem) => {\n\n    // SEE IF THIS WORKS, IF IT DOES NOT THEN TRY JUST DOING A DIV AND THEN\n    // LOOPING THROUGH ALL THE MESSAGES INTO A [] AND THEN REDNER IN INOT A\n    // DIV --> SIMILAR TO THE CALENDAR\n\n    // This function will render the correct message and messsage type\n    const curUser = this.props.curId\n    const messageUser = messageItem.messageUser.id\n\n    if(curUser === messageUser){\n      // This message will take care of the case when you are the current user\n        if(messageItem.type === \"event\"){\n          // This conditional will take care of the event\n          const eventDate = dateFns.format(new Date(messageItem.eventStartTime), \"MMM dd,  yyyy\")\n          const eventStartTime = dateFns.format(new Date(messageItem.eventStartTime), 'hh:mm aaaa')\n          const eventEndTime = dateFns.format(new Date(messageItem.eventEndTime), 'hh:mm aaaa')\n\n          return (\n            <div className = \"chatTextBoxRight\">\n            <Avatar size = {45} src = {'http://127.0.0.1:8000' +messageItem.messageUser.profile_picture}  />\n            <div className = 'chatNameTimeRight'>\n              <div className = 'chatNameRight'>\n                {this.capitalize(messageItem.messageUser.first_name)} {this.capitalize(messageItem.messageUser.last_name)}\n              </div>\n              <div>\n\n              </div>\n            </div>\n\n            <div className = \"chatContentTextRight\">\n              {this.capitalize(messageItem.body)}\n              <br />\n              Title: {messageItem.eventTitle}\n              <br />\n              <i class=\"far fa-calendar\"></i>\n              {eventDate}\n              <br />\n              <i class=\"far fa-clock\"></i>\n              {eventStartTime} - {eventEndTime}\n              <br />\n              Click to check it out.\n            </div>\n\n            </div>\n          )\n        } else if (messageItem.type === \"text\"){\n          // This will take care of the case where the message is just the chat\n          return (\n            <div className = \"chatTextBoxRight\">\n            <Avatar size = {45} src = {'http://127.0.0.1:8000' +messageItem.messageUser.profile_picture}  />\n            <div className = 'chatNameTimeRight'>\n              <div className = 'chatNameRight'>\n                {this.capitalize(messageItem.messageUser.first_name)} {this.capitalize(messageItem.messageUser.last_name)}\n              </div>\n              <div>\n\n              </div>\n            </div>\n\n            <div className = \"chatContentTextRight\">\n              {messageItem.body}\n            </div>\n\n            </div>\n\n          )\n        }\n\n    } else{\n      if(messageItem.type === \"event\"){\n        // This conditional will take care of the event\n\n        const eventDate = dateFns.format(new Date(messageItem.eventStartTime), \"MMM dd,  yyyy\")\n        const eventStartTime = dateFns.format(new Date(messageItem.eventStartTime), 'hh:mm aaaa')\n        const eventEndTime = dateFns.format(new Date(messageItem.eventEndTime), 'hh:mm aaaa')\n\n        return (\n          <div className= \"chatTextBox\">\n          <Avatar size = {45} src = {'http://127.0.0.1:8000' +messageItem.messageUser.profile_picture}  />\n          <div className = 'chatNameTime'>\n            <div className = 'chatName'>\n              {this.capitalize(messageItem.messageUser.first_name)} {this.capitalize(messageItem.messageUser.last_name)}\n            </div>\n            <div>\n\n            </div>\n          </div>\n\n          <div className = \"chatContentText\">\n            {this.capitalize(messageItem.body)}\n            <br />\n            Title: {messageItem.eventTitle}\n            <br />\n            <i class=\"far fa-calendar\"></i>\n            {eventDate}\n            <br />\n            <i class=\"far fa-clock\"></i>\n            {eventStartTime} - {eventEndTime}\n            <br />\n            Click to check it out.\n          </div>\n\n          </div>\n        )\n      } else if (messageItem.type === \"text\"){\n        // This will take care of the case where the message is just the chat\n        return (\n          <div className = \"chatTextBox\">\n          <Avatar size = {45} src = {'http://127.0.0.1:8000' +messageItem.messageUser.profile_picture}  />\n          <div className = 'chatNameTime'>\n            <div className = 'chatName'>\n              {this.capitalize(messageItem.messageUser.first_name)} {this.capitalize(messageItem.messageUser.last_name)}\n            </div>\n            <div>\n\n            </div>\n          </div>\n\n          <div className = \"chatContentText\">\n            {messageItem.body}\n          </div>\n\n          </div>\n\n        )\n      }\n\n\n\n    }\n\n\n\n  }\n\n\n\n  render(){\n    console.log(this.props)\n    console.log(this.state.message)\n    let message = []\n    if(this.props.messages){\n      message = this.props.messages\n    }\n\n    return (\n      <div className = \"newChatContent\">\n      <div className = \"chatWrapContainer\">\n        {\n          !this.props.messages ?\n\n          <LoadingOutlined style={{ fontSize: 24 }} spin />\n\n          :\n\n          <List\n          className = \"newChatTextContainer\"\n          itemLayout = \"horizontal\"\n          dataSource = {message}\n          renderItem = { item => (\n\n            <div>\n            {this.renderMessages(item)}\n            </div>\n\n          )\n\n          }\n\n          >\n          <div style={{ float:\"left\", clear: \"both\" }}\n              ref={(el) => { this.messagesEnd = el; }}>\n         </div>\n          </List>\n\n\n        }\n\n\n\n\n\n        </div>\n\n        <div className = \"bottomBox\">\n          <form>\n            <div className = \"formInputs\">\n              <Input\n              onChange = {this.handleChange}\n              value = {this.state.message}\n              className = \"chatInput\"\n              type = \"text\"\n              placeholder = \"Write your message...\"\n              onPressEnter = {this.handleMessageSubmit}\n              />\n\n\n\n\n            </div>\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default NewChatContent;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/UserProfiles/ConfirmAddFriend.js",["1296"],"import React from 'react';\nimport { Button, Modal, Avatar } from 'antd';\nimport ExploreWebSocketInstance from '../../exploreWebsocket';\n\n\n// This will be the modal that will confirm whether or not\n// you will wnat to add someone as a close friend\n\nclass ConfirmAddFriend extends React.Component{\n\n\n\n  confirmCloseFriend = () => {\n    // Thsi function will confirm the add as close friend. It will call\n    // the exportwebsocket and then send information into the backend to\n    // then add as friends.\n\n\n    // curId will be the current user Id, they will be the one adding the\n    // other person to their close friend list\n    let curId = \"\"\n\n    //FriendId will be the one getting added to the curId close friend list\n    let friendId = \"\"\n\n    if(this.props.curId){\n      curId = this.props.curId\n    }\n    if(this.props.friendId){\n      friendId = this.props.friendId\n    }\n\n\n    ExploreWebSocketInstance.sendAddCloseFriend(\n      curId, friendId\n    )\n\n    this.props.onClose()\n\n  }\n\n  render() {\n\n    console.log(this.props)\n    return (\n      <Modal\n      visible = {this.props.visible}\n      onCancel = {() => this.props.onClose()}\n      footer = {null}\n      >\n        <div>\n          Do you accept them as a friend?\n\n        </div>\n\n\n        <Button\n        onClick = {() => this.props.onClose()}\n        >\n        Cancel\n        </Button>\n        <Button\n        onClick = {() => this.confirmCloseFriend()}\n        >\n          Yes\n        </Button>\n      </Modal>\n\n    )\n  }\n\n}\n\nexport default ConfirmAddFriend;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/UserProfiles/ConfirmUnfriend.js",["1297"],"import React from 'react';\nimport { Button, Modal, Avatar } from 'antd';\nimport ExploreWebSocketInstance from '../../exploreWebsocket';\n\n\n// This will be the modal that will confirm whether or not\n// you will wnat to add someone as a close friend\n\nclass ConfirmUnfriend extends React.Component{\n\n\n\n  confirmUnfriend = () => {\n    // Thsi function will confirm the add as close friend. It will call\n    // the exportwebsocket and then send information into the backend to\n    // then add as friends.\n\n\n    // curId will be the current user Id, they will be the one adding the\n    // other person to their close friend list\n    let curId = \"\"\n\n    //FriendId will be the one getting added to the curId close friend list\n    let friendId = \"\"\n\n    if(this.props.curId){\n      curId = this.props.curId\n    }\n    if(this.props.friendId){\n      friendId = this.props.friendId\n    }\n\n\n    ExploreWebSocketInstance.sendUnfriend(\n      curId, friendId\n    )\n    this.props.onClose();\n\n\n  }\n\n  render() {\n\n    console.log(this.props)\n    return (\n      <Modal\n      visible = {this.props.visible}\n      onCancel = {() => this.props.onClose()}\n      footer = {null}\n      >\n        <div>\n          Are you sure you want to unfriend?\n\n        </div>\n\n\n        <Button\n        onClick = {() => this.props.onClose()}\n        >\n        Cancel\n        </Button>\n        <Button\n        onClick = {() => this.confirmUnfriend()}\n        >\n        Yes\n        </Button>\n      </Modal>\n\n    )\n  }\n\n}\n\nexport default ConfirmUnfriend;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/SocialCalendarFolder/SocialCalendar.js",["1298","1299","1300","1301","1302","1303","1304","1305","1306","1307","1308","1309","1310","1311","1312","1313","1314","1315","1316","1317","1318","1319","1320","1321"],"import React from 'react';\nimport * as dateFns from 'date-fns';\nimport moment from 'moment';\nimport axios from 'axios';\nimport { authAxios } from '../../components/util';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { NavLink } from 'react-router-dom';\nimport Animate from 'rc-animate';\nimport './SocialCalCSS/SocialCalAnim.css';\nimport {\n  Drawer,\n  List,\n  Avatar,\n  Divider,\n  Col,\n  Row,\n  Tag,\n  Button,\n  Modal } from 'antd';\nimport {\n  UserOutlined,\n  PlusOutlined,\n  EyeOutlined,\n  CalendarOutlined } from '@ant-design/icons';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    useHistory,\n    useLocation,\n    useParams\n  } from \"react-router-dom\";\nimport * as navActions from '../../store/actions/nav';\nimport * as calendarActions from '../../store/actions/calendars';\nimport * as socialCalActions  from '../../store/actions/socialCalendar';\nimport * as exploreActions from '../../store/actions/explore';\nimport ava1 from '../../components/images/avatar.jpg'\nimport SocialUploadPicModal from './SocialUploadPicModal';\nimport SocialEventPostModal from './SocialEventPostModal';\nimport SocialCellCoverEvents from './SocialCellCoverEvents';\nimport NotificationWebSocketInstance from '../../notificationWebsocket';\nimport './SocialCalCSS/SocialCal.css';\n\n\n\nclass SocialCalendar extends React.Component{\n\n  constructor(props){\n    super(props)\n  }\n\n  state = {\n    currentMonth: new Date(),\n    selectedDate: new Date(),\n    showSocialEventPostModal: false,\n    showSocialPicPostModal: false,\n    events: [],\n    animate:true,\n  }\n\n\n\n  componentWillReceiveProps(newProps){\n    // you bascially want to check if the date in props and the date in\n    // the url is the safe, if they are not --> you gotta change it\n    // if (this.props.currentDate !== newProps.currentDate){\n    //\n    //   const year = dateFns.getYear(newProps.currentDate)\n    //   const month = dateFns.getMonth(newProps.currentDate)\n    //   this.props.history.push('/personalcalendar/'+year+'/'+(month+1))\n    // }\n    // Instead of reloading the data everytime, the editing of the events is done in the\n    // redux\n  }\n\n\n  renderHeader() {\n    // This will be used to render the header (the month and year in the calendar)\n\n    const dateFormat = \"MMMM yyyy\"\n\n    return (\n      <div className= \"header row flex-middle\">\n        <div className = \"col col-start\">\n          <div className = 'icon' onClick ={this.prevMonth}>\n            <i style={{fontSize:'20px', color:'#1890ff'}} class=\"fas fa-chevron-circle-left\"></i>\n          </div>\n        </div>\n        <div className = \"col col-center\">\n          <span style={{fontSize:'22px'}}>\n           {dateFns.format(this.props.currentDate, dateFormat)}\n          </span>\n        </div>\n        <div className= \"col col-end\">\n          <div className = 'icon' onClick ={this.nextMonth}>\n            <i style={{fontSize:'20px', color:'#1890ff'}} class=\"fas fa-chevron-circle-right\"></i>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  renderDays() {\n    const dateFormat = \"iiii\"\n    const days = []\n    // this will get the date of the first week given the date of the current month\n    let startDate = dateFns.startOfWeek(this.props.currentDate);\n    // for loop that loops through from 0-6 and add the days accordingly\n    // to the start date which is the start of the day in the current date\n    for (let i= 0; i<7; i++){\n      days.push(\n        <div className =\"col col-center\" key = {i}>\n          {dateFns.format(dateFns.addDays(startDate, i), dateFormat)}\n          </div>\n      )\n    }\n    // the days will be a list of dates that are put in by the for loops\n     // and then the return will return all those days out\n    return <div className = \"days row\"> {days} </div>\n  }\n\n\n  renderCells(events) {\n    console.log(events)\n\n\n    // followerList and following list will be made up fo ids of the people that are\n    // following or follower of you. This will be used to check if the person\n    // can add stuff to the social calendar\n    let followerList = []\n    let followingList = []\n\n\n    let calendarOwnerId = \"\"\n    let calendarOwnerUsername = ''\n    if(this.props.profile){\n      if(this.props.profile.get_followers){\n        for (let i = 0; i< this.props.profile.get_followers.length; i++){\n          followerList.push(this.props.profile.get_followers[i].id)\n        }\n      }\n      if(this.props.profile.get_following){\n        for (let i = 0; i < this.props.profile.get_following.length; i++){\n          followingList.push(this.props.profile.get_following[i].id)\n        }\n      }\n\n      if (this.props.profile.id){\n        calendarOwnerId = this.props.profile.id\n      }\n\n    }\n\n\n    const location = this.props.location.pathname;\n    console.log(followerList, followingList)\n\n\n\n    // startOfMonth() will give you the date of the first day of the current month\n    // endOfMonth() will give you the date of the last day of the current month\n    // the const start date is to fill in the days of the week of the previous month\n    // similarly as the end date\n    const currentMonth = this.state.currentMonth;\n    const selectedDate = this.props.currentDate;\n    const monthStart = dateFns.startOfMonth(selectedDate);\n    const monthEnd = dateFns.endOfMonth(monthStart);\n    const startDate = dateFns.startOfWeek(monthStart);\n    const endDate = dateFns.endOfWeek(monthEnd);\n\n    // Once you have your start date and end date you want to loop through\n    // all the days in between\n    // then we have to subtract the start of the month with the startoftheweek\n    // if they are not the same so that they are unclickable\n\n    const dateFormat = \"d\";\n    const rows = []\n    let toDoStuff = []\n    let days = [];\n    // day is the startday, which starts at the first day of the week\n    // for the 42 block of time\n    let day = startDate;\n    let formattedDate = \"\";\n    // this loop will loop through all the days of the month\n    while (day <=endDate){\n\n\n      // we make it smaller than 7 because we still want to keep the index of the\n      // weekdays the same\n      for (let i= 0; i<7; i++){\n        for (let item = 0; item < events.length; item++){\n          // So the time we put in is the UTC time (universal time ) but when you\n          // put moment or new Date it gives you your time zome date so that is why you\n          // have to convert it\n          const date = new Date(events[item].socialCaldate)\n          console.log(events[item])\n          const utc = dateFns.addHours(date, date.getTimezoneOffset()/60)\n          if (dateFns.isSameDay(utc, day)){\n            toDoStuff.push(\n              events[item]\n            )\n          }\n        }\n        // this give the date will give the day numnber in 1-365\n\n        formattedDate = dateFns.format(day, dateFormat);\n        // used clone day so that it would do the selected day and not the endDay\n        // because the loop will end on end day and it w3il always click that day\n        const cloneDay = day;\n        // the classname in the bottom is to check if its not in the smae month\n        // the cell will be disabled\n        // It is also to check if the day is the smae as the current day\n        if (toDoStuff.length > 0){\n          // The socialEvents should only have 1 item because it holds just the single\n          // social cell\n\n          // Everything down here to the else are for cal cells that have a social\n          // cal that exist within it\n          const socialEvents = toDoStuff\n          console.log(socialEvents)\n          const calUsername = this.props.profile.username\n          const cellYear = dateFns.getYear(day)\n          const cellMonth = dateFns.getMonth(day)+1\n          const cellDay = dateFns.getDate(day)\n          days.push(\n            <div\n              className ={`col cell ${dateFns.isSameDay(day, currentMonth) ?\n            \"selected\": \"\"\n              }`}\n              key = {day}\n            >\n\n            {\n              toDoStuff[0].coverPic ?\n              <div\n              // onClick = {() => this.onOpenSocialCalModal(cloneDay, socialEvents)}\n              className = 'hoverCell'\n              >\n              {/*\n                This items in the turnary operator is the eyes, calendar addition,\n                event addition for event calendar cells that have a cover picture\n                */}\n\n              {\n                (followerList.includes(this.props.curId)&& followingList.includes(this.props.curId))\n                ||  calendarOwnerId === this.props.curId ?\n\n                <div>\n                {/*\n                  This is to check if cells that have social cell in them allow\n                  for the owern and friends to edit and add stuff to it that has\n                  a cover cell and the user either is owner or friend\n                  */}\n\n              {\n                dateFns.isSameDay(day, currentMonth) ?\n                <div>\n                <PlusOutlined\n                onClick = {() => this.onOpenSocialCalPicModal()}\n                className = 'plusButton'/>\n                <CalendarOutlined\n                onClick ={() => this.onOpenSocialCalEventModal(cloneDay)}\n                className = 'eventButton'\n                 />\n                 <Link to = {{\n                   pathname:\"/socialcal/\"+calUsername+\"/cell/\"+cellYear+\"/\"+cellMonth+\"/\"+cellDay,\n                   state:{pathname: location}\n                 }} >\n                <EyeOutlined\n                // onClick ={() => this.onOpenSocialCalModal(cloneDay, socialEvents)}\n                className = 'eyeButton'/>\n                </Link>\n                </div>\n\n                : dateFns.isAfter( day, currentMonth) ?\n                <div>\n                {/*\n                  This is for the add event, eye that have a social cell in the\n                  cell that are after the current date that has a cover cell\n                  when the user is friend or owner\n                  */}\n                <CalendarOutlined\n                onClick ={() => this.onOpenSocialCalEventModal(cloneDay)}\n                className = 'eventButtonAfter'\n                 />\n                 <Link to = {{\n                   pathname:\"/socialcal/\"+calUsername+\"/cell/\"+cellYear+\"/\"+cellMonth+\"/\"+cellDay,\n                   state:{pathname: location}\n                 }} >\n                 <EyeOutlined\n                 // onClick ={() => this.onOpenSocialCalModal(cloneDay, socialEvents)}\n                 className = 'eyeButtonAfter'/>\n                 </Link>\n                 </div>\n\n                 :\n                 <Link to = {{\n                   pathname:\"/socialcal/\"+calUsername+\"/cell/\"+cellYear+\"/\"+cellMonth+\"/\"+cellDay,\n                   state:{pathname: location}\n                 }} >\n                 {/*\n                   This is for the days that have already passed that has a cover cell\n                   and when the user is either friend or calendar owner\n                   */}\n                <EyeOutlined\n                // onClick = {() => this.onOpenSocialCalModal(cloneDay, socialEvents)}\n                className = 'eyeButtonPass'/>\n                </Link>\n              }\n                </div>\n\n                :\n                <Link to = {{\n                  pathname:\"/socialcal/\"+calUsername+\"/cell/\"+cellYear+\"/\"+cellMonth+\"/\"+cellDay,\n                  state:{pathname: location}\n                }} >\n                {/*\n                  This is for viewing the event when there is a cover picture on teh cell\n                  and the user is not a friend or calendar owner\n                  */}\n                <EyeOutlined\n                // onClick = {() => this.onOpenSocialCalModal(cloneDay, socialEvents)}\n                className = 'eyeButtonPass'/>\n                </Link>\n\n              }\n              <Avatar\n              className = 'imgCover'\n              size = {250}\n              shape= 'square'\n              src = {'http://127.0.0.1:8000'+toDoStuff[0].coverPic} />\n              <span className = \"bgD\"> {formattedDate}</span>\n              </div>\n\n              : toDoStuff[0].get_socialCalEvent.length !== 0 ?\n\n              <div>\n              {/*\n                These are for when there is no cover photo but there is are events\n                that we want to show.\n                */}\n                <div\n                className = 'eventBoxListHeader'\n                >\n                <span className = \"bg\"> {formattedDate}</span>\n                {\n                  (followerList.includes(this.props.curId)&& followingList.includes(this.props.curId))\n                  ||  calendarOwnerId === this.props.curId ?\n\n                  <div>\n                  {/*\n                    This is for when the user is a friend or the owenr of the\n                    social calendar\n                    */}\n\n                {\n                  dateFns.isSameDay(day, currentMonth) ?\n                  <div\n                  className = 'buttonHolder'\n                  >\n\n                  {/*\n                    This will be the button at the top of the cell list of the current\n                    day\n                    */}\n                  <PlusOutlined\n                  onClick = {() => this.onOpenSocialCalPicModal()}\n                  className = 'plusButton'/>\n                  <CalendarOutlined\n                  onClick ={() => this.onOpenSocialCalEventModal(cloneDay)}\n                  className = 'eventButton'\n                   />\n                   <Link to = {{\n                     pathname:\"/socialcal/\"+calUsername+\"/cell/\"+cellYear+\"/\"+cellMonth+\"/\"+cellDay,\n                     state:{pathname: location}\n                   }} >\n                  <EyeOutlined\n                  // onClick ={() => this.onOpenSocialCalModal(cloneDay, socialEvents)}\n                  className = 'eyeButton'/>\n                  </Link>\n                  </div>\n\n                  : dateFns.isAfter( day, currentMonth) ?\n                  <div>\n                  {/*\n                    This will be the buttons on top of the eventList for the days\n                    after the current day\n                    */}\n                  <CalendarOutlined\n                  onClick ={() => this.onOpenSocialCalEventModal(cloneDay)}\n                  className = 'eventButtonAfter'\n                   />\n\n                   <Link to = {{\n                     pathname:\"/socialcal/\"+calUsername+\"/cell/\"+cellYear+\"/\"+cellMonth+\"/\"+cellDay,\n                     state:{pathname: location}\n                   }} >\n                   <EyeOutlined\n                   // onClick ={() => this.onOpenSocialCalModal(cloneDay, socialEvents)}\n                   className = 'eyeButtonAfter'/>\n                   </Link>\n                   </div>\n\n                   :\n\n                   <Link to = {{\n                     pathname:\"/socialcal/\"+calUsername+\"/cell/\"+cellYear+\"/\"+cellMonth+\"/\"+cellDay,\n                     state:{pathname: location}\n                   }} >\n                   {/*\n                     This is for the buttons on top of the event list for days before\n                     the current\n                     */}\n                  <EyeOutlined\n                  // onClick = {() => this.onOpenSocialCalModal(cloneDay, socialEvents)}\n                  className = 'eyeButtonPass'/>\n                  </Link>\n                }\n                  </div>\n\n                  :\n\n                    <Link to = {{\n                      pathname:\"/socialcal/\"+calUsername+\"/cell/\"+cellYear+\"/\"+cellMonth+\"/\"+cellDay,\n                      state:{pathname: location}\n                    }} >\n                    {/*\n                      For the eye above the event cell for people who are not friends\n                      or the owner of the calendar\n                      */}\n                  <EyeOutlined\n                  // onClick = {() => this.onOpenSocialCalModal(cloneDay, socialEvents)}\n                  className = 'eyeButtonPass'/>\n                  </Link>\n\n                }\n                </div>\n\n              <SocialCellCoverEvents\n              curId = {this.props.curId}\n              cellId = {toDoStuff[0].id}\n              cellDay = {cloneDay}\n              events = {toDoStuff[0].get_socialCalEvent}\n              history = {this.props.history}\n              />\n              </div>\n\n              :\n\n              <div\n              className = 'hoverCell'\n              >\n              {/*\n                This is for when the cal cell object is there but there is no\n                cover cell and there are no event list\n                */}\n              {\n                (followerList.includes(this.props.curId)&& followingList.includes(this.props.curId))\n                ||  calendarOwnerId === this.props.curId ?\n\n                <div>\n\n              {\n                dateFns.isSameDay(day, currentMonth) ?\n                <div>\n                {/*\n                  When there is a social cell object but no cover cell and event\n                  list. This will be for the current day\n                  */}\n\n                <PlusOutlined\n                onClick = {() => this.onOpenSocialCalPicModal()}\n                className = 'plusButton'/>\n                <CalendarOutlined\n                onClick ={() => this.onOpenSocialCalEventModal(cloneDay)}\n                className = 'eventButton'\n                 />\n                 <Link to = {{\n                   pathname:\"/socialcal/\"+calUsername+\"/cell/\"+cellYear+\"/\"+cellMonth+\"/\"+cellDay,\n                   state:{pathname: location}\n                 }} >\n                <EyeOutlined\n                // onClick ={() => this.onOpenSocialCalModal(cloneDay, socialEvents)}\n                className = 'eyeButton'/>\n                </Link>\n                </div>\n\n                : dateFns.isAfter( day, currentMonth) ?\n                <div>\n                {/*\n                  For days after the social cell and there is a social cal cell object\n                  but not cover picture or events\n                  */}\n                <CalendarOutlined\n                onClick ={() => this.onOpenSocialCalEventModal(cloneDay)}\n                className = 'eventButtonAfter'\n                 />\n                 <Link to = {{\n                   pathname:\"/socialcal/\"+calUsername+\"/cell/\"+cellYear+\"/\"+cellMonth+\"/\"+cellDay,\n                   state:{pathname: location}\n                 }} >\n                 <EyeOutlined\n                 // onClick ={() => this.onOpenSocialCalModal(cloneDay, socialEvents)}\n                 className = 'eyeButtonAfter'/>\n                 </Link>\n                 </div>\n\n                 :\n                 <Link to = {{\n                   pathname:\"/socialcal/\"+calUsername+\"/cell/\"+cellYear+\"/\"+cellMonth+\"/\"+cellDay,\n                   state:{pathname: location}\n                 }} >\n                 {/*\n                   For days before the current day with a social cal cell object\n                   but no cover photo or events\n                   */}\n                <EyeOutlined\n                // onClick = {() => this.onOpenSocialCalModal(cloneDay, socialEvents)}\n                className = 'eyeButtonPass'/>\n                </Link>\n              }\n                </div>\n\n                :\n                <Link to = {{\n                  pathname:\"/socialcal/\"+calUsername+\"/cell/\"+cellYear+\"/\"+cellMonth+\"/\"+cellDay,\n                  state:{pathname: location}\n                }} >\n                {/*\n                  This is for viewing the event cell when there is a social cell object\n                  but you are not a friend or ower\n                  */}\n                <EyeOutlined\n                // onClick = {() => this.onOpenSocialCalModal(cloneDay, socialEvents)}\n                className = 'eyeButtonPass'/>\n                </Link>\n              }\n              <span className = \"bg\"> {formattedDate}</span>\n              </div>\n            }\n\n\n          </div>\n        )} else {\n          //This is used for the current user page\n          //Everything from here down is for all the cells that do not have a\n          // social cell in it\n          const socialEvents = [\n            {\n              socialCalUser: this.props.profile\n            }\n          ]\n          const calUsername = this.props.profile.username\n          const cellYear = dateFns.getYear(day)\n          const cellMonth = dateFns.getMonth(day)+1\n          const cellDay = dateFns.getDate(day)\n          days.push(\n          <div\n            className ={`col cell  ${ dateFns.isSameDay(day, currentMonth) ?\n          \"selected\": \"\"\n            }`}\n            key = {day}\n            // onClick = {() => this.onOpenSocialCalModal(cloneDay, socialEvents)}\n          >\n          <div\n          className = 'hoverCell'\n          >\n\n\n          {\n            (followerList.includes(this.props.curId) && followingList.includes(this.props.curId))\n            ||  calendarOwnerId === this.props.curId ?\n\n            <div>\n\n          {\n            dateFns.isSameDay(day, currentMonth) ?\n            <div>\n            {/* This is for the eye, calendar, event post for the current day without\n              a picture in it and no cell created\n              */}\n            <PlusOutlined\n            onClick = {() => this.onOpenSocialCalPicModal()}\n            className = 'plusButton'/>\n            <CalendarOutlined\n            onClick ={() => this.onOpenSocialCalEventModal(cloneDay)}\n            className = 'eventButton'\n             />\n            <Link to = {{\n              pathname:\"/socialcal/\"+calUsername+\"/cell/\"+cellYear+\"/\"+cellMonth+\"/\"+cellDay,\n              state:{pathname: location}\n            }} >\n            <EyeOutlined\n            // onClick ={() => this.onOpenSocialCalModal(cloneDay, socialEvents)}\n            className = 'eyeButton'/>\n            </Link>\n            </div>\n\n            : dateFns.isAfter( day, currentMonth) ?\n\n            <div>\n            {/*\n              This is for the eye, calendar for all the cells that are after teh\n              current day and does not have a cover picture and no cell created\n              */}\n            <CalendarOutlined\n            onClick ={() => this.onOpenSocialCalEventModal(cloneDay)}\n            className = 'eventButtonAfter'\n             />\n\n             <Link to = {{\n               pathname:\"/socialcal/\"+calUsername+\"/cell/\"+cellYear+\"/\"+cellMonth+\"/\"+cellDay,\n               state:{pathname: location}\n             }} >\n             <EyeOutlined\n             // onClick ={() => this.onOpenSocialCalModal(cloneDay, socialEvents)}\n             className = 'eyeButtonAfter'/>\n             </Link>\n             </div>\n\n             :\n             <Link to = {{\n               pathname:\"/socialcal/\"+calUsername+\"/cell/\"+cellYear+\"/\"+cellMonth+\"/\"+cellDay,\n               state:{pathname: location}\n             }} >\n             {/*\n               This is for the the eye that is before the current day for cells that\n               do not have the cell object created\n               */}\n            <EyeOutlined\n            // onClick = {() => this.onOpenSocialCalModal(cloneDay, socialEvents)}\n            className = 'eyeButtonPass'/>\n            </Link>\n          }\n            </div>\n\n            :\n\n            <Link to = {{\n              pathname:\"/socialcal/\"+calUsername+\"/cell/\"+cellYear+\"/\"+cellMonth+\"/\"+cellDay,\n              state:{pathname: location}\n            }} >\n            {/*\n              This is for the eye on the social calendar where the calendar is not\n              not of a friend or of the own and so it is just viewing. This is for\n              cells that do not have an existing social cell in it\n              */}\n            <EyeOutlined\n            // onClick = {() => this.onOpenSocialCalModal(cloneDay, socialEvents)}\n            className = 'eyeButtonPass'/>\n            </Link>\n\n          }\n          <span className = \"bg\"> {formattedDate}</span>\n          </div>\n        </div>\n        )}\n      toDoStuff = []\n      day = dateFns.addDays(day, 1);\n      }\n      // so this will start at the start of the week and then loop through the 7 days\n      // once done it will push the list into the rows\n      // so there will be a list of list and each list would be a week\n      rows.push(\n        <div className='row' key ={day}>\n          {days}\n        </div>\n      );\n      // once the list filled with each day is filled he empties the list and\n      // does it again in the loop\n      days = []\n    }\n    // now this will return a list of list and each week representing a week\n    // with each item as the day\n\n    return <div className = \"socialCalBody\"> {rows} </div>\n  }\n\n\n  // so we need function to deal with cell click to change the date\n  // Then you need function to show previous and next monthly\n  onDateClick = day => {\n    const selectYear = dateFns.getYear(day).toString()\n    const selectMonth = (dateFns.getMonth(day)+1).toString()\n    const selectDay = dateFns.getDate(day).toString()\n  this.props.history.push('/personalcalendar/'+selectYear+'/'+selectMonth+'/'+selectDay)\n  }\n\n\n\n\n\n  // You can use the addMonths function to add one month to the\n  // current month\n  nextMonth = () => {\n    this.setState({\n      animate: !this.state.animate,\n    });\n    this.props.nextMonth();\n  }\n\n  prevMonth = () => {\n    this.setState({\n      animate: !this.state.animate,\n    });\n    this.props.prevMonth()\n  }\n\n\n  onClickItem = oneEvent =>{\n    console.log(oneEvent)\n    this.props.openModal(oneEvent)\n  }\n\n  onOpenSocialCalPicModal = () => {\n    this.setState({\n      showSocialPicPostModal: true\n    })\n  }\n\n  onCloseSocialCalPicModal = () => {\n    this.setState({\n      showSocialPicPostModal: false\n    })\n  }\n\n  onOpenSocialCalEventModal = (eventDay) => {\n    console.log(eventDay)\n    this.setState({\n      showSocialEventPostModal: true,\n      selectedDate: eventDay\n    })\n  }\n\n  onCloseSocialCalEventModal = () => {\n    this.setState({\n      showSocialEventPostModal: false\n    })\n  }\n\n  handlePictureUpload = (values) => {\n    // This is used to upload pictures into the calendar cell\n\n    // So when you want to upload a file into the backend you need to\n    // add it into a form data in order for the file to be actually sent as a file\n    // if not it will send as a json or not send at all. On top of that you have to add\n    //  a header with a content-type of a multipart/form-data\n\n    console.log(values)\n    if(values.length !== 0){\n      const formData = new FormData()\n      if(values.length !== 0){\n        for(let i = 0; i < values.length; i++) {\n          formData.append('image['+ i + ']', values[i].originFileObj)\n        }\n      }\n\n      // This will be the current user\n      const curId = this.props.curId\n\n      // This will be the owner of the calendar Id\n      const ownerId = this.props.profile.id\n      // formData.append('imgList',fileList)\n\n\n      if(curId === ownerId){\n        authAxios.post('http://127.0.0.1:8000/mySocialCal/uploadPic/'+ownerId,\n          formData,\n          {headers: {\"content-type\": \"multipart/form-data\"}}\n\n        )\n        .then(res=> {\n          console.log(res.data)\n          if(res.data.coverPicChange){\n            if(res.data.created){\n              this.props.addSocialCell(res.data.cell)\n            } else {\n              // when a new cell is not made\n              console.log('hit here')\n              this.props.addSocialCellCoverPic(res.data.cell.coverPic, res.data.cell.id)\n            }\n          }\n        })\n      } else {\n        // Since it is better to add pictures with an http call. We will add pictures\n        // using an authaxios call then we will return the id of the notificaiton and then\n        // take that id and then sent it into the websocket.\n        authAxios.post('http://127.0.0.1:8000/userprofile/notification/pendingPic/'+curId+'/'+ownerId,\n          formData,\n          {headers: {\"content-type\": \"multipart/form-data\"}}\n      )\n      .then(res =>{\n        NotificationWebSocketInstance.sendPendingSocialPics(res.data)\n\n      })\n      }\n\n      // maybe change this when we have channels working\n      // window.location.reload(true)\n      this.onCloseSocialCalPicModal();\n    }\n\n\n  }\n\n\n\n\n  render(){\n    // className is to determine the style\n    console.log(this.props)\n    let socialCalCell = []\n    if (this.props.profile){\n      if (this.props.profile.get_socialCal){\n        socialCalCell = this.props.profile.get_socialCal\n      }\n    }\n\n\n    return(\n      <div className = 'socialCalContainer'>\n\n          <div className = 'socialCalendar'>\n\n            <Animate\n              showProp=\"show\"\n              transitionName=\"fade\"\n\n            >\n            <div show={this.state.animate}>\n              {this.renderHeader()}\n              {this.renderDays()}\n              {this.renderCells(socialCalCell)}\n            </div>\n          </Animate>\n          </div>\n\n\n\n            <SocialUploadPicModal\n            close = {this.onCloseSocialCalPicModal}\n            view = {this.state.showSocialPicPostModal}\n            onSubmit = {this.handlePictureUpload}\n             />\n            <SocialEventPostModal\n            close = {this.onCloseSocialCalEventModal}\n            view = {this.state.showSocialEventPostModal}\n            curDate = {this.state.selectedDate}\n            calendarOwner = {this.props.profile.id}\n            calOwnerUsername = {this.props.profile.username}\n            />\n\n        </div>\n    )\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return{\n    currentDate: state.socialCal.socialDate,\n    events: state.socialCal.socialEvents,\n    curSocialEventDate: state.socialCal.curSocialEventDate,\n    curId: state.auth.id\n  }\n}\n\n// getSelectedDate will get the date from the url\n// it will help with the lagging of the state so when we put it in\nconst mapDispatchToProps = dispatch => {\n  return {\n    getSelectedDate: selectedDate => dispatch(calendarActions.getDate(selectedDate)),\n    nextMonth: () => dispatch(socialCalActions.nextMonthSocial()),\n    prevMonth: () => dispatch(socialCalActions.prevMonthSocial()),\n    addSocialCell: socialCellObj => dispatch(exploreActions.addSocialCell(socialCellObj)),\n    addSocialCellCoverPic: (coverPic, cellId) => dispatch(exploreActions.addSocialCellCoverPic(coverPic, cellId))\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(SocialCalendar);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/CalendarViewDropDown.js",["1322","1323"],"import React from 'react';\nimport * as dateFns from 'date-fns';\nimport moment from 'moment';\nimport { Select } from 'antd';\n\nconst { Option } = Select;\n\n\nclass CalendarViewDropDown extends React.Component{\n// For the drop down I will be using the current day to make the decison to loop through\n// each of cal\n\n\n  // onWeekClick = () => {\n  //   console.log('here')\n  //   if (this.props.calType === \"week\"){\n  //     console.log('right here buddy')\n  //     this.props.history.push('/personalcalendar/w/2020/9/20')\n  //   }\n  // }\n\n  onCalTypeChange = (calType) => {\n    console.log(calType)\n    if(this.props.calType === 'week'){\n      // This is for when the week cal that is when it shows up for the week\n      // calendar\n      const selectYear  = this.props.matchPara.year;\n      const selectMonth  = this.props.matchPara.month;\n      const selectDay  = this.props.matchPara.day;\n      if(calType === 'week'){\n        this.props.history.push('/personalcalendar/w/'\n        +selectYear+'/'+selectMonth+'/'+selectDay)\n      } else if (calType === 'day'){\n        this.props.history.push('/personalcalendar/'+selectYear\n        +'/'+selectMonth+'/'+selectDay);\n      } else if (calType === 'month'){\n        this.props.history.push('/personalcalendar/'+selectYear\n      +'/'+selectMonth);\n    } else if (calType === 'year' ){\n        this.props.history.push('/personalcalendar/'+selectYear);\n      }\n    } else if(this.props.calType === 'month'){\n      // This will be the drop down selection for the week cal\n      const curDate = new Date();\n      const firstDayWeek = dateFns.startOfWeek(curDate)\n      const firstWeekDay = dateFns.getDate(firstDayWeek).toString()\n      const firstWeekMonth = (dateFns.getMonth(firstDayWeek)+1).toString()\n      const firstWeekYear = dateFns.getYear(firstDayWeek).toString()\n\n      const selectYear  = this.props.matchPara.year;\n      const selectMonth = this.props.matchPara.month;\n      // The selectedFirstday will get the first day of the week\n      const selectFirstDay = dateFns.getDate(dateFns.startOfWeek(curDate)).toString();\n      const selectDay = dateFns.getDate(curDate).toString()\n      if(calType === 'week'){\n        this.props.history.push('/personalcalendar/w/'+\n      firstWeekYear + '/'+firstWeekMonth +'/'+firstWeekDay)\n      } else if (calType === 'day'){\n        this.props.history.push('/personalcalendar/'+selectYear+\n      '/'+selectMonth+'/'+selectDay)\n      } else if (calType === 'month'){\n        this.props.history.push('/personalcalendar/'+selectYear\n        +'/'+selectMonth)\n      } else if (calType === 'year'){\n        this.props.history.push('/personalcalendar/'+selectYear)\n      }\n    } else if(this.props.calType === 'day'){\n\n      // This will be the drop down selection for the day cal\n      const curDay = this.props.curDate\n      const firstDayWeek = dateFns.startOfWeek(curDay)\n      const firstWeekDay = dateFns.getDate(firstDayWeek).toString()\n      const firstWeekMonth = (dateFns.getMonth(firstDayWeek)+1).toString()\n      const firstWeekYear = dateFns.getYear(firstDayWeek).toString()\n      const selectYear  = this.props.matchPara.year;\n      const selectMonth  = this.props.matchPara.month;\n      const selectDay  = this.props.matchPara.day;\n      if (calType === 'week'){\n        this.props.history.push('/personalcalendar/w/'\n        +firstWeekYear+'/'+firstWeekMonth+'/'+firstWeekDay)\n      } else if(calType === 'day'){\n        this.props.history.push('/personalcalendar/'+selectYear+\n      '/'+selectMonth+'/'+selectDay)\n      } else if(calType === 'month'){\n        this.props.history.push('/personalcalendar/'+selectYear\n        +'/'+selectMonth)\n      } else if(calType === 'year'){\n        this.props.history.push('/personalcalendar/'+selectYear)\n      }\n    } else if(this.props.calType === 'year'){\n      // This will be the drop down selection for the year\n      const curDate = new Date();\n      const selectDayYear = dateFns.getYear(curDate).toString();\n      const selectYear = this.props.matchPara.year;\n      const selectMonth = (dateFns.getMonth(curDate)+1).toString();\n      const selectFirstWeekMonth = (dateFns.getMonth(dateFns.startOfWeek(curDate))+1).toString()\n      const selectFirstDay = dateFns.getDate(dateFns.startOfWeek(curDate)).toString();\n      const selectDay = dateFns.getDate(curDate).toString()\n      if (calType === 'week'){\n        this.props.history.push('/personalcalendar/w/'+\n      selectDayYear + '/'+selectFirstWeekMonth +'/'+selectFirstDay)\n      } else if(calType === 'day'){\n        this.props.history.push('/personalcalendar/'+selectDayYear+\n      '/'+selectMonth+'/'+selectDay)\n      } else if(calType === 'month'){\n        this.props.history.push('/personalcalendar/'+selectDayYear\n        +'/'+selectMonth)\n      } else if(calType === 'year'){\n        this.props.history.push('/personalcalendar/'+selectYear)\n      }\n    }\n  }\n\n\n  render() {\n    console.log(this.props)\n\n    return(\n      <div>\n        <Select\n          onChange = {this.onCalTypeChange}\n          value = {this.props.calType}\n          style={{ width: 160, fontSize:'16px', marginLeft:'225px'}}\n        >\n          <Option value = 'week'> <b>Week</b> </Option>\n          <Option value = \"day\"> <b>Day</b> </Option>\n          <Option value = 'month'> <b>Month</b> </Option>\n          <Option value = \"year\"> <b>Year</b> </Option>\n        </Select>\n\n      </div>\n\n    )\n  }\n}\n\nexport default CalendarViewDropDown;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EventSyncForms/EventSyncModal.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/MiniCalendar.js",["1324","1325","1326","1327"],"import React from 'react';\nimport * as dateFns from 'date-fns';\nimport { connect } from 'react-redux';\nimport * as calendarActions from '../../store/actions/calendars'\nimport './PersonalCalCSS/NewCalendar.css';\n\n\n\n\nclass MiniCalendar extends React.Component{\n\n// So when making the minicalendar, you can just use states because nothing too\n// crazy is happening here\n  state = {\n    currentMonth: new Date(),\n    selectedDate: new Date()\n  }\n\n  renderHeader() {\n    const dateFormat = \"MMMM yyyy\"\n    return (\n      <div>\n\n        <div className= \"header miniRow flex-middle\">\n          <div className = \"miniCol miniCol-start\">\n            <div className = \"icon\" onClick ={this.prevMonth}>\n            <i className= 'arrow arrow-left'></i>\n            </div>\n          </div>\n          <div className = \"miniCol miniCol-center\" onClick = {() => this.onMonthClick(\n              this.state.currentMonth\n          )}>\n            <span className = 'miniMonth'>\n             {dateFns.format(this.state.currentMonth, dateFormat)}\n            </span>\n          </div>\n          <div className= \"miniCol miniCol-end\" onClick = {this.nextMonth}>\n            <div className = \"icon\">\n            <i className = 'arrow arrow-right'></i>\n            </div>\n          </div>\n        </div>\n\n      </div>\n\n    );\n  }\n\n\n\n  renderDays() {\n    const dateFormat = 'iiiii'\n    const days = []\n    let startDate = dateFns.startOfWeek(this.state.currentMonth);\n    for (let i=0; i< 7; i++){\n      days.push(\n        <div className = 'miniCol miniCol-center' key = {i}>\n          {dateFns.format(dateFns.addDays(startDate, i), dateFormat)}\n        </div>\n      )\n    }\n\n    return <div className = 'days miniRow'>{days}</div>\n\n  }\n\n  renderSide() {\n    // This is just to render the tiny tabs for the week view in the mini\n    // calendar\n    const {currentMonth, selectedDate} = this.state\n    const startDateMonth = dateFns.startOfMonth(currentMonth);\n    const endDateMonth = dateFns.endOfMonth(currentMonth);\n    const startFirstWeek = dateFns.startOfWeek(startDateMonth);\n    const startLastWeek = dateFns.startOfWeek(endDateMonth);\n\n    let date = startFirstWeek;\n    let formattedWeek = '';\n    const weekFormat = 'dd mmmm yyyy'\n\n    const week = []\n    while (date <= startLastWeek){\n      formattedWeek = dateFns.format(date, weekFormat)\n      const cloneDate = date\n      week.push(\n        <div className = 'miniholder'>\n        <div\n        onClick = {() => this.onWeekClick(cloneDate)}\n        className = 'minitabs'\n        >\n        <span></span>\n        </div>\n        </div>\n      )\n      date = dateFns.addWeeks(date, 1)\n    }\n    return <div className = 'minisideBar'> {week} </div>\n\n\n  }\n\n\n  renderCells () {\n    const {currentMonth, selectedDate} = this.state;\n    const monthStart = dateFns.startOfMonth(currentMonth);\n    const monthEnd = dateFns.endOfMonth(monthStart);\n    const startDate = dateFns.startOfWeek(monthStart);\n    const endDate = dateFns.endOfWeek(monthEnd);\n\n    const dateFormat = \"d\";\n    const rows = [];\n    let toDoStuff = [];\n    let days = [];\n\n    let day = startDate;\n    let formattedDate = \"\";\n\n    while (day <= endDate){\n      for (let i=0; i<7; i++){\n        formattedDate = dateFns.format(day, dateFormat)\n        const cloneDay = day;\n        days.push(\n          <div\n            className = 'miniCol miniCell'\n            key = {day}\n          >\n            <div className = 'miniDay' onClick = {() =>\n            this.onDateClick(cloneDay)}>\n              <span className = ''>{formattedDate}</span>\n            </div>\n          </div>\n        )\n        day = dateFns.addDays(day, 1)\n      }\n\n      rows.push(\n        <div className = 'miniRow' key = {day}>\n          {days}\n        </div>\n      )\n      days = []\n    }\n    return <div className = 'body'>{rows}</div>\n  }\n\n  onDateClick = date => {\n    const selectYear = dateFns.getYear(date).toString()\n    const selectMonth = (dateFns.getMonth(date)+1).toString()\n    const selectDay = dateFns.getDate(date).toString()\n    console.log(selectYear, selectMonth, selectDay)\n    this.props.getSelectedDate(date)\n    this.props.history.push('/personalcalendar/'+selectYear+'/'+selectMonth+'/'+selectDay)\n  }\n\n  onMonthClick = date => {\n    const selectYear = dateFns.getYear(date).toString()\n    const selectMonth = (dateFns.getMonth(date)+1).toString()\n    console.log(selectYear, selectMonth)\n    this.props.getSelectedDate(date)\n    this.props.history.push('/personalcalendar/'+selectYear+'/'+selectMonth)\n  }\n\n  onWeekClick = week => {\n    const selectYear = dateFns.getYear(week).toString()\n    const selectMonth = (dateFns.getMonth(week)+1).toString()\n    const selectDay = dateFns.getDate(week).toString()\n    this.props.getSelectedDate(week)\n    this.props.history.push('/personalcalendar/w/'+selectYear+'/'+selectMonth+'/'+selectDay)\n  }\n\n  nextMonth = () =>{\n    this.setState({\n      currentMonth: dateFns.addMonths(this.state.currentMonth, 1)\n    })\n  }\n\n  prevMonth = () =>{\n    this.setState({\n      currentMonth: dateFns.subMonths(this.state.currentMonth, 1)\n    })\n  }\n\n\n  render() {\n    // You can add in {this.renderSide()} any time\n    return(\n      <div className = \"miniflex-container\">\n        <div className = 'miniSidecol'>\n\n        </div>\n        <div className = 'miniCalendar'>\n          {this.renderHeader()}\n          {this.renderDays()}\n          {this.renderCells()}\n\n        </div>\n      </div>\n    )\n  }\n\n}\n\n\nconst mapDispatchToProps = dispatch => {\n  return{\n  getSelectedDate: selectedDate => dispatch(calendarActions.getDate(selectedDate))\n  }\n}\n\n\n\nexport default connect(null, mapDispatchToProps)(MiniCalendar);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EditCalEventForms/EditEventPopUp.js",["1328","1329","1330","1331","1332","1333","1334","1335","1336","1337","1338","1339","1340","1341","1342","1343","1344"],"import React from 'react';\nimport * as dateFns from 'date-fns';\nimport moment from 'moment';\nimport { connect } from \"react-redux\";\nimport { Button, notification, Divider, Space, Modal, Popover } from 'antd';\nimport {\n  RadiusBottomleftOutlined,\n  RadiusBottomrightOutlined,\n} from '@ant-design/icons';\nimport axios from 'axios';\nimport { authAxios } from '../../../components/util';\nimport CalendarEventWebSocketInstance from '../../../calendarEventWebsocket';\nimport NotificationWebSocketInstance from '../../../notificationWebsocket'\nimport * as navActions from '../../../store/actions/nav';\nimport * as calendarEventActions from '../../../store/actions/calendarEvent';\nimport * as calendarActions from '../../../store/actions/calendars';\n// import CalendarForm from './CalendarForm';\n\nimport ReduxEditEventForm from './ReduxEditEventForm';\n\n\n\n\nclass EditEventPopUp extends React.Component {\n  //         <EditEventForm  {...this.props}/>\n  timeConvert = (time) => {\n    // This function will take in a time and then covert the time to\n    // a 1-24 hour hour so that it cna be used to add into the\n    // date and be submited\n\n    console.log(time)\n    let hour = parseInt(time.substring(0,2))\n    let minutes = parseInt(time.substring(3,5))\n    let ampm = time.substring(5,8)\n\n    console.log(minutes)\n    console.log(hour)\n\n    let convertedTime = ''\n\n    if (time.includes('PM')){\n      if (hour !==  12){\n        hour = hour + 12\n      }\n    } else if (time.includes('AM')){\n      if(hour === 12){\n        hour = 0\n      }\n    }\n\n    const timeBundle = {\n      firstHour: hour,\n      firstMin: minutes\n    }\n\n    return timeBundle\n\n  }\n\n\n  submit = (values) => {\n\n    // Similar to the submitting to addforms you still have to convert all the\n    // days and times correctly in order to add them correctly into the backend\n\n    console.log(values);\n\n    const calendarId = this.props.calendarId\n\n    let start_date = values.startDate.toDate()\n    let end_date = values.startDate.toDate()\n    const start_time = this.timeConvert(values.startTime)\n    const end_time = this.timeConvert(values.endTime)\n\n    console.log(values.startTime, values.endTime)\n\n    start_date = dateFns.addHours(start_date, start_time.firstHour)\n    start_date = dateFns.addMinutes(start_date, start_time.firstMin)\n    const instance_start_date = dateFns.format(start_date, 'yyyy-MM-dd HH:mm:ss')\n\n    end_date = dateFns.addHours(end_date, end_time.firstHour)\n    end_date = dateFns.addMinutes(end_date, end_time.firstMin)\n\n    console.log(end_date)\n    const instance_end_date = dateFns.format(end_date, 'yyyy-MM-dd HH:mm:ss')\n    // const start_time = dateFns.format(new Date(moment(values.start_time)), 'yyyy-MM-dd hh:mm:ss')\n    // const end_time = dateFns.format(new Date(moment(values.end_time)), 'yyyy-MM-dd hh:mm:ss')\n\n    console.log(start_date, end_date)\n\n      // So two routes will go if this happens, if the share has noone then you\n      // will just run the axios then run the redux but however if there is people\n      // you want share with then you will run the channels\n\n      // This is for when you make an event\n\n      let eventId = \"\"\n\n      if(values.friends.length === 0 ){\n        authAxios.post('http://127.0.0.1:8000/mycalendar/events/create/',{\n          title: values.title,\n          content: values.content,\n          start_time: start_date,\n          end_time: end_date,\n          location: values.location,\n          color: values.eventColor,\n          person: [this.props.id],\n          repeatCondition: values.repeatCondition,\n          host: this.props.id,\n          accepted: [this.props.id],\n        })\n        .then(res => {\n\n          this.props.addEvents(res.data)\n\n        })\n\n        // The event instance is pretty much used when you just recently added an\n        // event, so because of that you want to add the date in just as how the\n        // date and event will be added according to the loaded event\n\n        const curUserObj = {\n          first_name: this.props.firstName,\n          id: this.props.id,\n          last_name: this.props.lastName,\n          profile_picture: this.props.profilePic,\n          username:this.props.username,\n        }\n\n        const instanceEvent = {\n          title: values.title,\n          content: values.content,\n          start_time: instance_start_date,\n          end_time: instance_end_date,\n          location: values.location,\n          color: values.eventColor,\n          person: [curUserObj],\n          invited: [],\n          repeatCondition: values.repeatCondition,\n          host: curUserObj,\n          accepted: [this.props.id],\n          decline: []\n        }\n\n        console.log(eventId)\n        // add color to addEvents in redux\n      } else {\n        // This will be sent when you have poeple to share. Unlike the previous one\n        // where it just the current person, this one you add everyone you are shareing\n        // with along with your self into the person field\n\n\n        const inviteList = values.friends.slice()\n        console.log(inviteList)\n        let shareList = values.friends\n        shareList.push(this.props.username)\n        console.log(shareList)\n        console.log(inviteList)\n        const createSharedEventObject = {\n          command: 'add_shared_event',\n          title: values.title,\n          person: shareList,\n          invited: inviteList,\n          content: values.content,\n          location: values.location,\n          eventColor: values.eventColor,\n          startDate: start_date,\n          endDate: end_date,\n          repeatCondition: values.repeatCondition,\n          host: this.props.id,\n          // accepted: [this.props.id]\n\n        }\n\n        console.log(createSharedEventObject)\n\n        CalendarEventWebSocketInstance.sendEvent(createSharedEventObject);\n\n        // This is to send a notification to notify the other user that a person\n        // shared an event with them\n        // const notificationObject = {\n        //   command: 'send_shared_event_notification',\n        //   actor: this.props.id,\n        //   recipient: inviteList,\n        //   eventDate: instance_start_date,\n        //   eventHour: start_time.firstHour,\n        //   eventMin: start_time.firstMin\n        // }\n        // NotificationWebSocketInstance.sendNotification(notificationObject)\n\n\n      }\n\n    this.props.close()\n  }\n\n  openNotification = placement => {\n  notification.info({\n    message: `Event deleted`,\n    placement,\n    });\n  };\n\n  delete = (e,value) => {\n    e.preventDefault()\n    this.props.deleteEvent(value)\n    this.openNotification('bottom')\n    this.props.close()\n\n  }\n\n  timeConvertFunction = (time) => {\n    // This fucntion will take in a 1-24 hour time\n    // and then returna  1-12 am/pm time\n    // This fucntion will take in the time as a string in the 1-24 hour\n    // time format\n\n    console.log(time)\n    if (time !== null){\n      let hour = time.substring(0, 2)\n      let min = time.substring(3, 5)\n      let final_time = ''\n      if (hour > 12 ){\n        hour = hour - 12\n        if (hour < 10){\n            final_time = \"0\"+hour + ':'+min+' PM'\n        } else {\n            final_time = hour + ':'+min+' PM'\n        }\n      } else if(hour <= 12 ){\n        if (hour == 0){\n          final_time = '12:' + min + ' AM'\n        } else if (hour == 12) {\n          final_time = '12:' + min + ' PM'\n        } else {\n          final_time = hour +':'+ min+' AM'\n        }\n      }\n      console.log(final_time)\n      // MIGHT HAVE TO TAKE INTO CONSIDERATION THE 12AM AND 12 PM\n      return final_time\n    }\n\n\n  }\n\n  // So you pass the intial values into your form but you will have to pass\n  // it as a dictioanry with each one being a key corresponding with each input\n  getInitialValue = () => {\n    // This will pass an initial value through the Field\n    // Since we are not doing editing event anymore, there is only a couple fields\n    // that will need filling up, just the time, and date. So no need for the other\n    // fields to be filled out\n    console.log(this.props)\n    // There is an issue with the utc_start and utc_end and start_time and end time\n    const date_start = new Date(this.props.start_date)\n    const utc_start = dateFns.addHours(date_start, date_start.getTimezoneOffset()/60)\n    const date_end = new Date(this.props.end_date)\n    const utc_end = dateFns.addHours(date_end, date_end.getTimezoneOffset()/60)\n    const start_time = this.timeConvertFunction(this.props.start_time)\n    const end_time  = this.timeConvertFunction(this.props.end_time)\n\n    return{\n\n      dateRange: [moment(this.props.start_date, 'YYYY-MM-DD'), moment(this.props.end_date, 'YYYY-MM-DD')],\n      startDate: moment(this.props.start_date, 'YYYY-MM-DD'),\n      endDate: moment(this.props.end_date, 'YYYY-MM-DD'),\n      startTime: start_time,\n      endTime: end_time,\n      content: this.props.content,\n      location: this.props.location,\n      eventColor: this.props.eventColor,\n      repeatCondition: 'none',\n      friends: [],\n\n\n    }\n\n  }\n\n\n  render () {\n    console.log(this.props)\n    return (\n      <div>\n        <ReduxEditEventForm\n        {...this.props}\n        onSubmit = {this.submit}\n        initialValues = {this.getInitialValue()}\n        onDelete = {this.delete}\n        friendList = {this.props.friendList}\n        following = {this.props.following}\n        followers = {this.props.followers}\n        />\n\n\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    title: state.calendarEvent.title,\n    content: state.calendarEvent.content,\n    start_date: state.calendarEvent.start_date,\n    end_date: state.calendarEvent.end_date,\n    start_time: state.calendarEvent.start_time,\n    end_time: state.calendarEvent.end_time,\n    location: state.calendarEvent.location,\n    eventColor: state.calendarEvent.eventColor,\n    calendarId: state.calendarEvent.calendarId,\n    id: state.auth.id,\n    username: state.auth.username,\n    friendList: state.auth.friends,\n    following: state.auth.following,\n    followers: state.auth.followers,\n    profilePic: state.auth.profilePic,\n    firstName: state.auth.firstName,\n    lastName: state.auth.lastName\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addEvents: (events) => dispatch(calendarActions.addEvent(events)),\n    closePopup: () => dispatch(navActions.closePopup()),\n    changeEvent: (e) => dispatch(calendarEventActions.changeCalendarEvent(e)),\n    getEvents: () => dispatch(calendarActions.getUserEvents()),\n    editEvent: (instanceEvent) => dispatch(calendarActions.editEvents(instanceEvent)),\n    deleteEvent: (eventId) => dispatch(calendarActions.deleteEvents(eventId))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditEventPopUp);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/AddCalEventForms/EventModal.js",["1345","1346","1347","1348","1349","1350","1351","1352","1353","1354","1355","1356","1357","1358","1359"],"import React, { Component } from 'react';\nimport * as dateFns from 'date-fns';\nimport moment from 'moment';\nimport { connect } from \"react-redux\";\nimport { authAxios } from '../../../components/util';\nimport { Drawer, List, Avatar, Divider, Col, Row, Modal, Button } from 'antd';\nimport * as calendarActions from '../../../store/actions/calendars'\nimport * as navActions from '../../../store/actions/nav';\nimport ReduxAddEventForm from './ReduxAddEventForm';\nimport ReactAddEventForm from './ReactAddEventForm';\nimport CalendarEventWebSocketInstance from '../../../calendarEventWebsocket';\nimport CalendarForm from './CalendarForm'\n\n\n\nconst pStyle = {\n  fontSize: 16,\n  lineHeight: '24px',\n  display: 'block',\n  marginBottom: 16,\n};\n\nconst DescriptionItem = ({ title, content }) => (\n  <div\n    className=\"site-description-item-profile-wrapper\"\n    style={{\n      fontSize: 14,\n      lineHeight: '22px',\n      marginBottom: 7,\n    }}\n  >\n    <p\n      className=\"site-description-item-profile-p\"\n      style={{\n        marginRight: 8,\n        display: 'inline-block',\n      }}\n    >\n      {title}:\n    </p>\n    {content}\n  </div>\n);\n\n\n\nclass EventModal extends React.Component {\n\n  timeConvert = (time) => {\n    // This function will take in a time and then covert the time to\n    // a 1-24 hour hour so that it cna be used to add into the\n    // date and be submited\n    let hour = parseInt(time.substring(0,2))\n    let minutes = parseInt(time.substring(3,5))\n    let ampm = time.substring(5,8)\n\n    let convertedTime = ''\n\n    if (time.includes('PM')){\n      if (hour !==  12){\n        hour = hour + 12\n      }\n    } else if (time.includes('AM')){\n      if(hour === 12){\n        hour = 0\n      }\n    }\n\n    const timeBundle = {\n      firstHour: hour,\n      firstMin: minutes\n    }\n\n    return timeBundle\n\n  }\n\n  submit = (values) => {\n    // REMEMBER THAT WHEN EVER YOU ARE MAKING AN EVENT, THE HOST ALWAYS AND I MEAN\n    //  ALWAYS HAS TO BE ADDED TO THE ACCEPTED LIST\n\n    console.log(values)\n    // const start_date = dateFns.format(new Date(moment(values.start_time)), 'yyyy-MM-dd HH:mm')\n    // const end_date = dateFns.format(new Date(moment(values.end_time)), 'yyyy-MM-dd HH:mm')\n    let start_date = dateFns.startOfDay(new Date(values.start_date))\n    let end_date = dateFns.startOfDay(new Date(values.end_date))\n\n    const start_time  = this.timeConvert(values.start_time)\n    const end_time = this.timeConvert(values.end_time)\n    // So the start time and end time are dicitonaries that hold\n    // the hours and minutes fo teh time so in order to retrived them\n    // you have to call firstHour for hour and firstMin for minutes\n\n    start_date = dateFns.addHours(start_date, start_time.firstHour)\n    start_date = dateFns.addMinutes(start_date, start_time.firstMin)\n\n    end_date = dateFns.addHours(end_date, end_time.firstHour)\n    end_date = dateFns.addMinutes(end_date, end_time.firstMin)\n\n\n    const temp_start_date = dateFns.format(start_date, 'yyyy-MM-dd HH:mm:ss')\n    const temp_end_date = dateFns.format(end_date, 'yyyy-MM-dd HH:mm:ss')\n    console.log(start_date, end_date)\n    console.log(temp_start_date, temp_end_date)\n    // This will add information in to the backend but it doesnt change the props so you\n    // have to find some way to change the props so this thing pops up\n    if (values.person.length === 0){\n      authAxios.post('http://127.0.0.1:8000/mycalendar/events/create/',{\n        title: values.title,\n        content: values.content,\n        start_time: start_date,\n        end_time: end_date,\n        location: values.location,\n        color: values.event_color,\n        person: [this.props.id],\n        repeatCondition: values.repeatCondition,\n        host: this.props.id,\n        accepted: [this.props.id]\n      })\n\n      // The event instance is pretty much used when you just recently added an\n      // event, so because of that you want to add the date in just as how the\n      // date and event will be added according to the loaded event\n\n      const curUserObj = {\n        first_name: this.props.firstName,\n        id: this.props.id,\n        last_name: this.props.lastName,\n        profile_picture: this.props.profilePic,\n        username: this.props.username\n      }\n\n      const instanceEvent = {\n        title: values.title,\n        content: values.content,\n        start_time: temp_start_date,\n        end_time: temp_end_date,\n        location: values.location,\n        color: values.event_color,\n        person: [curUserObj],\n        invited: [],\n        repeatCondition: values.repeatCondition,\n        host: curUserObj,\n        accepted: [this.props.id],\n        decline: []\n\n\n      }\n      // add color to addEvents in redux\n      this.props.addEvents(instanceEvent)\n    } else {\n      const inviteList = values.person.slice()\n      let shareList = values.person\n      shareList.push(this.props.username)\n      const createSharedEventObject = {\n        command: 'add_shared_event',\n        title: values.title,\n        content: values.content,\n        startDate: start_date,\n        endDate: end_date,\n        location: values.location,\n        eventColor: values.event_color,\n        person: shareList,\n        invited: inviteList,\n        repeatCondition: values.repeatCondition,\n        host: this.props.id,\n      }\n      CalendarEventWebSocketInstance.sendEvent(createSharedEventObject);\n\n\n    }\n\n\n\n    this.props.closePopup()\n  }\n\n\n\n  // closable={this.props.closable}\n  render() {\n    console.log(this.props)\n    return (\n      <div>\n        <Modal\n          onCancel={this.props.onClose}\n          visible={this.props.visible}\n          footer = {false}\n          width  = {600}\n        >\n        <ReactAddEventForm\n        friendList = {this.props.friendList}\n        onSubmit = {this.submit}\n        following = {this.props.following}\n        followers = {this.props.followers}\n        />\n        </Modal>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    friendList: state.auth.friends,\n    following: state.auth.following,\n    followers: state.auth.followers,\n    username: state.auth.username,\n    id: state.auth.id,\n\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addEvents: (events) => dispatch(calendarActions.addEvent(events)),\n    closePopup: () => dispatch(navActions.closePopup())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EventModal);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/FriendsProfileCard.js",["1360","1361"],"import React from \"react\";\nimport { Card } from 'antd';\nimport {Button} from 'antd';\nimport { authAxios } from '../components/util';\n\nconst { Meta } = Card;\n\nclass FriendProfileCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: true};\n  }\n\n  onClickSend = (e) => {\n    // const username = this.props.data.username;\n    // console.log(this.props)\n    // authAxios.post('http://127.0.0.1:8000/userprofile/friend-request/send/'+username)\n    // this.setState({value: e.target.value});\n    }\n  // let temp=\"http://127.0.0.1:8000\"+props.data.image;\n  // this is a card that displays the profile picture and user name\n  render() {\n    console.log(this.props)\n    return (\n\n    <Card\n    hoverable\n    style={{ width: 240 }}\n    cover={<img alt=\"example\" src=\"https://os.alipayobjects.com/rmsportal/QBnOOoLaAfKPirc.png\" />}\n    >\n      <a href={'/userview/'+this.props.data}>{this.props.data}</a>\n      <Button type=\"primary\" onClick ={this.onClickSend} disabled={!this.state.value}>E Sync </Button>\n    </Card>\n\n\n    );\n\n  }\n}\n\nexport default FriendProfileCard;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NewsfeedItems/NewsFeedPost.js",["1362","1363","1364","1365","1366","1367","1368","1369","1370","1371","1372","1373","1374","1375","1376","1377","1378","1379","1380","1381","1382","1383","1384","1385","1386","1387","1388","1389","1390","1391","1392","1393","1394","1395","1396","1397","1398","1399","1400","1401","1402","1403","1404","1405","1406","1407","1408","1409","1410","1411","1412","1413","1414","1415"],"import React from \"react\";\nimport \"./NewsfeedPost.css\";\nimport Comments from '../../containers/comments/comments.js';\nimport PreviewComments from '../../containers/comments/PreviewComments.js';\nimport { authAxios } from '../../components/util';\nimport {Avatar,\n   Icon,\n   Message,\n   Menu,\n   Dropdown,\n   Tooltip,\n   Row,\n   Skeleton,\n   Switch,\n   Card,Divider,\n   Comment,\n   Button,\n   List,\n   Input,\n   Popover,\n   message,\n   Space,\n   Form,\n   Modal,\n   notification\n } from 'antd';\nimport { EditOutlined, EllipsisOutlined, AntDesignOutlined, ExclamationCircleOutlined, SettingOutlined, SearchOutlined,UserOutlined, ArrowRightOutlined, FolderAddTwoTone, ShareAltOutlined, HeartTwoTone, EditTwoTone} from '@ant-design/icons';\nimport WebSocketPostsInstance from  '../../postWebsocket';\nimport NotificationWebSocketInstance from  '../../notificationWebsocket';\nimport { connect } from 'react-redux';\nimport heart  from './heart.svg';\nimport { commentPic } from './comment.svg';\nimport 'antd/dist/antd.css';\nimport QueueAnim from 'rc-queue-anim';\nimport defaultPic from '../../components/images/default.png'\nimport Liking from './Liking';\nimport LikeList from './LikeList';\nimport PostPicCarousel from '../../components/PostPageFolder/PostPicCarousel';\nimport * as dateFns from 'date-fns';\n\n\nclass NewsfeedPost extends React.Component {\n  constructor(props){\n    super(props);\n    // this.initialisePost()\n\n    this.state = {\n      visibleModal: false,\n      commentPost:'',\n      commentsCondition:true,\n      show:false,\n      stepCount:0,\n      avatarColor:'',\n      testLike: false,\n\n      // The cur pic index will be used for the clipping\n      curPicIndex: 0,\n    }\n  }\n\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n\n  // initialisePost(){\n  //   this.waitForSocketConnection(() =>{\n  //     WebSocketPostsInstance.fetchLikes(this.props.data.id)\n  //     WebSocketPostsInstance.fetchComments(this.props.data.id)\n  //   })\n  // }\n\n\n  componentDidMount() {\n    // WebSocketPostsInstance.connect()\n  }\n\n  // waitForSocketConnection(callback){\n  //   const component = this\n  //   setTimeout(\n  //     function(){\n  //       if(WebSocketPostsInstance.state() ===1){\n  //         callback();\n  //         return;\n  //       } else {\n  //         component.waitForSocketConnection(callback);\n  //       }\n  //     }, 100)\n  // }\n\n  deletePost = () => {\n\n    // console.log(this.props.data.id)\n    // authAxios.delete('http://127.0.0.1:8000/userprofile/post/delete/'+this.props.data.id);\n    // message.success('Post deleted successfully!');\n    Modal.confirm({\n    title: 'Confirm',\n    icon: <ExclamationCircleOutlined />,\n    content: 'Are you sure you want to delete this post?',\n    okText: 'OK',\n    cancelText: 'Cancel',\n    okButtonProps: { type: 'danger', onClick:this.DestroyPost},\n  });\n    // WebSocketPostsInstance.deletePost(this.props.data.id)\n\t  // need to delete post\n    // document.location.href = '/';\n\t}\n\n  DestroyPost= () => {\n    WebSocketPostsInstance.deletePost(this.props.data.id)\n    Modal.destroyAll();\n    window.location.reload();\n  }\n\n\n   ShowNextSteps = () => {\n    if(this.state.stepCount==1){\n      return <h1>show step 1</h1>;\n    }\n    else if(this.state.stepCount==2){\n      return <h1>show step 2</h1>;\n    }\n    else{\n      return <h1> show last step </h1>\n    }\n\n  }\n\n  revealPhoto = () => {\n      let userPostImages = []\n      if(this.props.data){\n        if(this.props.data.post_images){\n          userPostImages = this.props.data.post_images\n        }\n      }\n\n      if(userPostImages.length==1){\n        return(\n        <div class=\"imageContainer\">\n          <a href=\"\"><img src={\"http://127.0.0.1:8000/media/\"+userPostImages[0]} alt=\"\" /></a>\n        </div>\n          )\n        }\n        else if(userPostImages.length==2){\n          return(\n            <div className = \"postPicCarouselNews\">\n               <PostPicCarousel\n               picIndexChange = {this.onCurPhotoChange}\n               items = {userPostImages} />\n            </div>\n          )\n\n        }\n\n }\n\n randomAvatarColor = () => {\n\n   this.setState({\n     avatarColor:'#ff0000',\n   });\n };\n\n  showModal = () => {\n    this.setState({\n      visibleModal: true,\n    });\n  };\n\n  changeLikeListCondition = () => {\n    this.setState({\n      testLike: true,\n    });\n\n  }\n\n  onClick = () => {\n    this.setState({\n      show: !this.state.show,\n      stepCount:this.state.stepCount+1,\n    });\n  }\n\n  triggerComments = () => {\n    this.setState({\n      commentsCondition: !this.state.commentsCondition,\n    });\n  };\n\n  handleOk = e => {\n    console.log(e);\n    this.setState({\n      visibleModal: false,\n      testLike:false,\n    });\n  };\n\n  handleCancel = e => {\n    console.log(e);\n    this.setState({\n      visibleModal: false,\n      testLike:false,\n    });\n  };\n\n  OnClickPost=(postId, username)=> {\n    // This is used to open up the post modal\n\n    this.props.history.push(\"/post/\"+username+'/'+postId)\n  }\n\n\n  handleCommentChange = e => {\n    this.setState({\n      commentPost: e.target.value,\n    });\n  };\n\n  onProfileClick = (username) => {\n    if (username === this.props.currentUser){\n      window.location.href = 'current-user/'\n    } else {\n      window.location.href = 'explore/'+username\n    }\n  }\n\n  renderTimestamp = timestamp =>{\n    console.log(timestamp)\n    let prefix = '';\n    const timeDiff = Math.round((new Date().getTime() - new Date(timestamp).getTime())/60000)\n    console.log(timeDiff)\n    if (timeDiff < 1 ) {\n      prefix = `Just now`;\n    } else if (timeDiff < 60 && timeDiff >= 1 ) {\n      prefix = `${timeDiff} minutes ago`;\n    }else if (timeDiff < 24*60 && timeDiff > 60) {\n      prefix = `${Math.round(timeDiff/60)} hours ago`;\n    } else if (timeDiff < 31*24*60 && timeDiff > 24*60) {\n      prefix = `${Math.round(timeDiff/(60*24))} days ago`;\n    } else {\n        prefix = `${new Date(timestamp)}`;\n    }\n\n    return prefix;\n  }\n\n  onClipPhoto = () => {\n    // This function will be in charge of clipping the current photo and caption\n    // into your social calendar in the social day. It will look like a polaroid\n\n    // So you will need the current picture that shows up on the newsfeed,\n    // to add in (it will probally be one photo)\n    // Then you will put the caption on the polaroid (maybe not the caption)\n    // but the post owner has to be a must\n\n    let curPic = \"\"\n    let postOwnerId = \"\"\n    let curId = \"\"\n    const picIndex = this.state.curPicIndex\n    if(this.props.data){\n      if(this.props.data.post_images){\n        curPic = this.props.data.post_images[picIndex]\n      }\n      if(this.props.data.user){\n        postOwnerId = this.props.data.user.id\n      }\n    }\n    if(this.props.userId){\n      curId = this.props.userId\n    }\n\n    // Now you would add the auth axios call. You do not need to do a websocket\n    // because we are in a seperate page. You might need websocket for notification\n    // but that pretty much it\n\n    console.log(curPic, postOwnerId)\n    authAxios.post(\"http://127.0.0.1:8000/mySocialCal/pictureClipping\", {\n      clipPic: curPic,\n      postOwnerId: postOwnerId,\n      curId: curId\n    })\n\n    this.openNotification(\"bottomRight\")\n\n\n\n  }\n\n  openNotification = placement => {\n\n  const today = dateFns.format(new Date(), 'MMM dd, yyyy')\n\n  notification.info({\n    message: `Photo Clipped!`,\n    description:\n      'A photo has been clipped to your calendar on '+today+'.',\n    placement,\n  });\n  };\n\n\n  onCurPhotoChange = (picIndex) => {\n    // This function will be an on change for the current picture that is shown\n    // on the profile picture\n    this.setState({\n      curPicIndex: picIndex\n    })\n  }\n\n\n  handleSubmit = () => {\n    WebSocketPostsInstance.sendComment(\n      this.props.userId,\n      this.props.data.id,\n      this.state.commentPost\n    )\n    console.log(this.props.userId)\n    console.log(this.props.data.user.id)\n\n    if(this.props.userId !== this.props.data.user.id){\n      const notificationObject = {\n        command: 'comment_notification',\n        actor: this.props.userId,\n        recipient: this.props.data.user.id,\n        postId: this.props.data.id\n      }\n\n      NotificationWebSocketInstance.sendNotification(notificationObject)\n    }\n\n  }\n\n  BottomLikeCommentPost(){\n    let like_people = this.props.data.people_like\n    let profilePic = ''\n    let peopleLikeId = []\n    let postId = 0\n    let userUsername = ''\n\n    if (this.props.data.user.profile_picture){\n      profilePic = 'http://127.0.0.1:8000'+this.props.data.user.profile_picture\n    }\n    if(this.props.data.id){\n      postId = this.props.data.id\n    }\n    if(this.props.data.user){\n      userUsername = this.props.data.user.username\n    }\n\n\n    let temp=\"http://127.0.0.1:8000\"+this.props.data.post_images;\n    let viewPersonPage=\"http://localhost:3000/explore/\"+this.props.data.user.username;\n\n    const success = () => {\n      message.success('Clipped to your album!');\n    };\n    if(like_people.length > 0){\n      for(let i = 0; i< like_people.length; i++){\n        peopleLikeId.push(like_people[i].id)\n      }\n    }\n\n    return (\n      <div style={{marginLeft:'15px', fontSize:'14px'}}>\n        <div class='outerContainerPeople'>\n          <div class=\"innerContainerLike\">\n              <div>\n                {\n                  (peopleLikeId.includes(this.props.userId))?\n                  <i class=\"fab fa-gratipay\" style={{marginRight:'5px', color:'red'}}></i>\n                  :\n                  <i class=\"fab fa-gratipay\" style={{marginRight:'5px'}}></i>\n                }\n                <span class=\"LikeCommentHover\" onClick={this.changeLikeListCondition}>\n                <span class=\"boldLikeComment\">{like_people.length} likes</span>\n                </span>\n                 <Divider type=\"vertical\" style={{background:'#d9d9d9'}}/>\n                 <span class=\"LikeCommentHover\" onClick={() => this.OnClickPost(postId, userUsername)} style={{marginTop:'-20px'}}>\n                   <span class=\"boldLikeComment\">\n                     {this.props.data.post_comments.length} Comments\n                   </span>\n                 </span>\n                 <div class='commentInPost'>\n                       <Liking\n                        num={5}\n                        history  = {this.props.history}\n                        like_people={this.props.data.people_like} {...this.props}/>\n                </div>\n              </div>\n           </div>\n        </div>\n\n        <p style={{ fontSize: '14px', color:'black'}}>\n                  {\n\n                     ((this.props.data.caption).length>140)?\n                     <div class=\"photoText\">\n\n                         <span>\n\n                          {this.props.data.caption.substring(0,140)}\n                         </span>\n\n                         <span class=\"grayout outerSeeMore\"> {this.props.data.caption.substring(140,175)}</span>\n                         <div\n                           style={{marginLeft: '10px', marginTop:'10px'}}\n                           class=\"seeMore outerSeeMore\"\n                           onClick={() => this.OnClickPost(postId, userUsername)}\n                           >\n                            ... see more\n                         </div>\n\n                      </div>\n                     :\n                     <div style={{display:'flex'}}>\n                       <div class=\"photoText\">\n                           <span>\n                            {this.props.data.caption}\n                           </span>\n                        </div>\n                      </div>\n                   }\n          </p>\n\n\n        <div>\n          <div class=\"box-buttons\">\n            <div class=\"row\">\n              {\n                (peopleLikeId.includes(this.props.userId))?\n\n                  <button\n                    class=\"box-click\"\n                    onClick ={this.AddOneToLike}>\n                    <i\n                      style={{ marginRight:'10px', color:'red'}}\n                      class=\"fa fa-heart\">\n                    </i>\n                    <span class=\"textHighlight\">\n                      Like\n                    </span>\n                  </button>\n                :\n                  <button\n                    class=\"box-click\"\n                    onClick ={this.AddOneToLike} >\n                    <i\n                      style={{ marginRight:'10px'}}\n                      class=\"far fa-heart\">\n                    </i>\n                    <span>\n                      Like\n                    </span>\n                  </button>\n              }\n              <button onClick ={() => this.OnClickPost(postId, userUsername)} >\n\n                <i style={{ marginRight:'10px'}} class=\"far fa-comments fa-lg\"></i> Comment\n              </button>\n              <button\n              onClick = {() => this.onClipPhoto()}\n              >\n              <span\n              style={{ marginRight:'10px'}}\n              class=\"fa fa-archive\"></span> Clip </button>\n            </div>\n          </div>\n          {\n            (this.state.commentsCondition==true) ?\n            <div>\n               <div>{this.props.data.post_comments.length!=0 ?\n                 <PreviewComments className=\"fontTest\" newsfeed={this.props} />\n                 :\n                 ''}\n              </div>\n            </div>\n\n\n\n            :\n\n            <div>\n\n            </div>\n\n          }\n          </div>\n      </div>\n\n    )\n  }\n\n  ContentOfEvent() {\n\n    let profilePic = ''\n\n\n    if (this.props.data.user.profile_picture){\n      profilePic = 'http://127.0.0.1:8000'+this.props.data.user.profile_picture\n    }\n\n    return(\n\n      <div class=\"card\" style={{marginLeft:10, marginRight:10, minHeight:10, marginBottom:40}}>\n\n      <div style={{padding:20,}}>\n      <Popover\n         style={{width:'200px'}}\n         content={<div>\n           <Avatar\n            shape=\"square\"\n            size=\"large\"\n            src=\"https://images.unsplash.com/photo-1544723795-3fb6469f5b39?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=635&q=80\"\n            />\n           <div> 110 followers </div>\n         </div>}\n\n        >\n        {\n          profilePic != '' ?\n          <Avatar\n          onClick = {() => this.onProfileClick(this.props.data.user.username)}\n\n          style = {{\n            cursor: 'pointer',\n          }}\n          src={profilePic} alt=\"avatar\" />\n\n          :\n\n          <Avatar\n          onClick = {() => this.onProfileClick(this.props.data.user.username)}\n          size=\"large\"\n          style = {{\n            cursor: 'pointer',\n          }}\n          src={defaultPic} alt=\"avatar\" />\n\n        }\n        </Popover>\n           <span class=\"personName\"  onClick = {() => this.onProfileClick(this.props.data.user.username)}>\n             {this.capitalize(this.props.data.user.username)}\n             <div>\n             <span class=\"fb-group-date alignleft\" > Tucson, Arizona</span>\n             <span class=\"fb-group-date alignright\" > {this.renderTimestamp(this.props.data.created_at)}</span>\n            </div>\n        </span>\n\n\n\n\n      </div>\n\n      <Divider/>\n\n      <div style={{marginLeft:'20px',fontSize: '30px', color:'black'}}>\n      8/17 Thursday 3PM\n      </div>\n      <i  style={{marginLeft:'20px',fontSize: '20px', color:'#13c2c2'}} class=\"fa fa-users\" aria-hidden=\"true\"></i>\n\n\n\n      </div>\n    )\n\n  }\n\n  ContentOfPic() {\n    let like_people = this.props.data.people_like\n    let profilePic = ''\n\n    if (this.props.data.user.profile_picture){\n      profilePic = 'http://127.0.0.1:8000'+this.props.data.user.profile_picture\n    }\n\n\n    let temp=\"http://127.0.0.1:8000\"+this.props.data.post_images;\n    let viewPersonPage=\"http://localhost:3000/explore/\"+this.props.data.user.username;\n\n    const success = () => {\n    message.success('Clipped to your album!');\n    };\n\n    return(\n    <div>\n\n      <div>\n\n\n      <div class=\"card\" style={{marginLeft:5, marginRight:10, minHeight:10}}>\n\n      <span class=\"profilePicHeader\">\n        <span class=\"headerContainer\" >\n\n            <span class=\"g grid-13\">\n              <Popover\n                 style={{width:'200px'}}\n                 content={<div>\n                   <Avatar\n                    shape=\"square\"\n                    size=\"large\"\n                    src=\"https://images.unsplash.com/photo-1544723795-3fb6469f5b39?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=635&q=80\"\n                    />\n                   <div> 110 followers </div>\n                 </div>}\n\n                >\n                  {\n                    profilePic != '' ?\n                    <Avatar\n                    size=\"large\"\n                    onClick = {() => this.onProfileClick(this.props.data.user.username)}\n                    size=\"large\"\n                    style = {{\n                      cursor: 'pointer',\n                    }}\n                    src={profilePic} alt=\"avatar\" />\n\n                    :\n\n                    <Avatar\n                    onClick = {() => this.onProfileClick(this.props.data.user.username)}\n                    size=\"large\"\n                    style = {{\n                      cursor: 'pointer',\n                    }}\n                    src={defaultPic} alt=\"avatar\" />\n\n                  }\n\n\n                </Popover>\n\n            </span>\n              <span class=\"g grid-33\">\n\n                <span class=\"headerPost\">\n\n                  <span\n                    style={{color:'black', fontSize:'15px', marginLeft:'-5px'}}\n                    class=\"headerPostText alignleft\" >\n                      {this.props.data.user.first_name}{' '}{this.props.data.user.last_name} <br/>\n                  <span>\n                  <span\n                    style={{fontSize:'13px'}}\n                    class=\"headerPostText LikeCommentHover\">\n                    @{this.props.data.user.username}\n                  </span>\n                </span>\n                    </span>\n\n                      <span class=\"headerPostText alignright\" style={{fontSize:'13px'}} >\n\n\n\n                        <i style={{marginRight:'10px'}} class=\"fas fa-map-marker-alt\"></i>\n                        Tucson, Arizona <br/>\n\n                        <span style={{float:'right'}}>\n                        {this.renderTimestamp(this.props.data.created_at)}\n                        </span>\n                  </span>\n\n                </span>\n\n              </span>\n\n\n\n          </span>\n\n          <span class=\"optionPostHeader\">\n            <Dropdown overlay={\n              <Menu>\n                <Menu.Item>\n                  <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                    <i style={{marginLeft:'1px',marginRight:'4px' }} class=\"far fa-bookmark\"></i>\n                    <span style={{marginLeft:'3px'}}> Save this post</span>\n                  </a>\n                </Menu.Item>\n                <Menu.Item>\n                  <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                    <i class=\"far fa-eye-slash\"></i>\n                    <span style={{marginLeft:'5px'}}>Hide this post</span>\n                  </a>\n                </Menu.Item>\n                <Menu.Item danger onClick={this.deletePost}>\n                  <i style={{marginRight:'45px' }} class=\"fas fa-trash\" style={{color:\"#ff4d4f\"}}></i>\n                  <span style={{marginLeft:'10px'}}>Delete post</span>\n                </Menu.Item>\n              </Menu>\n            }>\n              <a className=\"ant-dropdown-link\" onClick={e => e.preventDefault()}>\n              <i class=\"fas fa-ellipsis-v\" style={{fontSize:'20px', padding:'5px'}}></i>\n              </a>\n            </Dropdown>\n\n\n            </span>\n\n        </span>\n\n\n\n\n\n\n        <div>\n    <div>\n\n    <Divider style={{'marginTop':'-5px', marginBottom:'-0.5px'}}/>\n\n\n\n\n      {this.revealPhoto()}\n\n      </div>\n\n      <Divider style={{'marginTop':'-5px', marginBottom:'-0.5px'}}/>\n      {this.BottomLikeCommentPost()}\n\n        </div>\n      </div>\n    </div>\n  </div>\n    )\n  }\n\n  // this renders the posts on the newsfeed\n\n  ContentOfPost(){\n    console.log(this.props.data)\n    let like_people = this.props.data.people_like\n    let profilePic = ''\n\n    if (this.props.data.user.profile_picture){\n      console.log(this.props.data.user.profile_picture)\n      profilePic = 'http://127.0.0.1:8000'+this.props.data.user.profile_picture\n    }\n\n\n\n    return(\n      // if you want anywhere in the post to click on and open modal put OnClickPost in this div\n    <div>\n\n\n    <div class=\"card\" style={{marginLeft:5, marginRight:10, minHeight:10, marginLeft:'-5px'}}>\n\n      <span class=\"profilePicHeader\">\n        <span class=\"headerContainer\" >\n\n            <span class=\"g grid-13\">\n              <Popover\n                 style={{width:'200px'}}\n                 content={<div>\n                   <Avatar\n                    shape=\"square\"\n                    size=\"large\"\n                    src=\"https://images.unsplash.com/photo-1544723795-3fb6469f5b39?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=635&q=80\"\n                    />\n                   <div> 110 followers </div>\n                 </div>}\n\n                >\n                  {\n                    profilePic != '' ?\n                    <Avatar\n                    size=\"large\"\n                    onClick = {() => this.onProfileClick(this.props.data.user.username)}\n                    size=\"large\"\n                    style = {{\n                      cursor: 'pointer',\n                    }}\n                    src={profilePic} alt=\"avatar\" />\n\n                    :\n\n                    <Avatar\n                    onClick = {() => this.onProfileClick(this.props.data.user.username)}\n                    size=\"large\"\n                    style = {{\n                      cursor: 'pointer',\n                    }}\n                    src={defaultPic} alt=\"avatar\" />\n\n                  }\n\n\n                </Popover>\n\n            </span>\n              <span class=\"g grid-33\">\n\n                <span class=\"headerPost\">\n\n                  <span\n                    style={{color:'black', fontSize:'15px'}}\n                    class=\"headerPostText alignleft\" >\n                    {this.props.data.user.first_name}{' '}{this.props.data.user.last_name} <br/>\n                  <span>\n                  <span\n                    style={{fontSize:'13px'}}\n                    class=\"headerPostText LikeCommentHover\">\n                    @{this.props.data.user.username}\n                  </span>\n                </span>\n                    </span>\n\n                      <span class=\"headerPostText alignright\" style={{fontSize:'13px'}} >\n\n\n\n                        <i style={{marginRight:'10px'}} class=\"fas fa-map-marker-alt\"></i>\n                        Tucson, Arizona <br/>\n\n                        <span style={{float:'right'}}>\n                        {this.renderTimestamp(this.props.data.created_at)}\n                        </span>\n                  </span>\n\n                </span>\n\n              </span>\n\n\n\n        </span>\n          <span class=\"optionPostHeader\">\n            <Dropdown overlay={\n              <Menu>\n                <Menu.Item>\n                  <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                    <i style={{marginRight:'0px' }} class=\"far fa-bookmark\"></i>\n                    Save this post\n                  </a>\n                </Menu.Item>\n                <Menu.Item>\n                  <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                    <i style={{marginRight:'0px'}} class=\"far fa-eye-slash\"></i>\n                    Hide this post\n                  </a>\n                </Menu.Item>\n                <Menu.Item danger onClick={this.deletePost}>\n                  <i style={{marginRight:'25px' }} class=\"fas fa-trash\" style={{color:\"#ff4d4f\"}}></i>\n                  Delete post\n                </Menu.Item>\n              </Menu>\n            }>\n              <a className=\"ant-dropdown-link\" onClick={e => e.preventDefault()}>\n              <i class=\"fas fa-ellipsis-v\" style={{fontSize:'20px', padding:'5px'}}></i>\n              </a>\n            </Dropdown>\n\n\n          </span>\n\n      </span>\n\n\n\n\n\n      <Divider style={{'marginTop':-2}}/>\n\n      <Divider style={{ marginBottom: 1 }}/>\n\n      {this.BottomLikeCommentPost()}\n\n      <div>\n      </div>\n      </div>\n      </div>\n    )\n  }\n\n\n  ContentofComments(){\n\n    let profilePic = ''\n\n    if (this.props.currentProfilePic){\n      profilePic = 'http://127.0.0.1:8000'+this.props.currentProfilePic\n    }\n\n    return(\n\n    <div>\n      {\n\n\n        (this.props.data.post_comments.length==0) ?\n\n        <div>\n\n          <Comment\n          style={{ width: 600 }}\n          required={true}\n           avatar={\n             profilePic != '' ?\n             <Avatar\n             onClick = {() => this.onProfileClick(this.props.currentUser)}\n             size=\"large\"\n             style = {{\n               cursor: 'pointer',\n             }}\n             src={profilePic} alt=\"avatar\" />\n\n             :\n\n             <Avatar\n             onClick = {() => this.onProfileClick(this.props.data.user.username)}\n             size=\"large\"\n             style = {{\n               cursor: 'pointer',\n             }}\n             src={defaultPic} alt=\"avatar\" />\n           }\n           content={\n            <div>\n            <Form>\n             <Form.Item name=\"note\"  rules={[{ required: true }]}  >\n               <Input\n               placeholder=\"Write a comment\"\n                rows={4}\n                onChange={this.handleCommentChange}\n               />\n               <Button type=\"primary\"  onClick={this.handleSubmit}>\n                 Add Comment\n               </Button>\n             </Form.Item>\n\n             </Form>\n\n            </div>\n          }\n\n         />\n\n        </div>\n        :\n\n        <div>\n\n        <Comments className=\"fontTest\" newsfeed={this.props}/>\n        <Form.Item>\n          <Input\n          placeholder=\"Write a comment\"\n           rows={4}\n           class=\"fontTest\"\n\n           onChange={this.handleCommentChange}\n          />\n          <Button type=\"primary\" onClick={this.handleSubmit}>\n            Add Comment\n          </Button>\n\n        </Form.Item>\n\n\n        </div>\n\n\n\n      }\n\n    </div>\n\n    )\n\n  }\n\n\n\n\n\n  AddOneToLike = (e) => {\n    e.stopPropagation();\n    this.triggerComments();\n    let peopleLikeId = []\n\n    const like_people = this.props.data.people_like\n\n    if(like_people.length > 0){\n      for(let i = 0; i< like_people.length; i++){\n        peopleLikeId.push(like_people[i].id)\n      }\n    }\n    if ( peopleLikeId.includes(this.props.userId)){\n      console.log('unlike')\n      WebSocketPostsInstance.unSendOneLike(this.props.userId, this.props.data.id)\n    } else {\n      // This websocket call will add one like to the post, but since only one user from\n      // one end can like that post so we only need the current user\n      const notificationObject = {\n        command: 'like_notification',\n        actor: this.props.userId,\n        recipient: this.props.data.user.id,\n        postId: this.props.data.id\n      }\n\n      console.log('like')\n      WebSocketPostsInstance.sendOneLike(this.props.userId, this.props.data.id)\n      if (this.props.userId !== this.props.data.user.id){\n        console.log('like notification')\n        NotificationWebSocketInstance.sendNotification(notificationObject)\n      }\n      // NotificationWebSocketInstance.sendNotification()\n    }\n\n\n    // authAxios.post('http://127.0.0.1:8000/userprofile/add-like/'+this.props.data.id+'/')\n\n\n    }\n\n    render() {\n      console.log(this.props)\n      console.log(this.state)\n      let temp=\"http://127.0.0.1:8000\"+this.props.data.post_images;\n      const success = () => {\n        message.success('Clipped to your album!');\n      };\n      const { TextArea } = Input;\n\n\n      return (\n      <div>\n        <div>\n\n\n        <Modal\n          class=\"modalOuterContainer\"\n          title={`Likes on Post`}\n          visible={this.state.testLike}\n          onOk={this.handleOk}\n          onCancel={this.handleCancel}\n          width=\"600px\"\n          height=\"1000px\"\n          style={{marginTop:'-50px'}}\n          >\n\n\n          <LikeList {...this.props}/>\n\n          </Modal>\n\n          <Modal\n            class=\"modalOuterContainer\"\n            title={`Post by ${this.props.data.user.username}`}\n            visible={this.state.visibleModal}\n            onOk={this.handleOk}\n            onCancel={this.handleCancel}\n            width=\"1600px\"\n            height=\"800px\"\n            style={{marginTop:'-50px'}}\n            >\n\n            <div class=\"modalInnerContainer\">\n\n            {\n                    this.props.data.post_images.length>0 ?\n\n            <p class=\"modalCardBorder modalInnerPicture\">{this.ContentOfPic()}</p>\n\n                    :\n\n            <p  class=\"modalCardBorder modalInnerPicture\"> {this.ContentOfPost()} </p>\n            }\n              <p  class=\"modalCardBorder\">{this.ContentofComments()}</p>\n            </div>\n          </Modal>\n\n        </div>\n\n        {\n              this.props.data.post_images.length>0 ?\n              <p>{this.ContentOfPic()}</p>\n                      :\n              <p> {this.ContentOfPost()} </p>\n        }\n        </div>\n  );\n};\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    userId: state.auth.id,\n    currentUser: state.auth.username,\n    currentProfilePic: state.auth.profilePic\n  }\n}\n\n\nexport default connect(mapStateToProps)(NewsfeedPost);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/ChatComponents/Toppanel.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/ChatComponents/Sidepanel.js",["1416","1417","1418","1419","1420","1421","1422","1423","1424","1425","1426"],"import React ,{useState, useEffect } from 'react';\nimport Contact from './Contacts';\nimport { authAxios } from '../../components/util';\nimport { connect } from \"react-redux\";\nimport * as navActions from \"../../store/actions/nav\"\n\n\nclass Sidepanel extends React.Component{\n\n  openPopup() {\n    this.props.addChat()\n  }\n\n  render() {\n    console.log(this.props)\n    return (\n      <div id=\"sidepanel\">\n        <div id=\"profile\">\n          <div className=\"wrap\">\n            <img id=\"profile-img\" src=\"http://emilcarlsson.se/assets/mikeross.png\" className=\"online\" alt=\"\" />\n            <p>{this.props.username}</p>\n            <i className=\"fa fa-chevron-down expand-button\" aria-hidden=\"true\"></i>\n            <div id=\"status-options\">\n              <ul>\n                <li id=\"status-online\" className=\"active\"><span className=\"status-circle\"></span> <p>Online</p></li>\n                <li id=\"status-away\"><span className=\"status-circle\"></span> <p>Away</p></li>\n                <li id=\"status-busy\"><span className=\"status-circle\"></span> <p>Busy</p></li>\n                <li id=\"status-offline\"><span className=\"status-circle\"></span> <p>Offline</p></li>\n              </ul>\n            </div>\n            // <div id=\"expanded\">\n            //   <label htmlFor=\"twitter\"><i className=\"fa fa-facebook fa-fw\" aria-hidden=\"true\"></i></label>\n            //   <input name=\"twitter\" type=\"text\" value=\"mikeross\" />\n            //   <label htmlFor=\"twitter\"><i className=\"fa fa-twitter fa-fw\" aria-hidden=\"true\"></i></label>\n            //   <input name=\"twitter\" type=\"text\" value=\"ross81\" />\n            //   <label htmlFor=\"twitter\"><i className=\"fa fa-instagram fa-fw\" aria-hidden=\"true\"></i></label>\n            //   <input name=\"twitter\" type=\"text\" value=\"mike.ross\" />\n            // </div>\n          </div>\n        </div>\n        <div  id=\"search\">\n          <label htmlFor=\"\"><i className=\"fa fa-search\" aria-hidden=\"true\"></i></label>\n          <input type=\"text\" placeholder=\"Search contacts...\" />\n        </div>\n        <div id=\"contacts\">\n          <ul>\n          {this.props.chatList.map((j,index) => {\n            console.log(j)\n            return <Contact data = {j} key ={index} {...this.props} />\n          })}\n          </ul>\n        </div>\n        <div id=\"bottom-bar\" onClick = {()=> this.openPopup()}>\n          <button id=\"addcontact\">\n          <i className=\"fa fa-user-plus fa-fw\" aria-hidden=\"true\">\n          </i>\n          <span>Add chat</span>\n          </button>\n          <button id=\"settings\"><i className=\"fa fa-cog fa-fw\" aria-hidden=\"true\"></i> <span>Settings</span></button>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addChat: () => dispatch(navActions.openPopup())\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(Sidepanel);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/UserProfiles/UserProfileCard.js",["1427","1428","1429","1430","1431","1432","1433","1434"],"import React from \"react\";\nimport { Button, Card } from 'antd';\nimport { authAxios } from '../../components/util';\nimport { EnvironmentOutlined, MoreOutlined } from '@ant-design/icons';\nimport ava1 from '../images/avatar.jpg';\nimport ava2 from '../images/avatar2.jpg';\nimport defaultPicture from '../images/default.png';\nimport facebook from '../images/facebook.png';\nimport instagram from '../images/instagram.png';\nimport twitter from '../images/twitter.png';\nimport './UserProfileCard.css';\n\n\n\nconst { Meta } = Card;\n\nclass UserProfileCard extends React.Component {\n\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: true,\n      active: false\n    };\n  }\n\n  onClickSend = (e) => {\n    const username = this.props.data.username;\n    console.log(this.props)\n    authAxios.post('http://127.0.0.1:8000/userprofile/friend-request/send/'+username)\n\n    this.setState({value: e.target.value});\n    }\n\n  onClickActive = (e) => {\n    if (this.state.active === false){\n      this.setState({\n        active: true\n      })\n    } else if (this.state.active === true){\n      this.setState({\n        active: false\n      })\n    }\n  }\n\n  onClickToggle = () =>{\n    let btn = document.querySelector('.btn');\n    let profileCard = document.querySelector('.profileCard');\n    profileCard.classList.toggle('active');\n  }\n\n  onProfileClick = () => {\n    const user = this.props.data.username\n    // this.prop.history.push('userview/'+user)\n    window.location.href = 'explore/'+user;\n\n  }\n\n\n\n\n\n\n\n  render() {\n    console.log(this.props.data)\n    let profileImage = null\n\n    if(this.props.data){\n      if(this.props.data.profile_picture){\n        profileImage = this.props.data.profile_picture\n      }\n    }\n\n    console.log(profileImage)\n    return (\n\n      <div className = \"profileCard\">\n        <div className = 'image-box'>\n\n        {profileImage === null ?\n\n\n          <img className = 'profile-image' src = {defaultPicture} alt = 'Avatar'/>\n\n          :\n\n          <img className = 'profile-image' src = {profileImage} alt = 'Avatar'/>\n\n\n        }\n\n\n\n        </div>\n        <div className = 'top'>\n        <MoreOutlined />\n        </div>\n        <div className = 'bottom'>\n          <div className = 'name'> {this.capitalize(this.props.data.first_name)+\" \"+this.capitalize(this.props.data.last_name)} </div>\n          <div className = 'designation'> {this.props.data.get_followers.length} followers </div>\n          <div className = 'location'> <EnvironmentOutlined /> Tucson, AZ </div>\n        </div>\n        <div className = 'social'>\n        <div className = 'social-links'>\n          <div\n          onClick = {this.onProfileClick}\n          className = 'btn'> Profile </div>\n          <div className = 'btn'> Follow </div>\n        </div>\n        </div>\n      </div>\n\n\n\n    );\n\n  }\n}\n\nexport default UserProfileCard;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/Layouts/Layouts.js",["1435","1436","1437","1438","1439","1440","1441","1442","1443","1444","1445","1446","1447","1448","1449"],"import React from 'react';\nimport { Layout, Menu, Breadcrumb, Dropdown } from 'antd';\nimport { Link, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/auth';\nimport '../Containers.css'\nimport { authAxios } from '../../components/util';\nimport { Icon } from 'semantic-ui-react'\nimport { Tag, Input } from 'antd';\nimport * as navActions from '../../store/actions/nav'\n\nimport moment from 'moment';\n// import SearchBar from '../HeaderSearch';\n\n\nimport SideMenu from '../../components/SideMenu/SideMenu';\n\nimport './Layouts.css';\n\nimport Notifications from '../Notifications';\nimport NotificationsDropDown from '../NotificationsDropDown';\nimport PickEventSyncModal from '../PersonalCalendar/EventSyncForms/PickEventSyncModal';\nimport * as eventSyncActions from '../../store/actions/eventSync';\nimport SuggestedFriends from './SuggestedFriends.js'\n\nconst { Header, Footer, Content } = Layout;\nconst { Search } = Input;\n\n\n// Function: boarder layout that wraps around each of the other containers, and has\n// menu items that go to each page\n\nclass CustomLayout extends React.Component {\n  state = {\n    username: '',\n  }\n\n\n\n  async componentDidMount(){\n    await authAxios.get('http://127.0.0.1:8000/userprofile/current-user/')\n      .then(res=> {\n        this.setState({\n          username: res.data.username,\n       });\n     });\n   }\n\n\n    render() {\n      console.log(this.props)\n\n      return (\n      <div>\n\n\n                <Layout>\n                  {/*\n                   <Content\n                     className=\"\"\n                     style={{\n                       height: \"710px\",\n\n                     }}\n                   >\n\n                       <SuggestedFriends/>\n\n                   </Content>\n\n                   */}\n                  </Layout>\n\n\n\n              >\n              }\n\n\n                <Footer style={{\n                  // position: 'relative',\n                  // top: \"-120px\",\n                  // textAlign: 'center',\n                 }}>\n                ShareOrb ©2020\n                </Footer>\n\n\n\n        </div>\n      );\n    }\n\n\n    }\n\n\nconst mapStateToProps = state => {\n  return{\n    notificationDrop: state.nav.showPopup,\n    showPickEventSyncModal: state.eventSync.showPickEventSyncModal\n  }\n}\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n        closeNotification: () => dispatch(navActions.closePopup()),\n        openNotification: () => dispatch(navActions.openPopup()),\n        logout: () => dispatch(actions.logout()),\n        openPickEventSyncModal: (user, userFriend, minDate, maxDate, notificationId) => dispatch(eventSyncActions.openPickEventSyncModal(\n          user,\n          userFriend,\n          minDate,\n          maxDate,\n          notificationId\n        )),\n        closePickEventSyncModal: () => dispatch(eventSyncActions.closePickEventSyncModal())\n    }\n}\n\n\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CustomLayout));\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/PostPageFolder/PostPicCarousel.js",["1450","1451","1452","1453"],"import React from 'react';\nimport { Carousel } from 'antd';\nimport {\n  RightCircleOutlined,\n  LeftCircleOutlined\n} from '@ant-design/icons';\nimport '../../containers/SocialCalendarFolder/SocialCalCSS/SocialCellPage.css';\n\n\nclass PostPicCarousel extends React.Component{\n  constructor(props){\n    super(props);\n    this.next = this.next.bind(this)\n    this.previous = this.previous.bind(this);\n    // createRef is used to refer to the DOM element in the render with the\n    // ref in the tab\n    this.carousel = React.createRef()\n  }\n\n  next() {\n    this.carousel.next()\n  }\n\n  previous() {\n    this.carousel.prev()\n  }\n\n\n\n  renderPictures = pictureList => {\n    console.log(pictureList)\n    let socialItems = []\n\n    // if(pictureList.length === 0){\n    //   return\n    // } else if (pictureList.length === 1){\n    //\n    // }\n    {\n      pictureList.map(\n        item => {\n          socialItems.push(\n            <div className = 'picturesRoll'>\n              <img\n              className = 'socialImages'\n              src ={'http://127.0.0.1:8000/media/'+item} />\n            </div>\n          )\n        }\n      )\n    }\n\n    return socialItems\n  }\n\n  onChange= (a) => {\n    // This on change will show the indexes of the carousel\n    console.log(a);\n    this.props.picIndexChange(a)\n  }\n\n\n  render(){\n    console.log(this.props)\n    let itemList = []\n    if(this.props.items !== []){\n      itemList = this.props.items\n    }\n\n\n    const contentStyle = {\n      height: '800px',\n      color: '#fff',\n      lineHeight: '160px',\n      textAlign: 'center',\n      background: '#364d79',\n    };\n\n    return (\n      <div className = 'socialLeftRight'>\n        <LeftCircleOutlined\n        className = 'socialArrowLeft'\n        onClick = {this.previous} />\n        <Carousel\n        arrows = {true}\n        effect = 'null'\n        ref = {node => {this.carousel = node}}\n        afterChange={this.onChange}>\n          {this.renderPictures(itemList)}\n        </Carousel>\n        <RightCircleOutlined\n        className = 'socialArrowRight'\n        onClick = {this.next} />\n      </div>\n    )\n  }\n\n}\n\n\n\nexport default PostPicCarousel;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/PostPageFolder/UserPostComments.js",["1454","1455","1456"],"import React from 'react';\nimport './UserPostPage.css';\nimport { Comment, Tooltip, List, Avatar, Input, Form, Button } from 'antd';\nimport UserPostPageWebSocketInstance from '../../UserPostPageWebsocket'\nimport * as dateFns from 'date-fns';\n\n\nclass UserPostComments extends React.Component{\n\n  state = {\n    comment: ''\n  }\n\n\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  handleSubmit = e => {\n\n    if(this.state.comment !== ''){\n      UserPostPageWebSocketInstance.sendUserPostComment(\n        this.props.curUser,\n        this.state.comment,\n        this.props.postId\n      )\n\n      this.setState({comment: ''})\n    }\n  }\n\n  handleChange = e => {\n    this.setState({\n      comment: e.target.value\n    })\n  }\n\n  renderTimestamp = timestamp =>{\n    console.log(timestamp)\n    let prefix = '';\n    console.log(new Date().getTime())\n    console.log(new Date(timestamp).getTime())\n    const timeDiff = Math.round((new Date().getTime() - new Date(timestamp).getTime())/60000)\n    console.log(timeDiff)\n    if (timeDiff < 1 ) {\n      prefix = `Just now`;\n    } else if (timeDiff < 60 && timeDiff >= 1 ) {\n      prefix = `${timeDiff} minutes ago`;\n    }else if (timeDiff < 24*60 && timeDiff > 60) {\n      prefix = `${Math.round(timeDiff/60)} hours ago`;\n    } else if (timeDiff < 31*24*60 && timeDiff > 24*60) {\n      prefix = `${Math.round(timeDiff/(60*24))} days ago`;\n    } else {\n        prefix = `${dateFns.format(new Date(timestamp), \"MMMM d, yyyy\")}`;\n    }\n\n    return prefix;\n  }\n\n\n  render(){\n\n    console.log(this.props)\n    return(\n      <div className = \"postCommentBoxBox\">\n        <div className = 'postCommentBox'>\n        <List\n          className=\"comment-list\"\n          itemLayout=\"horizontal\"\n          dataSource={this.props.items}\n          renderItem={item => (\n\n              <div className = 'postCommentItem'>\n\n              <div className = 'postCommentNameTag'>\n                <Avatar size = {40} src = {'http://127.0.0.1:8000'+item.commentUser.profile_picture} />\n                <div className = 'postCommentName'>\n                  <div className = 'postCommentUsername'>\n                  <b>{this.capitalize(item.commentUser.first_name)} {this.capitalize(item.commentUser.last_name)} </b>\n                  </div>\n                  <div className = 'postCommentDate'>\n                  {this.renderTimestamp(new Date(item.created_on))}\n                  </div>\n\n\n                </div>\n              </div>\n\n              <div className = 'postCommentText'>\n              {item.body}\n              </div>\n\n              </div>\n          )}\n        />\n        <div className = 'postCommentInput'>\n          <Avatar\n          size = {40}\n          className ='postPicInput'\n          src = {'http://127.0.0.1:8000'+ this.props.profilePic}/>\n          <Form>\n            <Input\n            className= 'postBoxInput'\n            onChange ={this.handleChange}\n            value = {this.state.comment}\n            // bordered = {false}\n            placeholder = 'Write a comment'\n            name = 'postComment'\n            onPressEnter = {this.handleSubmit}\n            // rows = {1}\n             />\n\n            <button\n            // type = 'submit'\n            // onClick = {this.handleSubmit}\n            style = {{display: 'none'}}\n            />\n          </Form>\n        </div>\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default UserPostComments;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/SocialCalendarFolder/SocialEventPage/DeleteSocialEventModal.js",["1457","1458"],"import React from 'react';\nimport { Modal, notification } from 'antd';\nimport * as dateFns from 'date-fns';\n\n\nclass DeleteSocialEventModal extends React.Component{\n\n\n\n\n  render(){\n    console.log(this.props)\n      return(\n        <Modal\n        visible = {this.props.visible}\n        onCancel = {this.props.onCancel}\n        onOk = {this.props.onDelete}\n        >\n\n        Deleting this event will remove everyone who is interested in going. Are\n        you sure you want to delete the event?\n\n        </Modal>\n      )\n  }\n}\n\nexport default DeleteSocialEventModal;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/AvatarGroups.js",["1459","1460"],"import React from 'react';\nimport { Avatar, Tooltip } from \"antd\";\nimport { UserOutlined, AntDesignOutlined } from \"@ant-design/icons\";\n\nclass AvatarGroups extends React.Component{\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      avatarColor: \"\",\n    }\n  }\n\n  render(){\n    var num=Math.floor(Math.random() * 4);\n    console.log(this.props)\n    const avatarColor=['#fde3cf', '#b5f5ec', '#d3f261', '#b37feb', '#1890ff']\n    const textColor=['#f56a00', '#13c2c2', '#7cb305', '\t#FFFFFF', '#FFFFFF']\n    return (\n      <div>\n\n        <Avatar.Group\n        maxStyle={{ color: textColor[num], backgroundColor: avatarColor[num] }}\n        maxCount={3}\n        >\n\n\n          <Tooltip placement=\"topLeft\" title=\"Micahel Taylor\">\n                <Avatar src=\"https://images.unsplash.com/photo-1597244359536-862d0fcab3c9?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1355&q=80\"/>\n          </Tooltip>\n\n          <Tooltip placement=\"topLeft\" title=\"Larry Donahue\">\n                <Avatar src=\"https://images.unsplash.com/photo-1484515991647-c5760fcecfc7?ixlib=rb-1.2.1&auto=format&fit=crop&w=687&q=80\"/>\n          </Tooltip>\n\n\n          <Tooltip placement=\"topLeft\" title=\"Vince Curella\">\n          <Avatar\n          src=\"https://images.unsplash.com/photo-1597019558926-3eef445fdf60?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60\"/>\n         </Tooltip>\n\n         <Tooltip placement=\"topLeft\" title=\"Sarah Arfsten\">\n         <Avatar\n         src=\"https://images.unsplash.com/photo-1597346906996-ab57d9b27dda?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60\"/>\n        </Tooltip>\n\n\n        </Avatar.Group>\n      </div>\n    )\n  }\n}\n\n\n\nexport default AvatarGroups;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/SocialCalendarFolder/SocialEventPage/EditSocialEventForm.js",["1461","1462","1463","1464","1465","1466","1467","1468","1469","1470","1471","1472","1473","1474","1475","1476","1477","1478","1479"],"import React from 'react';\n// This will be used to make the form to edit events in the social events\nimport * as dateFns from 'date-fns';\nimport moment from 'moment';\nimport { Form } from '@ant-design/compatible';\n\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport { authAxios } from '../../../components/util';\nimport { DatePicker, TimePicker, Button, Input, Select, Radio } from 'antd';\nimport { Field, reduxForm, formValueSelector } from 'redux-form';\n\n// import { connect } from 'react-redux';\nimport { AimOutlined, ArrowRightOutlined, UserOutlined, SearchOutlined } from '@ant-design/icons';\n\nconst { TextArea } = Input\n\nconst { Option } = Select;\n\nconst validate = values => {\n  const errors = {}\n  // This is used to check if certain fields are properly checked and so it deosn't\n  // mess with the editing of events\n  console.log(values)\n  if (!values.title){\n    errors.title = \"Required\"\n  }\n  if(dateFns.isAfter(new Date(values.startDate), new Date(values.endDate))){\n    errors.endDate = 'endDate error'\n  } else if (values.repeatCondition === 'weekly' &&\n    !dateFns.isSameWeek(new Date(values.startDate), new Date(values.endDate))\n  ) {\n    errors.endDate = \"endDate error\"\n  } else if (values.repeatCondition === 'daily' &&\n    !dateFns.isSameDay(new Date(values.startDate), new Date(values.endDate))\n  ) {\n    errors.endDate = \"endDate error\"\n  }\n\n  return errors\n}\n\nconst renderField = (field) => {\n  // This is for the title and location most, but mostly for title\n\n  console.log(field.meta)\n  return (\n    <span>\n    <Input style={{width:'50%', height:'30px', fontSize:'15px'}}\n    {...field.input}\n    type = {field.type}\n    placeholder= {field.placeholder}\n    style={{display:'inline-block'}}\n    className = 'box'\n    maxLength = \"35\"\n    />\n\n    </span>\n  )\n}\n\nconst renderTextArea = (field) => {\n\n  // This is for content field\n  return (\n    <TextArea\n    {...field.input}\n    type = {field.type}\n    placeholder = {field.placeholder}\n    />\n  )\n\n}\n\nconst renderStartTimeSelect = (field) => {\n  // This const will render the start time of the event\n  // So before you choose any value you want to have the field\n  // input as a value in your select... because the input value will be the value\n  // that will be return to the field when you input a value\n  // Bascially everything goes through the value first, and what ever is here inspect\n  // is just for show\n\n\n  console.log(field)\n  return (\n    <Select\n      // {...field.input}\n      style = {{width: '115px', marginRight:'15px'}}\n      onChange = {field.input.onChange}\n      value = {field.input.value}\n      className = 'timebox'>\n\n    {field.children}\n    </Select>\n  )\n}\n\nconst renderStartTime = () => {\n\n  // This will render the specific date selections for the tiem select\n    const timeFormat = \"hh:mm a\"\n    const time = []\n    let start = dateFns.startOfDay(new Date())\n    let startHour = dateFns.getHours(new Date())\n    let startMins = dateFns.getMinutes(new Date())\n    for (let i = 0; i< 48; i++){\n      const cloneTime = startHour + ':' + startMins\n      time.push(\n        <Option\n        key = {dateFns.format(start, timeFormat)}\n        value= {dateFns.format(start, timeFormat)} >\n        {dateFns.format(start, timeFormat)}\n        </Option>\n      )\n      start = dateFns.addMinutes(start, 30)\n    }\n    console.log(time)\n    return time\n  }\n\n  const renderFriendSelect = (field) => {\n\n    //THIS WILL BE CHANGED TO BE INVITE LIST THAT INCLUDES ALL YOUR FOLLOWERS AND FOLLWOING\n    console.log(field)\n    return (\n      <Select\n      mode=\"multiple\"\n      style={{ width: '50%', marginTop:'20px'}}\n      optionLabelProp=\"label\"\n      onChange = {field.input.onChange}\n      value = {field.input.value}\n      placeholder=\"Add friends\"\n          >\n      {field.children}\n\n      </Select>\n    )\n\n  }\n\n\n  const renderLocationField = (field) => {\n    console.log(field.meta)\n    return (\n      <span>\n      <Input style={{width:'50%',fontSize:'14px'}}\n      {...field.input}\n      type = {field.type}\n      placeholder= {field.placeholder}\n      className = 'box'/>\n\n      </span>\n    )\n  }\n\n  // Not sure if we are gonna need event color\n\n\n\n// We do not need the radio because the social events are gonna be during one day\n// We probally don't even need a start date because it will be one day\n\n\nclass EditSocialEventForm extends React.Component{\n\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  handleStartTimeChange = (event, value) => {\n    const { change } = this.props\n    // So this handleStartTimechange pretty much is used to automatically\n    // change the values of the endTime, the only difference between this\n    // and that of the ReactAddEventForm is that we dont need to change the\n    // startTime value just the endTime value will be affected\n\n\n    console.log(value)\n    change('startTime', value)\n\n    // Like every other time related events we have to converted all\n    let startHour = parseInt(value.substring(0,2))\n    let startMin = parseInt(value.substring(3,5))\n    let ampm = value.substring(5,8)\n    let endHour = parseInt(this.props.endTime.substring(0,2))\n    let endMin = parseInt(this.props.endTime.substring(3,5))\n    let endTime = ''\n\n    console.log(startHour)\n\n\n\n    // These if statement is used to change the startTime values to the 1-24 hour format\n    if(value.includes('PM')){\n      if(startHour !== 12 ){\n        startHour = startHour + 12\n      }\n    } else if (value.includes('AM')){\n      if(startHour === 12){\n        startHour = 0\n      }\n    }\n\n    // These if statements here is to change the end time values from 1-2 to\n    // 1-24 for the end time\n    if (this.props.endTime.includes('PM')){\n      if (endHour !==  12){\n        endHour = endHour + 12\n      }\n    } else if (this.props.endTime.includes('AM')){\n      if(endHour === 12){\n        endHour = 0\n      }\n    }\n\n    // Now this is where the comparison of the times comes in an all the senarios\n    // For this one,for times that the start hour is smaller than that of the\n    // end time you don't need to change the value because due to the redux from\n    // the value of the start time will chagne it self\n    if(startHour === endHour ){\n      if (startMin > endMin){\n        endMin = \"00\"\n        endHour = startHour + 1\n        console.log(startHour)\n        console.log(endHour)\n        if (startHour === 11 && ampm === 'AM'){\n          endTime = '12:'+endMin + ' PM'\n        } else if (startHour === 23 && ampm === \" PM\"){\n          endTime = '12:'+endMin + ' AM'\n        } else {\n          if (endHour < 10){\n            endHour = '0'+endHour\n          } else {\n             if(ampm === ' AM'){\n               endHour = endHour\n             } else if (ampm === ' PM'){\n               endHour = endHour-12\n               if (endHour < 10){\n                 endHour = '0'+endHour\n               }\n             }\n           }\n           endTime = endHour + ':'+endMin+ampm\n\n        }\n\n\n        change('endTime', endTime )\n      } else if (startMin === endMin ){\n        // This is the case where the times are identical to each other\n        // REMEMBER THAT ENDHOUR AND STARTHOUR ARE USING THE 1-24 TIME\n        console.log(startHour, endHour)\n        if (startHour === 0 && ampm === ' AM' && startMin === 0){\n          endTime = '12:30 AM'\n        } else if (startHour === 12 && ampm === ' PM' && startMin === 0){\n          endTime = '12:30 PM'\n        } else {\n          if (startMin === 30){\n            endMin = '00'\n            if (startHour === 12){\n              endHour = '01'\n              endTime = endHour + ':'+endMin+' PM'\n            } else if (startHour === 11 && ampm === ' AM'){\n                endTime =   '12:' + endMin + ' PM'\n              } else if ((startHour-12) === 11 && ampm === ' PM'){\n                endTime =  '12:' + endMin + ' AM'\n              }\n            else {\n              console.log(endHour)\n              endHour = startHour +1\n                if (endHour<10){\n                    endHour = '0'+endHour\n                } else {\n                  if(ampm === ' AM'){\n                    endHour = endHour\n                  } else if (ampm === ' PM'){\n                    endHour = endHour-12\n                    if (endHour < 10){\n                      endHour = '0'+endHour\n                    }\n                  }\n                }\n              endTime = endHour + ':' +endMin+ampm\n            }\n          } else if (startMin === 0){\n            endMin = '30'\n            console.log(ampm)\n            if (endHour<10){\n                endHour = '0'+endHour\n            } else {\n              if(ampm === ' AM'){\n                console.log('am')\n                endHour = endHour\n              } else if (ampm === ' PM'){\n                console.log('pm')\n                if (endHour === 12){\n                  endHour = 12\n                }else {\n                  endHour = endHour-12\n                  if (endHour < 10){\n                    endHour = '0'+endHour\n                  }\n                }\n              }\n            }\n            endTime = endHour + ':'+endMin +ampm\n          }\n        }\n\n        change('endTime', endTime)\n      }\n    } else if (startHour > endHour) {\n      // let startHour = parseInt(time.substring(0,2))\n      // let startMin = parseInt(time.substring(3,5))\n      if (startHour === 11 && ampm === ' AM' && startMin === 30){\n        endTime = '12:00 PM'\n      } else if (startHour === 23 && ampm === ' PM' && startMin === 30){\n        endTime = '12:00 AM'\n      } else {\n        if (startMin === 30){\n          startMin = \"00\"\n          startHour = startHour + 1\n        } else if (startMin !== 30){\n          startMin = '30'\n        }\n        if (startHour < 10){\n          startHour = '0'+startHour\n        } else{\n          if(ampm === ' AM'){\n            startHour = startHour\n          } else if (ampm === ' PM'){\n            startHour = startHour-12\n            if (startHour < 10){\n              if (startHour === 0){\n                startHour = '12'\n              } else {\n                startHour = '0'+startHour\n              }\n            }\n          }\n        }\n\n\n          endTime = startHour + ':'+startMin+ampm\n      }\n\n\n\n      change('endTime', endTime)\n    }\n\n  }\n\n\n  renderEndDate = (field) => {\n    console.log(field.meta)\n    return (\n      <DatePicker\n      onChange = {field.input.onChange}\n      value = {field.input.value}\n      style = {{width: '110px'}}\n      suffixIcon={<div></div>}\n      allowClear = {false}\n      // className = {` ${this.onRed() ? 'datePicker' : ''}`}\n      />\n    )\n  }\n\n  handleEndTimeChange = (event) => {\n    console.log(event)\n\n    const {change} = this.props\n    return (\n      console.log('endTime')\n      // change('endTime', event)\n    )\n  }\n\n  renderShareListSelect = () => {\n    // Gonna use this for follow and follower list\n    if(this.props.friendList !== undefined){\n      const friendList = this.props.friendList\n\n      let shareOptions = []\n\n      for (let friend = 0; friend< friendList.length; friend++ ){\n        shareOptions.push(\n          <Option value = {friendList[friend].username}\n          label = {this.capitalize(friendList[friend].username)}>\n            {this.capitalize(friendList[friend].username)}\n          </Option>\n        )\n      }\n\n      return shareOptions\n    }\n  }\n\n  onRed = () => {\n    let startDate = this.props.startDate\n    let endDate = this.props.endDate\n    let repeatCondition = ''\n    if (this.props.repeatCondition){\n        repeatCondition = this.props.repeatCondition\n    }\n\n    let boxcolor = false\n\n    console.log(repeatCondition)\n\n\n    if (repeatCondition === 'weekly'){\n      if(dateFns.differenceInDays(startDate, endDate) > 7){\n        boxcolor = true\n      }\n    }\n\n\n    if (dateFns.isAfter(new Date(startDate),new Date(endDate))){\n      boxcolor = true\n    }\n\n    return boxcolor\n  }\n\n  renderEndTimeSelect = () => {\n    console.log(this.props.startTime)\n\n    if (this.props.startTime !== undefined ){\n      // So basically the way I am making this will be the same way I made the\n      // date pick in the addeventform. But instead of using state, we will use\n      // redux state\n      const baseTime = renderStartTime()\n      let endTime = []\n\n      let setHour = ''\n      let setMin = ''\n      // You will be using setHour and setMin in order to compare to the\n      // times in the baseTime so you will know which time to put inin the endTime\n\n      // In order to compare, you have to convert all the tiems into the 1-24 hour time\n      if (this.props.startTime.includes(\"PM\")){\n        setHour = parseInt(this.props.startTime.substring(0,2))\n        setMin = parseInt(this.props.startTime.substring(3,5))\n        if (setHour !== 12 ){\n          setHour = setHour + 12\n        }} else if (this.props.startTime.includes(\"AM\")){\n          setHour = parseInt(this.props.startTime.substring(0,2))\n          setMin = parseInt(this.props.startTime.substring(3,5))\n          if (setHour === 12){\n            setHour = 0\n          }\n        }\n\n        // Now we will run through the basetimes and then convert them to\n        // the 1-24 hour format the from there compare what needs date is put into the\n        // end date and what date does not get put in there\n      for( let i = 0; i< baseTime.length; i++){\n       if(baseTime[i].key.includes('PM')){\n         let hour = parseInt(baseTime[i].key.substring(0,2))\n         if (hour !== 12){\n           hour = hour+12\n         }\n         const min = baseTime[i].key.substring(3,5)\n         if (setHour < hour){\n           endTime.push(\n            <Option key = {baseTime[i].key}>{baseTime[i].key}</Option>\n          )} else if (setHour === hour){\n            if(setMin < min){\n              endTime.push(\n                <Option key = {baseTime[i].key}>{baseTime[i].key}</Option>\n              )\n            }\n          }\n       } else if (baseTime[i].key.includes(\"AM\")) {\n         let hour = parseInt(baseTime[i].key.substring(0,2))\n         if (hour === 12){\n           hour = 0\n         }\n         const min = baseTime[i].key.substring(3,5)\n         if( setHour < hour ) {\n           endTime.push(\n             <Option key = {baseTime[i].key}>{baseTime[i].key}</Option>\n          )} else if (setHour === hour){\n            if (setMin < min){\n              endTime.push(\n                <Option key = {baseTime[i].key}>{baseTime[i].key}</Option>\n              )\n            }\n          }\n        }\n      }\n      return (endTime)\n    }\n  }\n\n\n\n  render() {\n\n    console.log(this.props)\n    // Gonna have to pass in values and props fromt eh parent event soon tho\n    const {handleSubmit, pristine, invalid, reset} = this.props;\n\n    let eventId = \"\"\n\n    if(this.props.info){\n      if(this.props.info.id){\n        eventId = this.props.info.id\n      }\n    }\n\n    return (\n      <form style={{padding:'25px'}}>\n          <div className = 'reduxTitle'>\n            <Button style={{float:'left', marginRight:'15px', display:'inline-block'}} type=\"primary\" shape=\"circle\" size={'large'}>\n\n            </Button>\n            <Field\n            name = 'title'\n            component= {renderField}\n            type= 'text'\n            placeholder = 'Title'\n\n            />\n\n\n          </div>\n\n\n          <div style={{display:'flex', height:'30px', width:'600px'}} className = 'pointerEvent outerContainerPeople'>\n            <div class=\"innerContainerPeople\">\n              <i style={{marginLeft:'10px', marginRight:'25px'}}  class=\"fas fa-clock\"></i>\n\n\n\n                 <Field\n                   style={{display: 'inline-block',float: 'left'}}\n                   name = 'startTime'\n                   component = {renderStartTimeSelect}\n                   onChange = {this.handleStartTimeChange}\n                   >\n                   {renderStartTime()}\n                 </Field>\n\n                 <Field\n                   style={{display: 'inline-block', marginRight:'15px'}}\n                   name = 'endTime'\n                   onChange = {this.handleEndTimeChange}\n                   component = {renderStartTimeSelect}\n                   >\n                   {this.renderEndTimeSelect()}\n                 </Field>\n            </div>\n          </div>\n\n\n\n          {/* need to implement redux form to people */}\n      {/*\n        <div>\n\n            <i style={{marginLeft:'10px', marginRight:'21px'}} class=\"fas fa-user-friends\"></i>\n            <Field\n            name = 'friends'\n            type='text'\n            onChange = {this.handleFriendChange}\n            component = {renderFriendSelect}\n            placeholder = 'Title'\n            >\n              {this.renderShareListSelect()}\n            </Field>\n\n\n          </div>\n\n        */}\n\n\n          <br />\n          <div className  = 'reduxContent'>\n          <i class=\"fas fa-align-justify\" style={{marginLeft:'10px', marginRight:'25px', display: \"inline\"}}></i>\n\n            <Field\n            name = 'content'\n            component= {renderTextArea}\n            type= 'text'\n            placeholder = 'Description'\n            />\n          </div>\n\n\n          {/* location */}\n          <div style={{height:'70px'}} className = 'outerContainerPeople'>\n            <div class=\"innerContainerPeople\">\n              <i class=\"fas fa-globe-americas\"  style={{marginLeft:'10px', marginRight:'25px'}} ></i>\n              <Field\n                name = 'location'\n                placeholder=\"Location\"\n                component= {renderLocationField}\n                type= 'text'\n\n\n              />\n            <AimOutlined style={{marginLeft:'15px', fontSize:'15px', marginRight:'15px'}} className = 'aim'/>\n\n          </div>\n\n\n\n          </div>\n\n\n\n            <div className = 'reduxButton'>\n            <Button\n            onClick = {() => this.props.onDelete()}\n            >\n            Delete\n            </Button>\n            <Button\n            type = 'primary'\n            onClick = {handleSubmit}\n            style = {{left: '10px', fontSize: '15px'}}\n            disabled = {pristine || invalid || this.onRed()}\n            >Save</Button>\n            </div>\n\n\n\n      </form>\n    )\n  }\n\n}\n\n\nEditSocialEventForm = reduxForm({\n  form: \"socialEventEdit\",\n  enableReinitialize: true,\n  validate\n}) (EditSocialEventForm)\n\nconst selector = formValueSelector(\"socialEventEdit\")\n\n\nexport default connect(state => ({\n  title: selector(state, 'title'),\n  content: selector(state, 'content'),\n  location: selector(state, 'location'),\n  startTime: selector(state, 'startTime'),\n  endTime: selector(state, 'endTime'),\n}))(EditSocialEventForm);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NewChatFolder/ChatManagerFolder/CurChatEventList.js",["1480","1481"],"import React from 'react';\nimport { List, Avatar, Input, Divider } from 'antd';\nimport * as dateFns from 'date-fns';\nimport './ChatManager.css'\nimport userIcon from '../../../components/images/user.png';\nimport CreateShareEventChat from './CreateShareEventChat';\n\n// This will be used to display the list and search of the events\n// that you can share with the person that you are chatting with\n\nclass CurChatEventList extends React.Component{\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n\n  getMemberIds = (memberList) => {\n    // This function will turn the list into a list of ids\n    let idList = []\n\n    for(let i = 0; i< memberList.length; i++){\n      idList.push(memberList[i].id)\n    }\n\n    return idList;\n  }\n\n  sharedMemberEvent = (participants) => {\n    // This function is to see if the event is shared among all the participants\n    // yet. return true if everyone in the chat is in the event\n    // return false if\n\n    console.log(participants)\n\n    const memberListId = this.getMemberIds(this.props.memberList)\n    const eventPartiId = participants\n\n    console.log(memberListId, eventPartiId)\n    for(let i = 0; i<memberListId.length; i++){\n      if(!eventPartiId.includes(memberListId[i])){\n        return false\n      }\n    }\n\n    return true\n  }\n\n\n  handleCreateEvent = (eventObj) => {\n\n\n    this.props.submitCreateEvent(eventObj)\n  }\n\n\n\n  render(){\n    console.log(this.props)\n\n\n    let eventList = []\n    if(this.props.eventList){\n      eventList = this.props.eventList\n    }\n\n      return(\n        <div className = \"chatEventShare\">\n\n        <div className = \"chatEventShareLeft\">\n          <div className = \"searchChatContainer\">\n            <form className = \"searchForm\">\n              <Input\n              placeHolder = \"Search Events\"\n              className = \"input\"\n               />\n            </form>\n          </div>\n\n          <div className = \"eventListContainer\">\n          <List\n             itemLayout=\"horizontal\"\n             dataSource={eventList}\n             renderItem={item => (\n               <div\n               style = {{\n                 backgroundColor: item.color\n               }}\n               className = \"chatEvent\">\n\n                <div className = \"title\">\n                  {item.title}\n                </div>\n\n                <div className =\"infoBox\">\n                  <div>\n                    <div className = \"date\">\n                      <i class=\"far fa-calendar\"></i>\n                      <span className = \"text\"> {dateFns.format(new Date(item.start_time), \"MMM dd, yyyy\")} </span>\n                    </div>\n                    <div className = \"times\">\n                      <i class=\"far fa-clock\"></i>\n                      <span className = \"text\">{dateFns.format(new Date(item.start_time),'h:mm a')}-{dateFns.format(new Date(item.end_time),'h:mm a')}</span>\n                    </div>\n                  </div>\n                    <div className = \"numPeople\">\n                      <i class=\"far fa-user\"></i>\n                      <span className = \"text\">{item.person.length}</span>\n                    </div>\n                </div>\n                {\n                  this.sharedMemberEvent(item.person) ?\n\n                  <div\n                  className = \"alreadyShareEventButton\"\n                  >\n                  <i class=\"far fa-check-circle\"></i>\n\n                  </div>\n\n                  :\n\n                  <div\n                  onClick = {() => {this.props.submitShareEvent(item.id, item)}}\n                  className = \"shareEventButton\">\n                    <i class=\"fas fa-user-plus\"></i>\n                  </div>\n\n                }\n\n\n               </div>\n\n\n\n             )}\n            />\n            </div>\n          </div>\n\n\n          <Divider\n          style = {{\n            height: \"500px\",\n            color: \"black\"\n          }}\n          type = \"vertical\"  />\n\n\n          <div\n          className = \"chatEventButton\"\n          >\n            <CreateShareEventChat\n            submitCreateEvent = {this.handleCreateEvent}\n            usernameList = {this.props.usernameList}\n            />\n          </div>\n\n        </div>\n      )\n    }\n  }\n\nexport default CurChatEventList;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/NewNewsfeedFormPost.js",[],"/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/Forms2.js",["1482","1483","1484","1485","1486","1487","1488","1489","1490","1491"],"import React from 'react';\nimport  { Redirect } from 'react-router-dom';\nimport {Container} from 'reactstrap';\nimport {uploadPost} from '../api';\nimport axios from 'axios';\nimport { authAxios } from './util';\nimport { connect } from \"react-redux\";\n\n\n// Function: Version 2 of our forms with states\nclass PostUpload extends React.Component{\n  constructor(props) {\n    super(props);\n  }\n formData = new FormData();\n state = {\n\t image:null,\n\t caption:'',\n\t user_id:'',\n\t image_filter:null,\n\t id:null,\n\t username:'',\n   testVar:'',\n   login: false,\n   loading:false,\n }\n\n\tasync componentDidMount () {\n    await authAxios\n      .get(\"current-user\")\n      .then(res => {\n        this.setState({ testVar: res.data});\n        this.setState({ id: res.data.id });\n        this.setState({username:res.data.username});\n      })\n      .catch(err => {\n        this.setState({ error: err });\n      });\n    };\n\n    make_post = (post) =>{\n    \tlet data = this.uploadPost(post);\n    \treturn data;\n    }\n\n    uploadPost = (post) =>{\n     const data = new FormData();\n     data.append(\"caption\", post.caption);\n     data.append(\"user\", post.user_id);\n     if (post.image !== null){\n       data.append(\"image\", post.image)\n     }\n     // data.append(\"image\", post.image);\n     // data.append(\"image_filter\", post.image_filter);\n     fetch('http://127.0.0.1:8000/userprofile/list/', {\n    \tmethod: 'POST',\n        headers: {\n    \t    Authorization: `Token ${localStorage.getItem('token')}`,\n        },\n        body:data\n    })\n     .then (res =>res.json())\n     .then(json =>{\n    \t return json\n     })\n    }\n\n\tonFormSubmit = (e) =>{\n\t\te.preventDefault()\n\t\tif (this.state.id && this.state.caption){\n\t\t\tconst post = {\n\t\t\t\t'image': this.state.image,\n\t\t\t\t'caption': this.state.caption,\n\t\t\t\t'user_id': this.state.id,\n\t\t\t\t'image_filter': this.state.image_filter,\n\t\t\t\t'username': this.state.username,\n\t\t\t};\n\t\t\tthis.make_post(post);\n\t\t\twindow.location.reload(true)\n\t\t}\n\t\telse{\n\t\t\treturn <Redirect to='/'  />\n\t\t}\n\n    }\n    onChange = e => {\n\t\tconst type = e.target.name;\n\t\tconst value = e.target.value;\n\t\tif (type === \"caption\"){\n\t\t\tthis.setState({\n\t\t\t\tcaption: value\n\t\t\t});\n\t\t}\n\t\telse if (type === \"image\"){\n\t\t\tthis.setState({\n\t\t\t\timage_blob: URL.createObjectURL(e.target.files[0]),\n\t\t\t\timage:e.target.files[0],\n\t\t\t\tstage: \"image\",\n\t\t\t});\n\t\t}\n\t}\n\n\tselectFilter = e =>{\n    \tthis.setState({\n\t\t\timage_filter: e\n\t\t})\n\n\t}\n\n\trender(){\n  \treturn (\n  \t<Container style={{paddingTop: '10',zIndex:'-1'}}>\n  \t  <form onSubmit={this.onFormSubmit}>\n  \t    <div className=\"upload-container\">\n  \t\t\t\t{ this.state.stage !== \"image\" ?\n  \t\t\t\t<div  className= \"uploadImage upload\" >\n                  <input type=\"file\" name=\"image\" onChange= {this.onChange} />\n  \t\t\t\t</div> :\n  \t\t\t\t<div  className= \"uploadImage upload \" >\n                  <img src={this.state.image_blob} className={this.state.image_filter}\n  \t\t\t\tstyle={{height:'250px'}}/>\n  \t\t\t\t</div>}\n  \t\t\t\t<div className= \"message caption-text\">\n  \t\t\t\t<input type=\"text\" name=\"caption\" onChange= {this.onChange}value={this.state.caption}\n  \t\t\t\t style={{width: '300px', height:'100px'}}/>\n  \t\t\t\t </div>\n  \t\t\t\t <div className=\"filters\">\n  \t\t\t\t{ this.state.stage === \"image\" ?\n  \t\t\t\t\t<div>\n  \t\t\t\t\t\t<img src={this.state.image_blob}  className=\" filter\" onClick={(e) => this.selectFilter(\"\")}/>\n  \t\t\t\t\t\t<img src={this.state.image_blob}  className=\" filter blur-filter\"  onClick={(e) => this.selectFilter(\"blur-filter\")}/>\n  \t\t\t\t\t\t<img src={this.state.image_blob}  className=\" filter bng-filter\" onClick={(e) => this.selectFilter(\"bng-filter\")}/>\n  \t\t\t\t\t\t<img src={this.state.image_blob}  className=\" filter bright-filter\"  onClick={(e) => this.selectFilter(\"bright-filter\")}/>\n  \t\t\t\t\t\t<img src={this.state.image_blob}  className=\" filter saturate-filter\"  onClick={(e) => this.selectFilter(\"saturate-filter\")}/>\n  \t\t\t\t\t\t<img src={this.state.image_blob}  className=\" filter sepia-filter\"  onClick={(e) => this.selectFilter(\"sepia-filter\")}/>\n  \t\t\t\t\t</div>\n  \t\t\t\t\t:\n  \t\t\t\t\t<div></div>}\n  \t\t\t\t</div>\n  \t\t\t\t<div className=\"submit\">\n                  <button type=\"submit\" onClick={this.onFormSubmit}>Post</button>\n  \t\t\t\t</div>\n  \t\t\t\t</div>\n              </form>\n  \t</Container>\n  \t)\n  }\n};\n\nconst mapStateToProps = state => {\n\n  return {\n    token: state.auth.token,\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n)(PostUpload);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/components/NewsFeedFormPost.js",["1492","1493","1494","1495","1496","1497","1498","1499","1500","1501"],"import React, {useState, useEffect } from 'react';\nimport  { Redirect } from 'react-router-dom';\nimport {Container} from 'reactstrap';\nimport {uploadPost} from '../api';\nimport axios from 'axios';\nimport { authAxios } from './util';\nimport { connect } from \"react-redux\";\nimport { Input } from 'antd';\nimport {Button, Upload, message, Modal} from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nconst NewsFeedFormPost = (props) => {\n  // formData = new FormData();\n  const[temp, setTemp] = useState(null);\n  const {token} = props;\n  const[image, setImage] = useState(null);\n  const[fileList, setFileList] = useState([]);\n  const[caption, setCaption] = useState('');\n  const[id, setID] = useState(null);\n  const[username, setUsername] = useState('');\n  const[stage, setStage] = useState('empty');\n  // const[imageblob, setImageblob] = useState(\"\");\n  const[previewImage, setPreviewImage] = useState(\"\");\n  const[previewVisible, setPreviewVisible] = useState(false)\n\n  const { TextArea } = Input;\n\n\nconst uploadImageRainbowProgress = {\n\n   action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n\n   onChange(info) {\n    if (info.file.status !== 'uploading') {\n      console.log(info.file, info.fileList);\n    }\n    if (info.file.status === 'done') {\n      message.success(`${info.file.name} file uploaded successfully`);\n    } else if (info.file.status === 'error') {\n      message.error(`${info.file.name} file upload failed.`);\n    }\n  },\n  progress: {\n      strokeColor: {\n        '0%': '#108ee9',\n        '100%': '#87d068',\n      },\n      strokeWidth: 3,\n      format: percent => `${parseFloat(percent.toFixed(2))}%`,\n    },\n\n\n}\n\n  useEffect(() => {\n    console.log('hit')\n    authAxios.get(\"current-user\")\n    .then(res => {\n      console.log(res.data.id)\n      setID(res.data.id);\n      setUsername(res.data.username);\n      });\n  }, [token])\n\n  const make_post=(post) =>{\n\n    let data = uploadPost(post);\n\n  \treturn data;\n  }\n\n  const uploadPost =(post) =>{\n    console.log(props.token)\n   var data = new FormData();\n   console.log('right here')\n   console.log(data)\n   console.log(post)\n   data.append(\"caption\", post.caption);\n   data.append(\"user\", post.user_id);\n   console.log(post.caption)\n   console.log(post.user_id)\n   console.log('hellooo')\n   console.log(data)\n   if (post.image !== null){\n     data.append(\"image\", post.image)\n   }\n   for (var pair of data.entries()) {\n    console.log(pair[0]+ ', ' + pair[1]);\n}\n  console.log(localStorage.getItem('token'))\n   // data.append(\"image\", post.image);\n   // data.append(\"image_filter\", post.image_filter);\n\n   fetch('http://127.0.0.1:8000/userprofile/list/',{\n  \tmethod: 'POST',\n      headers: {\n  \t    Authorization: `Token ${localStorage.getItem('token')}`,\n      },\n      body:data\n  })\n   .then (res =>res.json())\n   .then(json =>{\n  \t console.log(json)\n  \t return json\n   })\n  }\n\n  const  onFormSubmit = (e) =>{\n    e.preventDefault()\n    if(fileList.length==0){\n      console.log(\"ZERO\")\n      var temp=image;\n    }\n    else{\n      var temp=fileList[0].originFileObj;\n    }\n\t\tif (props.data.id && caption){\n      console.log(fileList)\n      console.log('it got summited')\n\t\t\tconst post = {\n\t\t\t\t'image': temp,\n\t\t\t\t'caption': caption,\n\t\t\t\t'user_id': props.data.id,\n\t\t\t\t'username': props.data.username,\n\t\t\t};\n\t\t\tmake_post(post);\n\t\t\twindow.location.reload(true)\n\t\t}\n\t\telse{\n\t\t\treturn <Redirect to='/'  />\n\t\t}\n  }\n\n  const onCaptionChange = (e) => {\n    const value = e.target.value\n    console.log(value)\n    setCaption(value)\n  }\n\n  const handleCancel = () => setPreviewVisible(false)\n\n  const handlePreview = file =>{\n    setPreviewImage(file.thumbUrl)\n    setPreviewVisible(true)\n  }\n\n  const onChange = ({ fileList })=> {\n\n    console.log(fileList)\n    // const type = e.target.name;\n\t\t// const value = e.target.value;\n    // console.log(value)\n\t\t// if (type === \"caption\"){\n\t\t// \tsetCaption(value)\n\t\t// }\n\t\t//  if (type === \"image\") {\n\t\t\t\t// setImageblob(URL.createObjectURL(e.target.files[0]))\n\t\t\t\t// setImage(e.target.files[0])\n\t\t\t\t// setStage(\"image\")\n    //   }\n    setFileList(fileList)\n    // fileList.forEach(element => setFileList(fileList[element]));\n\t}\n\n  return (\n\t<Container style={{paddingTop: '10',zIndex:'-1'}}>\n\t  <form>\n\t    <div className=\"upload-container\">\n\n          { stage !== \"image\" ?\n\t\t\t\t<div  className= \"uploadImage upload\" >\n\n\n\n\n                <Upload\n                {...props}\n                listType = 'picture-card'\n                fileList = {fileList}\n                onPreview = {handlePreview}\n                style={{marginBottom:100}}\n                name=\"image\"\n                beforeUpload  = {() => false} // prevents it from uploading right away\n                onChange= {onChange}>\n                   <Button >\n                     <UploadOutlined {...uploadImageRainbowProgress} /> Click to Upload\n                   </Button>\n                 </Upload>\n\n\n\n\n\n\t\t\t\t</div>\n\n        :\n\n\n\t\t\t\t<div  className= \"uploadImage upload \" >\n\n\t\t\t\t</div>}\n\n        <TextArea rows={4} type=\"text\" name=\"caption\" onChange= {onCaptionChange} value={caption}\n        style={{width: '600px'}}/>\n\n\n\t\t\t\t<div>\n                <Button  type=\"primary\" style={{ background: \"#0069FF\" }} onClick={onFormSubmit}>Post</Button>\n\t\t\t\t</div>\n\t\t\t</div>\n    </form>\n\n    <Modal\n          visible={previewVisible}\n          footer={null}\n          onCancel={handleCancel}\n        >\n          <img alt=\"example\" style={{ width: \"100%\" }} src={previewImage} />\n    </Modal>\n\t</Container>\n  );\n};\n\n\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token,\n\n  };\n};\n\nexport default connect(mapStateToProps)(NewsFeedFormPost);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/SocialCalendarFolder/SocialCellCoverEvents.js",["1502","1503","1504","1505","1506","1507","1508"],"import React from 'react';\nimport * as dateFns from 'date-fns';\nimport { List, Avatar } from 'antd';\nimport {ClockCircleOutlined } from '@ant-design/icons';\nimport clock from '../../components/images/clock.png';\nimport location from '../../components/images/pin.png';\nimport AvatarGroups from '../../components/AvatarGroups';\nimport userIcon from '../../components/images/user.png';\nimport ExploreWebSocketInstance from '../../exploreWebsocket';\nimport './SocialCalCSS/SocialCal.css';\nimport Liking from \"../NewsfeedItems/Liking\";\n\n\nclass SocialCellCoverEvents extends React.Component{\n  // This will be the smaller events that are shown social cal if there are only\n  // events\n\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  timeFormater(time){\n    // This will change the format of the time properly to the 1-12 hour\n    console.log(time)\n    const timeList = time.split(':')\n    let hour = parseInt(timeList[0])\n    let minutes = timeList[1]\n    var suffix  = hour >= 12 ? \"PM\":\"AM\"\n\n    console.log(11%12)\n    hour = ((hour+11)%12+1)+':'+minutes+\" \"+ suffix\n    return hour\n\n  }\n\n  checkUser = (personList) => {\n    // This will check if a users exist in a list and will return true or false\n    // The personList is a list of dictionary of users\n    let personListId = []\n    for (let i = 0; i<personList.length; i++){\n      const userId = personList[i].id\n      personListId.push(userId)\n    }\n\n    return personListId.includes(this.props.curId)\n  }\n\n  sendJoinUserEvent = (userId, eventId, socialCalCellId )=> {\n    // This will be used to send the userId and the event Id to the websocket\n    console.log(userId, eventId)\n\n    ExploreWebSocketInstance.sendSocialEventParticipate(userId, eventId, socialCalCellId)\n  }\n\n\n  sendLeaveUserEvent = (userId, eventId, socialCalCellId) => {\n    // This willb e sued to sne dthe useId and the eventid to the websocket\n    // so that you can remove some from an event because they want to leave\n\n    console.log(userId, eventId)\n    ExploreWebSocketInstance.sendSocialEventLeave(userId, eventId, socialCalCellId)\n  }\n\n  onCoverViewClick = (eventId) => {\n    console.log(eventId)\n    this.props.history.push(\"/socialcal/event/\"+eventId)\n  }\n\n\n  render() {\n    console.log(this.props)\n    console.log(new Date(this.props.cellDay))\n    const data = [\n      {\n        title: 'Ant Design Title 1',\n      },\n      {\n        title: 'Ant Design Title 2',\n      },\n      {\n        title: 'Ant Design Title 3',\n      },\n      {\n        title: 'Ant Design Title 4',\n      },\n        ];\n    return (\n\n        <div className = 'coverCellBox'>\n        <List\n          itemLayout=\"horizontal\"\n          dataSource={this.props.events}\n          className = 'coverCellBoxList'\n          renderItem={item => (\n            <List.Item\n            className = 'coverCellBoxItem'\n            >\n              <div className = 'coverCellEventText'>\n                <span> {this.capitalize(item.title)} </span>\n                <span className = 'socialEventTime'>\n                <br />\n                <img src = {clock} className = 'socialEventClock' />\n                {this.timeFormater(item.start_time)}-\n                {this.timeFormater(item.end_time)}\n                </span>\n                <br />\n                <div className = 'coverEventCapacity'>\n                <div className = 'coverEventNumber'>\n                <img src ={userIcon} className = 'socialUserIcon' />\n                {item.persons.length}\n                </div>\n                  <div className = 'avatarContainer'>\n                  <Liking like_people ={item.persons} />\n                  </div>\n                </div>\n\n                {dateFns.isAfter(dateFns.endOfDay(new Date(this.props.cellDay)), new Date())?\n                  <div>\n                  {\n                    this.checkUser(item.persons) ?\n                      item.host.id === this.props.curId ?\n                    <div className = 'alreadyJoinButtonCoverHost'>\n                      <span className = 'joinText'> Host </span>\n                    </div>\n\n                    :\n\n                    <div\n                    onClick = {() => this.sendLeaveUserEvent(this.props.curId, item.id, this.props.cellId)}\n                    className = 'alreadyJoinButtonCover'>\n                    <span className = 'leaveText'> Leave </span>\n                  </div>\n\n\n\n                       :\n\n                       <div\n                       onClick = {()=> this.sendJoinUserEvent(this.props.curId, item.id, this.props.cellId)}\n                       className = 'joinEventButtonCover'>\n                         <span className = 'joinText'> Join </span>\n                       </div>\n\n                  }\n\n\n\n\n                  <div\n                  onClick = {() => this.onCoverViewClick(item.id)}\n                  className = 'viewEventButtonCover'>\n                    <span className = 'viewText'> View </span>\n                  </div>\n                </div>\n\n                :\n\n                <div\n                onClick = {() => this.onCoverViewClick(item.id)}\n                className = 'alreadyViewButtonCoverPass'>\n                  <span className = 'viewText'> View </span>\n                </div>\n\n\n                }\n\n\n\n\n              </div>\n\n            </List.Item>\n          )}\n        />\n        </div>\n\n    )\n  }\n}\n\nexport default SocialCellCoverEvents;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/SocialCalendarFolder/SocialEventPostModal.js",["1509","1510","1511","1512","1513","1514","1515","1516","1517","1518","1519","1520","1521","1522","1523"],"import React from 'react';\nimport * as dateFns from 'date-fns';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport { authAxios } from '../../components/util';\nimport { Form } from '@ant-design/compatible';\nimport {\n  DatePicker,\n  TimePicker,\n  Button,\n  Input,\n  Select,\n  notification,\n  Modal,\n  Avatar } from 'antd';\n// import { connect } from 'react-redux';\nimport { AimOutlined, ArrowRightOutlined } from '@ant-design/icons';\nimport ExploreWebSocketInstance from '../../exploreWebsocket';\nimport NotificationWebSocketInstance from '../../notificationWebsocket';\n\nconst { TextArea } = Input\n\nconst { Option } = Select;\n\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 8 },\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 16 },\n  },\n};\n\n\nclass SocialEventPostModal extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      title: '',\n      content: '',\n      timeStart: \"12:00 AM\",\n      timeEnd: \"12:30 AM\",\n      location: '',\n    }\n  }\n\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  handleChange = (values) => {\n    this.setState({[values.target.name]: values.target.value})\n  }\n\n  timeConvert = (time) => {\n    // This function will take in a time and then covert the time to\n    // a 1-24 hour hour so that it cna be used to add into the\n    // date and be submited\n    let hour = parseInt(time.substring(0,2))\n    let minutes = time.substring(3,5)\n    let ampm = time.substring(5,8)\n\n    let convertedTime = ''\n\n    if (time.includes('PM')){\n      if (hour !==  12){\n        hour = hour + 12\n      }\n    } else if (time.includes('AM')){\n      if(hour === 12){\n        hour = 0\n      }\n    }\n\n    const timeBundle = hour.toString()+':'+minutes.toString()+':00'\n\n    return timeBundle\n\n  }\n\n  onHandleEventSubmit = () => {\n    console.log(this.state)\n    console.log(this.props.curDate)\n    const date = dateFns.format(new Date(this.props.curDate), 'yyyy-MM-dd')\n\n    const startTime = this.timeConvert(this.state.timeStart)\n    const endTime = this.timeConvert(this.state.timeEnd)\n\n\n  const eventObj = {\n    // This gonna get send out to the backend\n    // We would also need the host of the calendar which is calOwner\n    title: this.state.title,\n    content: this.state.content,\n    startTime: startTime,\n    endTime: endTime,\n    location: this.state.location,\n    curId: this.props.curId,\n    calOwner: this.props.calendarOwner,\n    date: date\n  }\n\n  const displayObj = {\n    // This is used to display to the public\n    title: this.state.title,\n    content: this.state.content,\n    startTime: this.state.timeStart,\n    endTime: this.state.timeEnd,\n    location: this.state.location,\n    curId: this.props.curId,\n    date: date\n  }\n\n  // This will be used to send objects to the user channel (you can technically do\n//  it with just axius but it is a bit easier )\n\n\n  // Accomodate for when the person posting the event is not the calendar own but the\n  // calendar owner friend. First you will check if the calendarownerId is the same\n  // as the curId. If they are the same then that means that the owner is posting on\n  // their own calander however, if they are not the same then you will have to\n  // ask permission of the social calendar owner\n\n  // Two ways:\n  // 1) either attach the event object with the notificaiton and when the owner approves\n  //  the event object will be created\n  // 2) Make the event object first then put a non accepted field on it and put a\n  // ternary operator on teh social cal for non approvaed events. When the owner\n  // accepts on notification you will then change the non accepted to accepted\n  // then it will show up on social cal.\n\n\n  if(this.props.curId === this.props.calendarOwner){\n    ExploreWebSocketInstance.sendSocialEvent(eventObj)\n    this.onPendingNotification(\"bottomRight\", displayObj)\n  } else {\n    NotificationWebSocketInstance.sendPendingSocialEvent(eventObj)\n    const calOwner = this.props.calOwnerUsername\n    this.onPendingNotification(\"bottomRight\", calOwner)\n  }\n\n  this.setState({\n    title: '',\n    content: '',\n    timeStart: \"12:00 AM\",\n    timeEnd: \"12:30 AM\",\n    location: '',\n  })\n  this.props.close()\n\n  }\n\n  onPendingNotification = (placement, calOwner) => {\n    notification.info({\n      message: \"Request Sent.\",\n      description:\n        'You sent a request to add a social event on '+calOwner+'\\'s social calendar.',\n      placement,\n    });\n  }\n\n  openNotification = (placement, info) => {\n    // The info parameter will be used to add stuff into the descrption\n\n    const title = this.capitalize(info.title)\n\n  notification.info({\n    message: \"New Social Event Posted\",\n    description:\n      'You added an public event '+title+' on '+info.startTime+' to '+info.endTime,\n    placement,\n  });\n};\n\n  onStartTimeChange = (time) => {\n    console.log(time)\n    // You basically want the end time to be 30 mins ahead of the starttime\n    // so you want to check if it is and then change the state accordingly\n    let startHour = parseInt(time.substring(0,2))\n    let startMin = parseInt(time.substring(3,5))\n    let ampm = time.substring(5,8)\n    let endHour = parseInt(this.state.timeEnd.substring(0,2))\n    let endMin = parseInt(this.state.timeEnd.substring(3,5))\n    let endTime = ''\n    console.log(startHour, endHour)\n    // These if statement here is to change the start time values from 1-12 todo\n    // 1-24 for the start time\n    if (time.includes('PM')){\n      if (startHour !==  12){\n        startHour = startHour + 12\n      }\n    } else if (time.includes('AM')){\n      if(startHour === 12){\n        startHour = 0\n      }\n    }\n    // These if statements here is to change the end time values from 1-2 to\n    // 1-24 for the end time\n    if (this.state.timeEnd.includes('PM')){\n      if (endHour !==  12){\n        endHour = endHour + 12\n      }\n    } else if (this.state.timeEnd.includes('AM')){\n      if(endHour === 12){\n        endHour = 0\n      }\n    }\n\n\n\n    if (startHour < endHour){\n      this.setState({\n        timeStart: time,\n      })\n    } else if ( startHour === endHour ){\n      if (startMin < endMin){\n        this.setState({\n          timeStart: time,\n        })\n      } else if (startMin > endMin){\n        // If they are the same time what do I do?\n        endMin = \"00\"\n        endHour = startHour + 1\n        console.log(startHour)\n        console.log(endHour)\n        if (startHour === 11 && ampm === ' AM'){\n          endTime =   '12:' + endMin + ' PM'\n        } else if (startHour === 23 && ampm === ' PM'){\n          endTime =  '12:' + endMin + ' AM'\n        } else {\n          if (endHour < 10){\n            endHour = '0'+endHour\n          } else {\n            if(ampm === ' AM'){\n              endHour = endHour\n            } else if (ampm === ' PM'){\n              endHour = endHour-12\n              if (endHour < 10){\n                endHour = '0'+endHour\n              }\n            }\n          }\n          endTime = endHour + ':'+endMin+ampm\n\n        }\n\n\n\n        console.log(time, endTime)\n        this.setState({\n          timeStart:time,\n          timeEnd: endTime\n        })\n      } else if (startMin === endMin){\n        // This is the case where the times are identical to each other\n        // REMEMBER THAT ENDHOUR AND STARTHOUR ARE USING THE 1-24 TIME\n        console.log(startHour, endHour)\n        if (startHour === 0 && ampm === ' AM' && startMin === 0 ){\n          endTime = '12:30 AM'\n        } else if (startHour === 12 && ampm === ' PM' && startMin === 0){\n          endTime = '12:30 PM'\n        } else {\n          if (startMin === 30){\n            endMin = '00'\n            if (startHour === 12){\n              endHour = '01'\n              endTime = endHour + ':'+endMin+' PM'\n            } else if (startHour === 11 && ampm === ' AM'){\n                endTime =   '12:' + endMin + ' PM'\n              } else if ((startHour-12) === 11 && ampm === ' PM'){\n                endTime =  '12:' + endMin + ' AM'\n              }\n            else {\n              console.log(endHour)\n              endHour = startHour +1\n                if (endHour<10){\n                    endHour = '0'+endHour\n                } else {\n                  if(ampm === ' AM'){\n                    endHour = endHour\n                  } else if (ampm === ' PM'){\n                    endHour = endHour-12\n                    if (endHour < 10){\n                      endHour = '0'+endHour\n                    }\n                  }\n                }\n              endTime = endHour + ':' +endMin+ampm\n            }\n          } else if (startMin === 0){\n            endMin = '30'\n            console.log(ampm)\n            if (endHour<10){\n                endHour = '0'+endHour\n            } else {\n              if(ampm === ' AM'){\n                console.log('am')\n                endHour = endHour\n              } else if (ampm === ' PM'){\n                console.log('pm')\n                if (endHour === 12){\n                  endHour = 12\n                }else {\n                  endHour = endHour-12\n                  if (endHour < 10){\n                    endHour = '0'+endHour\n                  }\n                }\n              }\n            }\n            endTime = endHour + ':'+endMin +ampm\n          }\n        }\n\n\n\n        this.setState({\n          timeStart:time,\n          timeEnd: endTime\n        })\n\n      }\n\n\n      } else if ( startHour > endHour ){\n        // let startHour = parseInt(time.substring(0,2))\n        // let startMin = parseInt(time.substring(3,5))\n\n        console.log(startHour, startMin, ampm)\n        if (startHour === 11 && ampm === ' AM' && startMin === 30){\n          endTime =   '12:00 PM'\n        } else if (startHour === 23 && ampm === ' PM' && startMin === 30){\n          endTime =  '12:00 AM'\n        } else {\n          if (startMin === 30){\n            startMin = \"00\"\n            startHour = startHour + 1\n          } else if (startMin !== 30){\n            startMin = '30'\n          }\n          if (startHour < 10){\n            startHour = '0'+startHour\n          } else{\n            if(ampm === ' AM'){\n              startHour = startHour\n            } else if (ampm === ' PM'){\n              startHour = startHour-12\n              if (startHour < 10){\n                if (startHour === 0){\n                  startHour = '12'\n                } else{\n                  startHour = '0'+startHour\n                }\n\n              }\n            }\n          }\n\n          endTime = startHour + ':'+startMin+ampm\n        }\n\n\n\n\n        this.setState({\n          timeStart: time,\n          timeEnd: endTime\n        })\n      }\n    }\n\n    onEndTimeChange = (time) => {\n      console.log(time)\n      this.setState({\n        timeEnd: time\n      })\n    }\n\n    renderStartTime = () => {\n      const timeFormat = \"hh:mm a\"\n      const time = []\n      let start = dateFns.startOfDay(new Date())\n      let startHour = dateFns.getHours(new Date())\n      let startMins = dateFns.getMinutes(new Date())\n      for (let i = 0; i< 48; i++){\n        const cloneTime = startHour + ':' + startMins\n        time.push(\n          <Option key = {dateFns.format(start, timeFormat)}>{dateFns.format(start, timeFormat)}</Option>\n        )\n        start = dateFns.addMinutes(start, 30)\n      }\n      console.log(time)\n      return time\n    }\n\n\n    renderEndTime = () => {\n      // So for rendering the tiem for the end time, you first want to get the\n      // time of the starting time so that you can get the time afterwards\n      // but since all the time selections are strings we must first convert to ints\n      // and the time after PM to plus 12 more so that you can compare. So you would\n      // get the startTime in the states and convert it to int and all that stuff and then\n      // you get the list of all the times and then convert to ints and then compare with the state\n      // time, if it is after then you put it in the list if not then you dont (remember to put them\n    // in a option tag)\n      const baseTime = this.renderStartTime()\n      let endTime = []\n\n      let setHour = ''\n      let setMin = ''\n\n      if (this.state.timeStart.includes(\"PM\")){\n        setHour = parseInt(this.state.timeStart.substring(0,2))\n        setMin = parseInt(this.state.timeStart.substring(3,5))\n        if (setHour !== 12){\n          setHour = setHour + 12\n      }} else if (this.state.timeStart.includes(\"AM\")){\n        setHour = parseInt(this.state.timeStart.substring(0,2))\n        setMin = parseInt(this.state.timeStart.substring(3,5))\n        if (setHour === 12){\n          setHour = 0\n        }\n      }\n\n      for(let i = 0; i< baseTime.length; i++){\n        if (baseTime[i].key.includes('PM')){\n          let hour = parseInt(baseTime[i].key.substring(0,2))\n          if (hour !== 12){\n            hour = hour+12\n          }\n          const min = baseTime[i].key.substring(3,5)\n          if (setHour < hour){\n            endTime.push(\n              <Option key= {baseTime[i].key}>{baseTime[i].key}</Option>\n            )} else if (setHour === hour){\n              if(setMin < min){\n                endTime.push(\n                  <Option key= {baseTime[i].key}>{baseTime[i].key}</Option>\n                )\n              }\n            }\n          } else if (baseTime[i].key.includes(\"AM\")) {\n          let hour = parseInt(baseTime[i].key.substring(0,2))\n          if (hour === 12){\n            hour = 0\n          }\n          const min = baseTime[i].key.substring(3,5)\n          if(setHour < hour){\n            endTime.push(\n              <Option key= {baseTime[i].key}>{baseTime[i].key}</Option>\n            )} else if (setHour === hour){\n              if(setMin < min){\n                endTime.push(\n                  <Option key= {baseTime[i].key}>{baseTime[i].key}</Option>\n                )\n              }\n            }\n          }\n        }\n        return (endTime)\n      }\n\n\n\n  render() {\n    // For events I don't think we will be needing channels because, when we move\n    // between profiles and newsfeed, it kinda refershs each time so the events\n    // just shows up, so for the evnets you can just make it and sent it to the redux\n    // ... maybe notificaitons are\n    // sent when you make an event --> when the user clicks on the notificaiton\n    // this will direct the user to the event page. The page will be its own channel\n    // its like it own big chat\n\n    // This\n    console.log(this.props)\n    console.log(this.state)\n    let curDate = ''\n    if (this.props.curDate){\n      curDate = dateFns.format(new Date(this.props.curDate), 'MMMM d, yyyy')\n    }\n\n    const startChildren = this.renderStartTime();\n    const endChildren = this.renderEndTime();\n\n    return(\n      <Modal\n      onCancel = {this.props.close}\n      visible = {this.props.view}\n      bodyStyle={{padding:'0px'}}\n      onOk = {this.onHandleEventSubmit}\n      >\n      Add Social Event\n      <br />\n      {curDate}\n        <Form\n        onChange = {this.handleChange}\n        >\n          <Form.Item>\n            <Input\n            name = 'title'\n            placeholder = 'Title'\n            value = {this.state.title}\n            />\n          </Form.Item>\n\n          <Form.Item>\n            <TextArea\n            name = 'content'\n            placeholder = 'Content'\n            value = {this.state.content}\n            />\n          </Form.Item>\n\n          <Form.Item>\n            <TextArea\n            name = 'location'\n            placeholder = 'Location'\n            value = {this.state.location}\n            />\n          </Form.Item>\n\n          <Form.Item>\n          <Select\n          name = 'timeStart'\n          className = ''\n          style={{ width: 100 }}\n          showArrow  = {false}\n          onChange = {this.onStartTimeChange}\n          value = {this.state.timeStart}>\n            {startChildren}\n          </Select>\n          <ArrowRightOutlined />\n          <Select\n          className = ''\n          name = 'timeEnd'\n          style={{ width: 100 }}\n          showArrow  = {false}\n          onChange = {this.onEndTimeChange}\n          value = {this.state.timeEnd}>\n            {endChildren}\n          </Select>\n          </Form.Item>\n        </Form>\n      </Modal>\n    )\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    curId: state.auth.id\n  }\n}\n\nexport default connect(mapStateToProps)(SocialEventPostModal);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/SocialCalendarFolder/SocialUploadPicModal.js",["1524","1525","1526"],"import React, { useState } from 'react';\nimport { Upload } from 'antd';\nimport { connect } from 'react-redux';\nimport {  Modal, Avatar } from 'antd';\n// import ImgCrop from 'antd-img-crop';\nimport { PlusOutlined } from '@ant-design/icons';\nimport './SocialCalCSS/SocialCellPage.css'\n\n\nfunction getBase64(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = error => reject(error);\n  });\n}\n\n\nclass SocialUploadPicModal extends React.Component{\n\n  state = {\n    previewVisible: false,\n    previewImage: '',\n    previewTitle: '',\n    fileList: [],\n  };\n\n  // Handle cancel will just be canceling the pic\n  handleCancel = () => this.setState({ previewVisible: false });\n\n  handleClose = () => {\n    //This will be closing the modal itself\n    this.setState({\n      previewVisible: false,\n      fileList:[],\n    })\n    this.props.close()\n\n  }\n\n  handleSubmit = () => {\n    //This will handle the submiting of the pictures\n    this.props.onSubmit(this.state.fileList)\n\n      this.setState({\n        previewVisible: false,\n        fileList:[],\n      })\n\n  }\n\n  handlePreview = async file => {\n   if (!file.url && !file.preview) {\n     file.preview = await getBase64(file.originFileObj);\n   }\n\n   this.setState({\n     previewImage: file.url || file.preview,\n     previewVisible: true,\n     previewTitle: file.name || file.url.substring(file.url.lastIndexOf('/') + 1),\n   });\n };\n\n\n handleChange = ({ fileList }) => this.setState({ fileList });\n\n\n  render() {\n\n    console.log(this.state.fileList)\n    console.log(this.props)\n\n    const { previewVisible, previewImage, fileList, previewTitle } = this.state;\n    const uploadButton = (\n      <div>\n        <PlusOutlined />\n        <div className=\"ant-upload-text\">Upload</div>\n      </div>\n    );\n\n\n    return (\n      <Modal\n      visible = {this.props.view}\n      onCancel ={this.handleClose}\n      onOk = {() => this.handleSubmit()}\n      >\n        <div className=\"clearfix\">\n         <Upload\n           action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\n           listType=\"picture-card\"\n           fileList={fileList}\n           onPreview={this.handlePreview}\n           onChange={this.handleChange}\n         >\n           {fileList.length >= 8 ? null : uploadButton}\n         </Upload>\n         <Modal\n           visible={previewVisible}\n           title={previewTitle}\n           footer={null}\n           onCancel={this.handleCancel}\n         >\n           <img alt=\"example\" style={{ width: '100%' }} src={previewImage} />\n         </Modal>\n       </div>\n      </Modal>\n    )\n  }\n}\n\n\n\nexport default SocialUploadPicModal;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/comments/comments.js",["1527"],"import { Comment, Tooltip, List, Avatar } from 'antd';\nimport moment from 'moment';\nimport React from \"react\";\n\n\nclass Comments extends React.Component {\n\n  state = {\n\n  }\n\n\n\n  render() {\n    console.log(this.props)\n\n    const data = [\n      {\n        actions: [<span key=\"comment-list-reply-to-0\">Reply to</span>],\n        author: 'Han Solo',\n        avatar: 'https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png',\n        content: (\n          <p>\n            We supply a series of design principles, practical patterns and high quality design\n            resources (Sketch and Axure), to help people create their product prototypes beautifully and\n            efficiently.\n          </p>\n        ),\n        datetime: (\n          <Tooltip\n            title={moment()\n              .subtract(1, 'days')\n              .format('YYYY-MM-DD HH:mm:ss')}\n          >\n            <span>\n              {moment()\n                .subtract(1, 'days')\n                .fromNow()}\n            </span>\n          </Tooltip>\n        ),\n      },\n      {\n        actions: [<span key=\"comment-list-reply-to-0\">Reply to</span>],\n        author: 'Han Solo',\n        avatar: 'https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png',\n        content: (\n          <p>\n            We supply a series of design principles, practical patterns and high quality design\n            resources (Sketch and Axure), to help people create their product prototypes beautifully and\n            efficiently.\n          </p>\n        ),\n        datetime: (\n          <Tooltip\n            title={moment()\n              .subtract(2, 'days')\n              .format('YYYY-MM-DD HH:mm:ss')}\n          >\n            <span>\n              {moment()\n                .subtract(2, 'days')\n                .fromNow()}\n            </span>\n          </Tooltip>\n        ),\n      },\n    ];\n\n\n\n    return (\n      <div class=\"fontTest maxHeightPost\">\n        <List\n          className=\"comment-list\"\n          header={`${this.props.newsfeed.data.post_comments.length} replies`}\n          itemLayout=\"horizontal\"\n          dataSource={this.props.newsfeed.data.post_comments}\n          renderItem={item => (\n            <li>\n              <Comment\n                actions={item.actions}\n                author={item.name}\n                avatar={\n\n                  <Avatar\n                  src={\"http://127.0.0.1:8000\"+item.commentUser.profile_picture}\n                  alt=\"Han Solo\"\n                  />\n                }\n                content={item.body}\n                datetime={item.datetime}\n              />\n            </li>\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Comments;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/comments/PreviewComments.js",["1528","1529","1530","1531","1532","1533"],"import { Comment, Tooltip, List, Divider } from 'antd';\nimport moment from 'moment';\nimport React, { createElement } from 'react';\nimport './PreviewComments.css'\nimport { DislikeOutlined, LikeOutlined, DislikeFilled, LikeFilled } from '@ant-design/icons';\nclass Comments extends React.Component {\n\n  state = {\n    likes:0,\n    dislike:0,\n    action:'',\n  };\n\n  like = () => {\n    this.setState({\n      likes:this.state.likes+1,\n      action:'liked'\n    });\n  };\n\n\n  dislike = () => {\n    this.setState({\n      dislike:this.state.dislike+1,\n      action:'disliked'\n    });\n  };\n\n\n\n   render(){\n     console.log(this.props.newsfeed.data.post_comments)\n     const actions=[\n\n       <Tooltip key=\"comment-basic-like\" title=\"Like\">\n\n\n         <LikeFilled/>\n\n        <span className=\"comment-action\">{2}</span>\n\n    </Tooltip>,\n\n    <span key=\"comment-basic-reply-to\">Reply to</span>\n\n\n     ];\n\n     const data = [\n  {\n\n    datetime: (\n      <Tooltip\n        title={moment().subtract(2, \"days\").format(\"YYYY-MM-DD HH:mm:ss\")}\n      >\n        <span>{moment().subtract(2, \"days\").fromNow()}</span>\n      </Tooltip>\n    )\n  }\n];\n\n    return (\n      <div>\n      <List\n  className=\"comment-list\"\n  itemLayout=\"horizontal\"\n  dataSource={this.props.newsfeed.data.post_comments.slice(0, 2)}\n  renderItem={(item) => (\n    <li>\n      <Comment\n\n      actions={actions}\n      author={item.name}\n      avatar={'http://127.0.0.1:8000'+item.commentUser.profile_picture}\n      content={item.body}\n      datetime={\"few seconds ago\"}\n      />\n    </li>\n  )}\n/>\n      </div>\n    );\n  }\n}\n\nexport default Comments;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EventSyncForms/EventSyncReactForm.js",["1534","1535","1536","1537","1538","1539","1540","1541","1542","1543","1544"],"import React from 'react';\nimport * as dateFns from 'date-fns';\nimport {connect} from 'react-redux';\nimport { Form } from '@ant-design/compatible';\nimport '@ant-design/compatible/assets/index.css';\nimport { Select, Radio, Button, Input, List, Avatar } from 'antd';\nimport 'antd/dist/antd.css';\nimport '../PersonalCalCSS/EventSync.css';\nimport { FireTwoTone } from '@ant-design/icons';\nimport DetailSwitch from './DetailSwitch.js';\n\n\nconst { Option } = Select\n\nclass EventSyncReactForm extends React.Component {\n  constructor (props){\n    super(props);\n    // The time value will be whichever time range decide, 1 for week range\n    // 2 for the next day\n    this.state = {\n      rangeChoice: '',\n      endDate: '',\n      friend: '',\n      search: '',\n      startDate: new Date(),\n    }\n  }\n\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  onHandleChange = (e) => {\n    this.setState ({\n      search: e.target.value\n    })\n  }\n\n  onChange = e => {\n    console.log(e.target)\n    const startDate = dateFns.startOfDay(this.state.startDate)\n    // console.log(startDate)\n    // console.log(new Date(e.target.value))\n\n    this.setState({\n      rangeChoice: e.target.value.rangeChoice,\n      endDate: e.target.value.endDate,\n    });\n  };\n\n  onFriendChange = (friend) => {\n    console.log(friend)\n    this.setState({\n      friend: friend\n    })\n\n  }\n\n  onFriendClick = (friend) => {\n    console.log(friend)\n  }\n\n  renderFriends = () => {\n    let friends = []\n    if(this.props.friends){\n      for (let i = 0; i < this.props.friends.length; i++ ){\n        friends.push(\n          <Option\n          key = {this.props.friends[i]}\n          value = {this.props.friends[i]}>\n            {this.props.friends[i]}\n          </Option>\n        )\n      }\n    }\n    console.log(friends)\n\n  }\n\n\n  renderEndDay = (range) => {\n    // This function will pretty much get the endDay depending on\n    // which week or day is selected\n    const startDate = dateFns.startOfDay(this.state.startDate)\n\n    let endDate = ''\n    let dayStartDate = ''\n    let statePack = {}\n    if (range === 'week' ) {\n      endDate = dateFns.addWeeks(startDate,1)\n      endDate = dateFns.format(endDate, 'yyyy-MM-dd')\n      statePack = {\n        rangeChoice: 'week',\n        endDate: endDate\n      }\n      return statePack\n    } else if (range === 'day'){\n      endDate = dateFns.addDays(startDate, 2)\n      endDate = dateFns.format(endDate, 'yyyy-MM-dd')\n      statePack = {\n        rangeChoice: 'day',\n        endDate: endDate\n      }\n      return statePack\n\n    }\n  }\n\n  onClear = () => {\n    this.setState({\n      friend: '',\n      endDate: ''\n    })\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    let submitContent = {}\n    if (this.state.rangeChoice === 'day'){\n      const newStartDate = dateFns.addDays(this.state.startDate, 1)\n      submitContent = {\n        friend: this.state.friend,\n        startDate: newStartDate,\n        endDate: this.state.endDate\n      }\n    } else if (this.state.rangeChoice === 'week'){\n      submitContent = {\n        friend: this.state.friend,\n        startDate: this.state.startDate,\n        endDate: this.state.endDate\n      }\n    }\n    console.log(submitContent)\n    this.onClear()\n    this.props.onSubmit(submitContent)\n\n  }\n\n\n\n  render() {\n    console.log(this.props)\n    console.log(this.state)\n    let friends = this.props.friends\n    console.log(friends)\n    let friend = this.state.search.trim().toLowerCase()\n    if (friend.length > 0){\n      friends = friends.filter(val => val.username.toLowerCase().match(friend))\n    }\n\n    const radioStyle = {\n      display: 'block',\n      height: '30px',\n      lineHeight: '30px',\n    };\n\n    const friendListChild = this.renderFriends()\n\n\n    return (\n\n      <DetailSwitch {...this.props}/>\n\n    )\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    friends: state.auth.friends,\n    currentProfile: state.auth.profilePic,\n  }\n}\n\n\nexport default connect(mapStateToProps) (EventSyncReactForm);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/AddCalEventForms/CalendarForm.js",["1545","1546","1547","1548","1549","1550"],"import React, {useState, useEffect } from 'react';\nimport  { Redirect } from 'react-router-dom';\nimport {Container} from 'reactstrap';\nimport {uploadPost} from '../../../api';\nimport axios from 'axios';\nimport { authAxios } from '../../../components/util';\nimport { connect } from \"react-redux\";\nimport { DatePicker } from 'antd';\nimport * as dateFns from 'date-fns';\nimport * as navActions from '../../../store/actions/nav'\nimport * as calendarActions from '../../../store/actions/calendars'\n\n\n\n\n\n\nconst CalendarForm = (props) => {\n  // formData = new FormData();\n  const {token} = props;\n  const[title, setTitle] = useState('');\n  const[content, setContent] = useState('');\n  const[start_time,setStart] = useState(null);\n  const[end_time, setEnd ] = useState(null);\n  const[location, setLocation] = useState('');\n  console.log(title)\n  console.log(content)\n  console.log(start_time)\n  console.log(end_time)\n  console.log(location)\n\n  const make_post=(post) =>{\n  \tlet data = uploadPost(post);\n  \tsetTitle('')\n    setContent('')\n    setStart(null)\n    setEnd(null)\n    setLocation('')\n  \treturn data;\n  }\n\n  const uploadPost =(post) =>{\n   const data = new FormData();\n   // console.log(dateFns.format(new Date(post.end_time), '%Y-%m-%d %H:%M:%S'))\n   data.append(\"title\", post.title);\n   data.append(\"content\", post.content);\n   data.append(\"start_time\", dateFns.format(new Date(post.start_time), 'yyyy-MM-dd hh:mm:ss'));\n   data.append(\"end_time\", dateFns.format(new Date(post.end_time), 'yyyy-MM-dd hh:mm:ss'));\n   data.append(\"location\", post.location);\n   data.append(\"person\", post.person);\n\n\n   fetch('http://127.0.0.1:8000/mycalendar/events/create/',{\n  \tmethod: 'POST',\n      headers: {\n  \t    Authorization: `Token ${localStorage.getItem('token')}`,\n      },\n      body:data\n  })\n   .then (res =>res.json())\n   .then(json =>{\n     props.closePopup()\n  \t return json\n   })\n  }\n\n  const  onFormSubmit = (e) =>{\n\t\te.preventDefault()\n    console.log(e.err)\n    const person = [props.id]\n\t\tif (title && content){\n\t\t\tconst post = {\n\t\t\t\t'title': title,\n\t\t\t\t'content': content,\n        'start_time': start_time,\n        'end_time': end_time,\n        'location': location,\n        'user_id': props.id,\n\t\t\t\t'person': person,\n\t\t\t};\n\t\t\tmake_post(post);\n\n\n\t\t}\n  }\n  // basically all you reall need is an onchange, and value in your input fields\n  // and you have to use e btw\n  const onChangeTitle = e => setTitle(e.target.value)\n  const onChangeContent = e => setContent(e.target.value)\n  const onChangeStart = date => setStart(date)\n  const onChangeEnd = date => setEnd (date)\n  const onChangeLocation = e =>setLocation(e.target.value)\n\n  console.log(props)\n  const dateFormat = ''\n  return (\n\t<Container style={{paddingTop: '10',zIndex:'-1'}}>\n\t  <form onSubmit={onFormSubmit}>\n\t    <div className=\"upload-container\">\n\t\t\t\t<div>\n        Title\n        <input type=\"text\" name=\"title\" onChange= {onChangeTitle} value ={title}/>\n        <br />\n        Content\n\t\t\t\t<input type=\"text\" name=\"content\" onChange= {onChangeContent}value={content}\n\t\t\t\t style={{width: '300px', height:'100px'}}/>\n        <br />\n        Start Date\n\t\t\t\t<DatePicker name = \"start\" onChange={onChangeStart} value = {start_time} format = {dateFormat}/>\n        <br />\n        End Date\n        <DatePicker name = \"end\" onChange={onChangeEnd} value = {end_time} format ={dateFormat}/>\n        <br />\n        Location\n        <input type=\"text\" name=\"location\" onChange= {onChangeLocation} value ={location}/>\n\t\t\t\t<div className=\"submit\">\n                <button type=\"submit\" onClick={onFormSubmit}>Post</button>\n\t\t\t\t</div>\n\t\t\t\t</div>\n        </div>\n            </form>\n\t</Container>\n  );\n};\n\n\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token,\n\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addEvents: (events) => dispatch(calendarActions.addEvent(events)),\n    closePopup: () => dispatch(navActions.closePopup())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CalendarForm);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/AddCalEventForms/ReduxAddEventForm.js",["1551"],"import React from 'react';\nimport { reset, Field, reduxForm } from 'redux-form';\nimport { DatePicker } from 'antd';\n\nconst { MonthPicker, RangePicker } = DatePicker\n\n// The reason you want to get the props to change is because even though you are\n// adding stuff in and changing the values of the different events, the props does\n// not change if you dont make a change to it so therefore I am making a new form and\n// modifiying the modals to change the props\n// The reason also I switch to props is because with states, it doesnt change right\n// away when you edit events and later on we have to be working with sharing events\n// and stuff so states will not work\n\nconst renderField = (field) => {\n  return (\n  <input {...field.input} type = {field.type} placeholder = {field.placeholder} />\n  )\n}\n\nconst renderTimeField = (field) => {\n  return (\n    <div>\n    <RangePicker showTime format=\"YYYY-MM-DD HH:mm:ss\"/>\n    </div>\n  )\n}\n\n// this will delete the iunputs after submit\nconst afterSubmit = (result, dispatch) =>\n  dispatch(reset('add event'));\n\n\nclass ReduxAddEventForm extends React.Component {\n\n  render () {\n    const {handleSubmit, pristine, submitting, reset} = this.props\n    return (\n      <form onSubmit= {handleSubmit}>\n        <div>\n          <label htmlFor = 'title'> Titles</label>\n          <Field\n          name = 'title'\n          component= {renderField}\n          type= 'text'\n          />\n        </div>\n        <div>\n          <label htmlFor = 'content'> Content</label>\n          <Field name = 'content' component= {renderField} type= 'text' />\n        </div>\n        <div>\n          <label htmlFor = 'start_date'>Start Time</label>\n          <Field name = 'start_date' component= {renderField} type= 'date'/>\n        </div>\n        <div>\n          <label htmlFor = 'end_date'>End Time</label>\n          <Field name = 'end_date' component={renderField} type= 'date'/>\n        </div>\n        <div>\n          <label htmlFor = 'location'>Location</label>\n          <Field name = 'location' component= {renderField} type= 'text'/>\n        </div>\n        <div>\n        <Field\n        name = 'time'\n        type = 'text'\n        component = {renderTimeField} />\n        </div>\n        <button type = 'submit'>Submit</button>\n        <button type = 'button' disabled = {pristine || submitting} onClick = {reset}>\n        Clear Values\n        </button>\n      </form>\n    )\n  }\n}\n\n\nReduxAddEventForm = reduxForm ({\n  form: 'add event',\n  onSubmitSuccess: afterSubmit,\n})(ReduxAddEventForm);\n\nexport default ReduxAddEventForm;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/AddCalEventForms/ReactAddEventForm.js",["1552","1553","1554","1555","1556","1557","1558","1559","1560","1561","1562","1563","1564"],"import React from 'react';\nimport * as dateFns from 'date-fns';\nimport moment from 'moment';\nimport { connect } from \"react-redux\";\nimport { Form } from '@ant-design/compatible';\nimport { DatePicker, TimePicker, Button, Input, Select, Radio } from 'antd';\nimport { AimOutlined, ArrowRightOutlined } from '@ant-design/icons';\nimport '../PersonalCalCSS/ReactForm.css';\nimport '@ant-design/compatible/assets/index.css';\n\n\nconst { TextArea } = Input\n\nconst { MonthPicker, RangePicker } = DatePicker;\n\n\nconst { Option } = Select;\n\n\n\n\nconst rangeConfig = {\n  rules: [{ type: 'array', required: true, message: 'Please select time!' }],\n};\n\n// The reason for switching back to the antd form is because the redux form doenst\n// support time picker that well\n\nclass ReactAddEventForm extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      dateRange: null,\n      startDate: moment(new Date()),\n      endDate: moment(new Date()),\n      timeStart: \"12:00 AM\",\n      timeEnd: \"12:30 AM\",\n      title: '',\n      content: '',\n      location: '',\n      repeatCondition: 'none',\n      eventColor: '#1890ff',\n      error: false,\n      person: []\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n\n  handleChange = (values) => {\n    this.setState({ [values.target.name]: values.target.value})\n  }\n\n  onDateChange = (time) => {\n    this.setState({\n      dateRange: time\n    })\n  }\n\n  onStartDateChange = (time) => {\n    // This is to handle the onChange\n    let startDate = time\n    let endDate = this.state.endDate\n\n    console.log(dateFns.isAfter(new Date(startDate),new Date(endDate)))\n\n    if (dateFns.isAfter(new Date(startDate),new Date(endDate))){\n      console.log('test1')\n      this.setState({\n        startDate: time,\n        endDate: time,\n      })\n    } else {\n      console.log('test2')\n      this.setState({\n        startDate: time\n      })\n    }\n\n  }\n\n  onEndDateChange = (time) => {\n    console.log(time)\n    this.setState({\n      endDate: time\n    })\n  }\n\n  onStartTimeChange = (time) => {\n    console.log(time)\n    // You basically want the end time to be 30 mins ahead of the starttime\n    // so you want to check if it is and then change the state accordingly\n    let startHour = parseInt(time.substring(0,2))\n    let startMin = parseInt(time.substring(3,5))\n    let ampm = time.substring(5,8)\n    let endHour = parseInt(this.state.timeEnd.substring(0,2))\n    let endMin = parseInt(this.state.timeEnd.substring(3,5))\n    let endTime = ''\n    console.log(startHour, endHour)\n    // These if statement here is to change the start time values from 1-12 todo\n    // 1-24 for the start time\n    if (time.includes('PM')){\n      if (startHour !==  12){\n        startHour = startHour + 12\n      }\n    } else if (time.includes('AM')){\n      if(startHour === 12){\n        startHour = 0\n      }\n    }\n    // These if statements here is to change the end time values from 1-2 to\n    // 1-24 for the end time\n    if (this.state.timeEnd.includes('PM')){\n      if (endHour !==  12){\n        endHour = endHour + 12\n      }\n    } else if (this.state.timeEnd.includes('AM')){\n      if(endHour === 12){\n        endHour = 0\n      }\n    }\n\n\n\n    if (startHour < endHour){\n      this.setState({\n        timeStart: time,\n      })\n    } else if ( startHour === endHour ){\n      if (startMin < endMin){\n        this.setState({\n          timeStart: time,\n        })\n      } else if (startMin > endMin){\n        // If they are the same time what do I do?\n        endMin = \"00\"\n        endHour = startHour + 1\n        console.log(startHour)\n        console.log(endHour)\n        if (startHour === 11 && ampm === ' AM'){\n          endTime =   '12:' + endMin + ' PM'\n        } else if (startHour === 23 && ampm === ' PM'){\n          endTime =  '12:' + endMin + ' AM'\n        } else {\n          if (endHour < 10){\n            endHour = '0'+endHour\n          } else {\n            if(ampm === ' AM'){\n              endHour = endHour\n            } else if (ampm === ' PM'){\n              endHour = endHour-12\n              if (endHour < 10){\n                endHour = '0'+endHour\n              }\n            }\n          }\n          endTime = endHour + ':'+endMin+ampm\n\n        }\n\n\n\n        console.log(time, endTime)\n        this.setState({\n          timeStart:time,\n          timeEnd: endTime\n        })\n      } else if (startMin === endMin){\n        // This is the case where the times are identical to each other\n        // REMEMBER THAT ENDHOUR AND STARTHOUR ARE USING THE 1-24 TIME\n        console.log(startHour, endHour)\n        if (startHour === 0 && ampm === ' AM' && startMin === 0 ){\n          endTime = '12:30 AM'\n        } else if (startHour === 12 && ampm === ' PM' && startMin === 0){\n          endTime = '12:30 PM'\n        } else {\n          if (startMin === 30){\n            endMin = '00'\n            if (startHour === 12){\n              endHour = '01'\n              endTime = endHour + ':'+endMin+' PM'\n            } else if (startHour === 11 && ampm === ' AM'){\n                endTime =   '12:' + endMin + ' PM'\n              } else if ((startHour-12) === 11 && ampm === ' PM'){\n                endTime =  '12:' + endMin + ' AM'\n              }\n            else {\n              console.log(endHour)\n              endHour = startHour +1\n                if (endHour<10){\n                    endHour = '0'+endHour\n                } else {\n                  if(ampm === ' AM'){\n                    endHour = endHour\n                  } else if (ampm === ' PM'){\n                    endHour = endHour-12\n                    if (endHour < 10){\n                      endHour = '0'+endHour\n                    }\n                  }\n                }\n              endTime = endHour + ':' +endMin+ampm\n            }\n          } else if (startMin === 0){\n            endMin = '30'\n            console.log(ampm)\n            if (endHour<10){\n                endHour = '0'+endHour\n            } else {\n              if(ampm === ' AM'){\n                console.log('am')\n                endHour = endHour\n              } else if (ampm === ' PM'){\n                console.log('pm')\n                if (endHour === 12){\n                  endHour = 12\n                }else {\n                  endHour = endHour-12\n                  if (endHour < 10){\n                    endHour = '0'+endHour\n                  }\n                }\n              }\n            }\n            endTime = endHour + ':'+endMin +ampm\n          }\n        }\n\n\n\n        this.setState({\n          timeStart:time,\n          timeEnd: endTime\n        })\n\n      }\n\n\n      } else if ( startHour > endHour ){\n        // let startHour = parseInt(time.substring(0,2))\n        // let startMin = parseInt(time.substring(3,5))\n\n        console.log(startHour, startMin, ampm)\n        if (startHour === 11 && ampm === ' AM' && startMin === 30){\n          endTime =   '12:00 PM'\n        } else if (startHour === 23 && ampm === ' PM' && startMin === 30){\n          endTime =  '12:00 AM'\n        } else {\n          if (startMin === 30){\n            startMin = \"00\"\n            startHour = startHour + 1\n          } else if (startMin !== 30){\n            startMin = '30'\n          }\n          if (startHour < 10){\n            startHour = '0'+startHour\n          } else{\n            if(ampm === ' AM'){\n              startHour = startHour\n            } else if (ampm === ' PM'){\n              startHour = startHour-12\n              if (startHour < 10){\n                if (startHour === 0){\n                  startHour = '12'\n                } else{\n                  startHour = '0'+startHour\n                }\n\n              }\n            }\n          }\n\n          endTime = startHour + ':'+startMin+ampm\n        }\n\n\n\n\n        this.setState({\n          timeStart: time,\n          timeEnd: endTime\n        })\n      }\n    }\n\n\n\n  onEndTimeChange = (time) => {\n    console.log(time)\n    this.setState({\n      timeEnd: time\n    })\n  }\n\n  handleFriendChange = (value) => {\n    console.log(value)\n    this.setState({\n      person: value\n    })\n  }\n\n  handleValidation(){\n    // You will use this to disable or non disable the button, so because of that\n    // the true and false will be flipped\n    let title = this.state.title\n    let content = this.state.content\n    let location = this.state.location\n    let startDate = this.state.startDate\n    let endDate = this.state.endDate\n    let repeatCondition = this.state.repeatCondition\n    let errors = {}\n    let buttonDisabled = false\n\n    if (title === ''){\n      buttonDisabled = true\n      // errors['title'] = 'Cannot be empty'\n    }\n\n\n\n    if (startDate === null){\n      buttonDisabled = true\n\n    }\n\n    if (endDate === null){\n      buttonDisabled = true\n    }\n\n    if (dateFns.isAfter(new Date(startDate), new Date(endDate))){\n      buttonDisabled = true\n    } else if (repeatCondition === \"weekly\" &&\n      !dateFns.isSameWeek(new Date(startDate), new Date(endDate))\n    ) {\n      buttonDisabled = true\n    } else if (repeatCondition === \"daily\" &&\n      !dateFns.isSameDay(new Date (startDate), new Date(endDate))\n    ) {\n      buttonDisabled = true\n    }\n\n    console.log(buttonDisabled)\n    return buttonDisabled\n\n  }\n\n  onRed = () => {\n    let startDate = this.state.startDate\n    let endDate = this.state.endDate\n    let repeatCondition = this.state.repeatCondition\n\n    let boxcolor = false\n\n    if (dateFns.isAfter(new Date(startDate), new Date(endDate))){\n      boxcolor = true\n    } else if (repeatCondition === \"weekly\" &&\n      !dateFns.isSameWeek(new Date(startDate), new Date(endDate))\n    ) {\n      boxcolor = true\n    } else if (repeatCondition === \"daily\" &&\n      !dateFns.isSameDay(new Date (startDate), new Date(endDate))\n    ) {\n      boxcolor = true\n    }\n    return boxcolor\n  }\n\n  onClear = () => {\n    this.setState({\n      title: '',\n      content: '',\n      location: '',\n      error: false,\n      person: []\n    })\n  }\n\n  handleSubmit =(event) => {\n    event.preventDefault();\n      const submitContent = {\n        title: this.state.title,\n        content: this.state.content,\n        location: this.state.location,\n        start_date: this.state.startDate.toDate(),\n        end_date: this.state.endDate.toDate(),\n        start_time: this.state.timeStart,\n        end_time: this.state.timeEnd,\n        event_color: this.state.eventColor,\n        repeatCondition:this.state.repeatCondition,\n        person: this.state.person,\n      }\n      this.onClear()\n      this.props.onSubmit(submitContent)\n\n  }\n\n  onFinish = values => {\n    console.log('Success:', values);\n  };\n\n  onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n  };\n\n  renderShareListSelect = () => {\n    if(this.props.following !== undefined && this.props.followers !== undefined){\n\n      // This const is what determines the people you can share with.\n      // EVENTUALLY YOU\n      const friendList = this.props.following\n\n      let shareOptions = []\n\n      for (let friend = 0; friend< friendList.length; friend++ ){\n        shareOptions.push(\n          <Option value = {friendList[friend].username}\n          label = {this.capitalize(friendList[friend].username)}>\n            {this.capitalize(friendList[friend].username)}\n          </Option>\n        )\n      }\n\n      return shareOptions\n    }\n  }\n\n\n  renderStartTime = () => {\n    const timeFormat = \"hh:mm a\"\n    const time = []\n    let start = dateFns.startOfDay(new Date())\n    let startHour = dateFns.getHours(new Date())\n    let startMins = dateFns.getMinutes(new Date())\n    for (let i = 0; i< 48; i++){\n      const cloneTime = startHour + ':' + startMins\n      time.push(\n        <Option key = {dateFns.format(start, timeFormat)}>{dateFns.format(start, timeFormat)}</Option>\n      )\n      start = dateFns.addMinutes(start, 30)\n    }\n    console.log(time)\n    return time\n  }\n\n  renderEndTime = () => {\n    // So for rendering the tiem for the end time, you first want to get the\n    // time of the starting time so that you can get the time afterwards\n    // but since all the time selections are strings we must first convert to ints\n    // and the time after PM to plus 12 more so that you can compare. So you would\n    // get the startTime in the states and convert it to int and all that stuff and then\n    // you get the list of all the times and then convert to ints and then compare with the state\n    // time, if it is after then you put it in the list if not then you dont (remember to put them\n  // in a option tag)\n    const baseTime = this.renderStartTime()\n    let endTime = []\n\n    let setHour = ''\n    let setMin = ''\n\n    if (this.state.timeStart.includes(\"PM\")){\n      setHour = parseInt(this.state.timeStart.substring(0,2))\n      setMin = parseInt(this.state.timeStart.substring(3,5))\n      if (setHour !== 12){\n        setHour = setHour + 12\n    }} else if (this.state.timeStart.includes(\"AM\")){\n      setHour = parseInt(this.state.timeStart.substring(0,2))\n      setMin = parseInt(this.state.timeStart.substring(3,5))\n      if (setHour === 12){\n        setHour = 0\n      }\n    }\n\n    for(let i = 0; i< baseTime.length; i++){\n      if (baseTime[i].key.includes('PM')){\n        let hour = parseInt(baseTime[i].key.substring(0,2))\n        if (hour !== 12){\n          hour = hour+12\n        }\n        const min = baseTime[i].key.substring(3,5)\n        if (setHour < hour){\n          endTime.push(\n            <Option key= {baseTime[i].key}>{baseTime[i].key}</Option>\n          )} else if (setHour === hour){\n            if(setMin < min){\n              endTime.push(\n                <Option key= {baseTime[i].key}>{baseTime[i].key}</Option>\n              )\n            }\n          }\n        } else if (baseTime[i].key.includes(\"AM\")) {\n        let hour = parseInt(baseTime[i].key.substring(0,2))\n        if (hour === 12){\n          hour = 0\n        }\n        const min = baseTime[i].key.substring(3,5)\n        if(setHour < hour){\n          endTime.push(\n            <Option key= {baseTime[i].key}>{baseTime[i].key}</Option>\n          )} else if (setHour === hour){\n            if(setMin < min){\n              endTime.push(\n                <Option key= {baseTime[i].key}>{baseTime[i].key}</Option>\n              )\n            }\n          }\n        }\n      }\n      return (endTime)\n    }\n\n\n\n  render (){\n    // The name of the inputt values are important\n    // it allows for us to be able to input stuff into the form item\n    // because it is what connents to the onChange for the states\n    console.log(this.state)\n    console.log(this.props)\n    const startChildren = this.renderStartTime();\n    const endChildren = this.renderEndTime()\n    console.log(this.handleValidation())\n\n    const options = [\n    { label: 'Normal', value: 'none' },\n    { label: 'Weekly', value: 'weekly' },\n    { label: 'Daily', value: 'daily' },\n  ];\n    // for (let i = 10; i < 36; i++) {\n    //   children.push(<Option key={i.toString(36) + i}>{i.toString(36) + i}</Option>);\n    // }\n\n    return (\n      <Form\n      className =\"reactForm\"\n      style={{padding:'50px'}}\n      onSubmit = {this.handleSubmit}\n      onChange = {this.handleChange}\n       >\n        <Form.Item>\n         <Input\n         name = 'title'\n         className= 'reactTitle'\n         placeholder = 'Title'\n         value = {this.state.title}\n         style={{marginTop:'-5px'}}\n         maxLength = \"80\"\n         />\n       </Form.Item>\n\n\n        <Radio.Group\n          options={options}\n          name = 'repeatCondition'\n          onChange={this.handleChange}\n          value={this.state.repeatCondition}\n          optionType=\"button\"\n        />\n\n\n       <Form.Item\n           name=\"range-time-picker\"\n          {...rangeConfig}\n          style={{marginTop:'20px'}}\n           >\n           <i style={{marginLeft:'10px', marginRight:'21px'}} class=\"fas fa-clock\"></i>\n\n           <DatePicker\n           className = ''\n           placeholder = 'startTime'\n           onChange = {this.onStartDateChange}\n           value = {this.state.startDate}\n           suffixIcon={<div></div>}\n           style = {{width: '110px', marginRight:'15px'}}\n           />\n\n           {/*\n           <DatePicker\n           className = {` ${this.onRed() ? 'datePicker' : ''}`}\n           placeholder = 'endTime'\n           onChange = {this.onEndDateChange}\n           value = {this.state.endDate}\n           style = {{width: '110px '}}\n           allowClear = {false}\n           suffixIcon={<div></div>}\n           />\n           */}\n           <Select\n           name = 'timeStart'\n           className = ''\n           style={{ width: 100, marginRight:'15px' }}\n           showArrow  = {false}\n           onChange = {this.onStartTimeChange}\n           value = {this.state.timeStart}>\n             {startChildren}\n           </Select>\n\n           <Select\n           className = ''\n           name = 'timeEnd'\n           style={{ width: 100 }}\n           showArrow  = {false}\n           onChange = {this.onEndTimeChange}\n           value = {this.state.timeEnd}>\n             {endChildren}\n           </Select>\n         </Form.Item>\n\n\n\n       <Form.Item style={{marginTop:'-15px'}}>\n         <i style={{marginLeft:'10px', marginRight:'21px'}} class=\"fas fa-user-friends\"></i>\n         <Select\n           mode=\"multiple\"\n           style={{ width: '75%' }}\n           onChange={this.handleFriendChange}\n           value = {this.state.person}\n\n           placeholder=\"Add friends\"\n          >\n            {this.renderShareListSelect()}\n         </Select>\n\n       </Form.Item>\n\n       <div class=\"innerContainerPeople\">\n         <Form.Item name=\"Location\">\n           <i class=\"fas fa-globe-americas\"  style={{marginLeft:'10px', marginRight:'25px'}} ></i>\n          <Input style={{width:'50%',fontSize:'14px'}}\n           name = 'location'\n           placeholder = 'Location'\n           value = {this.state.location}\n           />\n        </Form.Item>\n        <AimOutlined style={{marginLeft:'15px', marginTop:'20px', fontSize:'20px', marginRight:'15px'}} className = 'aim'/>\n          <Input type = 'color' className = 'reactColor'\n            name = 'eventColor' defaultValue = '#1890ff'/>\n      </div>\n\n       <Form.Item name=\"Content\" style={{marginTop:'-20px'}}>\n\n        <TextArea\n        name = 'content'\n        placeholder= 'Event Description'\n        value = {this.state.content}\n        rows ={3}\n        style = {{width: '400px', marginLeft:'50px'}}/>\n\n      </Form.Item>\n\n\n\n        <Form.Item\n          wrapperCol={{\n            xs: { span: 24, offset: 0 },\n            sm: { span: 16, offset: 8 },\n          }}\n          className = 'buttomHolder'\n          style={{marginLeft:'50px', marginTop:'40px'}}\n        >\n        <div className = 'clearButtonCon'>\n          <Button onClick = {this.onClear}  >\n            Clear Values\n          </Button>\n        </div>\n        <div className = 'submitButtonCon'>\n          <Button type=\"primary\" htmlType=\"submit\" disabled = {this.handleValidation()}>\n            Submit\n          </Button>\n        </div>\n        </Form.Item>\n      </Form>\n    );\n  }\n\n}\n\nexport default ReactAddEventForm;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NewsfeedItems/LikeList.js",["1565","1566"],"import React from 'react';\nimport { List, Avatar, Modal } from 'antd';\n\n\n\n\nclass LikeList extends React.Component{\n  constructor(props){\n    super(props);\n    // this.initialisePost()\n\n    this.state = {\n      like:this.props.condition,\n    }\n  }\n\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  onFollowItemClick = (user) => {\n    window.location.href = 'explore/'+user\n  }\n\n  onProfileClick = () => {\n    const user = this.props.data.username\n    // this.prop.history.push('userview/'+user)\n    window.location.href = 'explore/'+user;\n\n  }\n\n\n  render () {\n    console.log(this.props)\n    const followList = this.props.follow\n    console.log(this.props.data.people_like)\n    console.log(this.state.like)\n    let profilePic = ''\n\n    if (this.props.data.user.profile_picture){\n      console.log(this.props.data.user.profile_picture)\n      profilePic = 'http://127.0.0.1:8000'+this.props.data.user.profile_picture\n    }\n    return (\n\n      <div>\n\n\n\n      <List\n      className = 'followList'\n      itemLayout = 'horizontal'\n      dataSource = {this.props.data.people_like}\n      renderItem = {item => (\n        <List.Item\n        className = 'followListItem'\n        onClick = {this.onProfileClick}\n        >\n        <List.Item.Meta\n          avatar={\n            item.profile_picture ?\n              <Avatar src= {'http://127.0.0.1:8000'+item.profile_picture} />\n\n              :\n\n              <Avatar src={profilePic} />\n\n            }\n\n          title={<a href={\"http://localhost:3000/explore/\"+item.username}>{item.first_name} {item.last_name}</a>}\n          description= {<b>{item.get_followers.length} followers</b>}\n        />\n\n        {/*\n\n          title={<a href=\"https://ant.design\">{this.capitalize(item.username)} {this.capitalize(item.last_name)}</a>}\n          description= {<b>@{this.capitalize(item.username)}</b>}\n        */}\n        </List.Item>\n      )}\n      >\n\n      </List>\n\n      </div>\n    )\n  }\n\n}\n\nexport default LikeList;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/ChatComponents/Contacts.js",["1567","1568","1569"],"import React, {useState, useEffect }from 'react';\nimport { NavLink } from 'react-router-dom';\n\n\nconst Contact= (props) => {\n  const[users, setUsers] = useState([]);\n\n  console.log(props)\n  return (\n    <NavLink to = {''+props.data.id } style = {{color: '#fff'}}>\n    <li className=\"contact\">\n      <div className=\"wrap\">\n        <span className=\"contact-status online\"></span>\n        <img src=\"http://emilcarlsson.se/assets/louislitt.png\" alt=\"\" />\n        <div className=\"meta\">\n          <p className=\"name\">{props.data.participants[1]}</p>\n          <p className=\"preview\"></p>\n        </div>\n      </div>\n    </li>\n    </NavLink>\n  )\n\n\n}\n\nexport default Contact;\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/PersonalCalendar/EventSyncForms/DetailSwitch.js",["1570","1571","1572","1573","1574","1575","1576","1577","1578","1579","1580","1581","1582","1583","1584","1585","1586","1587","1588","1589","1590","1591"],"import BannerAnim from 'rc-banner-anim';\nimport QueueAnim from 'rc-queue-anim';\nimport { TweenOneGroup } from 'rc-tween-one';\nimport Icon from 'antd/lib/icon';\nimport PropTypes from 'prop-types';\nimport React from \"react\";\nimport './DetailSwitch.css';\nimport { Select, Radio, Button, Input, List, Divider, Avatar, Card, message} from 'antd';\nimport dayPic from './dayPic.svg';\nimport friendsPic from './friends.svg';\nimport bicylePic from './bicycle.svg';\nimport gamingPic from './gaming.svg';\nimport notesPic from './notes.svg';\nimport * as dateFns from 'date-fns';\nimport { Form } from '@ant-design/compatible';\nimport { FireTwoTone } from '@ant-design/icons';\nimport {connect} from 'react-redux';\nimport Animate from 'rc-animate';\n\nconst { Option } = Select\nconst Element = BannerAnim.Element;\nconst { Meta } = Card;\n\nlet count=0;\n\nlet dataArray = [\n  {\n    color: '#faad14',\n    background: '#fa8c16',\n  },\n  {\n    color: '#1890ff',\n    background: '#2f54eb',\n  },\n\n\n\n];\n\nconst success = () => {\n  message.success('Sent out Event Sync Invite');\n};\n\nclass DetailSwitch extends React.Component {\n\n\n  static defaultProps = {\n    className: 'details-switch-demo',\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      pageNum:0,\n      isPageTween: false,\n      show: true,\n      friendPerson:null,\n      rangeChoice: '',\n      endDate: '',\n      startDate: new Date(),\n      showInt: 0,\n      delay: 0,\n      search: '',\n      imgAnim: [\n        { translateX: [0, 300], opacity: [1, 0] },\n        { translateX: [0, -300], opacity: [1, 0] },\n      ],\n    };\n    this.oneEnter = false;\n  }\n\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  onChange = e => {\n    console.log(e.target)\n    const startDate = dateFns.startOfDay(this.state.startDate)\n    this.setState({\n      rangeChoice: e.target.value.rangeChoice,\n      endDate: e.target.value.endDate,\n    });\n  };\n\n  onFriendChange = (friend) => {\n\n    this.setState({\n      friendPerson: friend,\n      isPageTween: true,\n      show: !this.state.show,\n    })\n\n\n\n  }\n\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    let submitContent = {}\n    if (this.state.rangeChoice === 'day'){\n      const newStartDate = dateFns.addDays(this.state.startDate, 1)\n      submitContent = {\n        friend: this.state.friendPerson,\n        startDate: newStartDate,\n        endDate: this.state.endDate\n      }\n    } else if (this.state.rangeChoice === 'week'){\n      submitContent = {\n        friend: this.state.friendPerson,\n        startDate: this.state.startDate,\n        endDate: this.state.endDate\n      }\n    }\n    console.log(submitContent)\n    this.props.onSubmit(submitContent)\n\n  }\n\n  renderEndDay = (range) => {\n    // This function will pretty much get the endDay depending on\n    // which week or day is selected\n    const startDate = dateFns.startOfDay(this.state.startDate)\n\n    let endDate = ''\n    let dayStartDate = ''\n    let statePack = {}\n    if (range === 'week' ) {\n      endDate = dateFns.addWeeks(startDate,1)\n      endDate = dateFns.format(endDate, 'yyyy-MM-dd')\n      statePack = {\n        rangeChoice: 'week',\n        endDate: endDate\n      }\n      return statePack\n    } else if (range === 'day'){\n      endDate = dateFns.addDays(startDate, 2)\n      endDate = dateFns.format(endDate, 'yyyy-MM-dd')\n      statePack = {\n        rangeChoice: 'day',\n        endDate: endDate\n      }\n      return statePack\n\n    }\n  }\n\n  onChangeAnimation = () => {\n    if (!this.oneEnter) {\n      this.setState({ delay: 300 });\n      this.oneEnter = true;\n    }\n  }\n\n\n  onHandleChange = (e) => {\n    this.setState ({\n      search: e.target.value\n    })\n  }\n\n  onLeft = () => {\n    let showInt = this.state.showInt;\n    showInt=showInt-1;\n    console.log(showInt+\" :this is before\")\n    const imgAnim = [\n      { translateX: [0, -300], opacity: [1, 0] },\n      { translateX: [0, 300], opacity: [1, 0] },\n    ];\n    if (showInt <= 0) {\n      showInt = 0;\n    }\n    this.setState({ showInt, imgAnim });\n    console.log(showInt+\" :this is after\")\n    this.bannerImg.prev();\n    this.bannerText.prev();\n\n  };\n\n  onRight = () => {\n    let showInt = this.state.showInt;\n    const imgAnim = [\n      { translateX: [0, 300], opacity: [1, 0] },\n      { translateX: [0, -300], opacity: [1, 0] },\n    ];\n    showInt += 1;\n    if (showInt > dataArray.length - 1) {\n      showInt = dataArray.length - 1;\n    }\n    this.setState({ pageNum:this.state.pageNum+1, showInt, imgAnim });\n    console.log(this.state.pageNum)\n    this.bannerImg.next();\n    this.bannerText.next();\n  };\n\n  getDuration = (e) => {\n    if (e.key === 'map') {\n      return 800;\n    }\n    return 1000;\n  };\n\n\n\n\n  renderFriends = () => {\n    let friends = []\n    if(this.props.friends){\n      for (let i = 0; i < this.props.friends.length; i++ ){\n        friends.push(\n          <Option\n          key = {this.props.friends[i]}\n          value = {this.props.friends[i]}>\n            {this.props.friends[i]}\n          </Option>\n        )\n      }\n    }\n    console.log(friends)\n\n  }\n\n  render() {\n    console.log(this.props)\n    console.log(this.state)\n    console.log(this.props.currentProfile)\n    let friends = this.props.friends\n    let personPic1='http://127.0.0.1:8000'+this.props.currentProfile\n    let picArray=[gamingPic, notesPic, personPic1]\n    console.log(friends)\n    let friend = this.state.search.trim().toLowerCase()\n    if (friend.length > 0){\n      friends = friends.filter(val => val.username.toLowerCase().match(friend))\n    }\n    console.log(this.bannerImg)\n    const imgChildren = dataArray.map((item, i) => (\n\n\n      <Element\n        key={i}\n        style={{\n          background: item.color,\n          height: '100%',\n        }}\n        leaveChildHide\n       >\n\n         {\n\n\n           (this.state.pageNum==0)?\n\n          <QueueAnim\n            animConfig={this.state.imgAnim}\n            duration={this.getDuration}\n            delay={[!i ? this.state.delay : 7000, 0]}\n            ease={['easeOutCubic', 'easeInQuad']}\n            key=\"img-wrapper\"\n          >\n\n          {/*if the page count is 1*/}\n            <div className={`${this.props.className}-map map${i}`} key=\"map\">\n              <img style={{marginLeft:'100px'}} src={picArray[0]} width=\"100%\" />\n            </div>\n\n            <div style={{marginTop:'225px' }} className={`${this.props.className}-map map${i}`} key=\"map\">\n              <img style={{marginLeft:'100px'}} src={picArray[1]} width=\"100%\" />\n            </div>\n              {/*if the page count is 2*/}\n\n          </QueueAnim>\n\n          :\n          <span>\n            <QueueAnim\n              animConfig={this.state.imgAnim}\n              duration={this.getDuration}\n              delay={[!i ? this.state.delay : 300, 0]}\n              ease={['easeOutCubic', 'easeInQuad']}\n              key=\"img-wrapper\"\n            >\n\n            {/*if the page count is 1*/}\n              <div className={`${this.props.className}-map map${i}`} key=\"map\">\n\n                <Card\n                  hoverable\n\n                  style={{ width: 225, height:260, left:'50%', marginTop:'-25px'}}\n                  cover={\n\n                    <span class=\"containImage\">\n                      <img alt=\"example\" src={picArray[2]} />\n                    </span>\n                  }\n                >\n                  <Meta title=\"Ping Hsu\" description=\"@admin\" />\n                </Card>\n\n              </div>\n                {/*if the page count is 2*/}\n\n            </QueueAnim>\n\n            {\n              (this.state.friendPerson!=null)?\n                <div style={{marginLeft:'157px', marginTop:'325px'}}>\n                    <div class=\"fade-in\">\n                      <Card\n                        hoverable\n                        style={{ width: 225, height:260}}\n                        cover={\n                            <span class=\"containImage\">\n                              <img\n\n                                alt=\"example\" src={'http://127.0.0.1:8000'+this.state.friendPerson.profile_picture} />\n                            </span>\n                        }\n                      >\n                        <Meta title=\"Ping Hsu\" description={\"@\"+this.state.friendPerson.username} />\n                      </Card>\n                    </div>\n                </div>\n                :\n                <div></div>\n              }\n\n            :\n            <div></div>\n\n          </span>\n\n          }\n\n\n      </Element>));\n\n    const textChildren = dataArray.map((item, i) => {\n      console.log(dataArray);\n      const { title, content, background } = item;\n      return (<Element key={i}>\n\n        {\n        (this.state.pageNum==0)?\n\n        <div>\n          <QueueAnim type=\"bottom\"\n            duration={1500}\n             delay={[!i ? this.state.delay + 500 : 800, 0]}>\n\n            <h1 style={{marginTop:'30px'}} key=\"h1\">{'Day View'}</h1>\n            <em key=\"em\" style={{ background }} />\n            <p key=\"p\">{\n              <div class=\"eventSyncForm\">\n                <div className = 'radioCon'>\n\n                <Radio.Button\n                  onClick={this.onRight}\n                  className = 'dayEsync buttonGrow'\n                  onChange={this.onChange}\n                  style={{marginBottom:'20px'}}\n                  value={this.renderEndDay('day')}>\n                    <span className = 'syncTitle'>Day Event Sync </span>\n                    <br />\n                    <span>\n                    ({\n                      dateFns.format(\n                        dateFns.addDays(new Date(),1),\n                        'MM/dd'\n                      )\n                    })\n                    </span>\n                  </Radio.Button>\n                </div>\n\n\n              </div>\n          }</p>\n\n\n          </QueueAnim>\n\n\n        <QueueAnim type=\"bottom\"\n          duration={1500}\n           delay={[!i ? this.state.delay + 500 : 800, 0]}>\n\n          <h1 style={{ marginTop:'125px'}} key=\"h1\">{'Week View'}</h1>\n          <em key=\"em\" style={{ background }} />\n          <p key=\"p\">{\n            <div class=\"eventSyncForm\">\n              <div className = 'radioCon'>\n            <Radio.Button\n              onClick={this.onRight}\n              onChange={this.onChange}\n              className = 'weekEsync buttonGrow'\n              style={{marginBottom:'20px'}}\n              value={this.renderEndDay('week')}\n            >\n              <span className = 'syncTitle'> Week Event Sync </span>\n              <br />\n              <span>\n              ({dateFns.format(new Date(), 'MM/dd')}\n              </span>\n              -\n              <span>\n              {\n                dateFns.format(\n                  dateFns.addWeeks(new Date(),1),\n                  'MM/dd'\n                )\n              })\n              </span>\n            </Radio.Button>\n\n          </div>\n        </div>\n        }</p>\n\n\n        </QueueAnim>\n      </div>\n        :\n\n        <QueueAnim type=\"bottom\"\n          duration={1200}\n          delay={[!i ? this.state.delay : 300, 0]}>\n\n        <div>\n          <Form\n          onSubmit = {this.handleSubmit}\n          className = 'eventSyncForm'\n          >\n            <Form.Item className = 'friendListCon'>\n            <Input\n              style={{width:'425px'}}\n              value = {this.state.search}\n              onChange = {this.onHandleChange}\n              type = 'text'\n              placeholder = 'Find a Friend'\n             />\n\n\n             <List\n                  className = 'friendList'\n                  dataSource={friends}\n                  style={{padding:'1px',width:'425px'}}\n                  renderItem={item => (\n                    <List.Item\n                    key={item.username}\n                    className = {` friendItemHover  ${this.state.friend === item ? 'friendItem' : '' }`}\n                    onClick = {() => this.onFriendChange(item)}\n                    style={{padding:'15px'}}\n                    >\n                      <List.Item.Meta\n                        avatar={\n                          <Avatar src={'http://127.0.0.1:8000'+item.profile_picture} />\n                        }\n                        title={<a>{this.capitalize(item.first_name)+\" \"+this.capitalize(item.last_name)}</a>}\n                        description={\"@\"+item.username}\n                      />\n\n\n                  </List.Item>\n\n                  )}\n                >\n            </List>\n\n            </Form.Item>\n\n            <Form.Item>\n            <Button\n            style = {{\n              backgroundColor:'dodgerblue',\n              color: 'white',\n              width:'425px',\n            }}\n            shape=\"round\"\n            onClick={success}\n            htmlType = 'submit'\n            disabled = {this.state.endDate === ''\n            || this.state.friend === '' }\n            block> Send Invite</Button>\n            </Form.Item>\n\n          </Form>\n\n          <div style={{float:'right', marginTop:'100px', fontSize:'50px'}}>\n            <i onClick={this.onLeft} class=\"fas fa-arrow-circle-left\"></i>\n          </div>\n\n        </div>\n\n      </QueueAnim>\n      }\n      </Element>\n    );\n    });\n\n    const textChildren2 = dataArray.map((item, i) => {\n      console.log(dataArray);\n      const { title, content, background } = item;\n      return (<Element\n        style={{\n          background: item.color,\n          height: '100%',\n        }}\n         key={i}>\n\n\n        <div>\n          <QueueAnim type=\"bottom\"\n            duration={1500}\n             delay={[!i ? this.state.delay + 500 : 800, 0]}>\n\n            <h1 key=\"h1\">{'Day View'}</h1>\n            <em key=\"em\" style={{ background }} />\n            <p key=\"p\">{\n                <div>test</div>\n\n          }</p>\n\n\n          </QueueAnim>\n\n\n        <QueueAnim type=\"bottom\"\n          duration={1500}\n           delay={[!i ? this.state.delay + 500 : 800, 0]}>\n\n          <h1 style={{ marginTop:'125px'}} key=\"h1\">{'Week View'}</h1>\n          <em key=\"em\" style={{ background }} />\n          <p key=\"p\">{\n            <div>test2</div>\n        }</p>\n\n\n        </QueueAnim>\n      </div>\n\n      </Element>\n    );\n    });\n\n\n    return (\n\n      <div\n      className={`${this.props.className}-wrapper`}\n      style={{ background: dataArray[this.state.showInt].background }}\n      >\n      <div className={this.props.className}>\n        <BannerAnim\n          prefixCls={`${this.props.className}-img-wrapper`}\n          sync\n          type=\"across\"\n          duration={1000}\n          ease=\"easeInOutExpo\"\n          arrow={false}\n          thumb={false}\n          ref={(c) => { this.bannerImg = c; }}\n          onChange={this.onChangeAnimation}\n          dragPlay={false}\n        >\n          {imgChildren}\n\n        </BannerAnim>\n        <BannerAnim\n          prefixCls={`${this.props.className}-text-wrapper`}\n          sync\n          type=\"across\"\n          duration={1000}\n          arrow={false}\n          thumb={false}\n          ease=\"easeInOutExpo\"\n          ref={(c) => { this.bannerText = c; }}\n          dragPlay={false}\n        >\n          {textChildren}\n\n        </BannerAnim>\n\n\n\n\n      </div>\n    </div>);\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    friends: state.auth.friends\n  }\n}\n\n\nexport default connect(mapStateToProps) (DetailSwitch);\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/api.js",["1592"],"// const instagram_url = 'http://127.0.0.1:8000/userprofile' //url for all the posts\nimport axios from 'axios';\nconst post_url = 'http://127.0.0.1:8000/userprofile/list/'\n\n// export const fetchPosts = async() =>{\n// \treturn fetch(instagram_url, {})\n// \t\t.then(res=>res.json())\n// \t\t.then(data =>{\n// \t\t\treturn data;\n// \t\t});\n// \t}\n//\n// export const fetchUsername = async(name) =>{\n// \t// get the userid of that user\n// \t\treturn fetch(instagram_url+\"/users/\"+name, {})\n// \t\t\t.then(res=>res.json())\n// \t\t\t.then(data =>{\n// \t\t\t\treturn data;\n// \t\t\t});\n// \t\t}\n//\n// export const fetchPost = async(id) => {\n//\n// \treturn fetch(post_url+id, {})\n// \t.then(res=>res.json())\n// \t.then(data =>{\n// \t\treturn data;\n// \t});\n// }\n//\n// export const getCurrentUser = () => {\n// \tfetch(instagram_url+'/current_user/', {\n//         headers: {\n//           Authorization: `Token ${localStorage.getItem('token')}`\n//         }\n//       })\n//         .then(res => res.json())\n//         .then(json => {\n// \t\t return json;\n// \t })\n//  }\n\n export const uploadPost = (post) =>{\n\tconst data = new FormData();\n\tdata.append(\"caption\", post.caption);\n\tdata.append(\"user_id\", post.user_id);\n\t// data.append(\"image\", post.image);\n\t// data.append(\"image_filter\", post.image_filter);\n  console.log(data)\n  axios.post('http://127.0.0.1:8000/userprofile/list/', {\n    Caption: data,\n  })\n\t.then (res =>res.json())\n\t.then(json =>{\n\t\treturn json\n\t})\n\n}\n","/home/pinghsu520/Desktop/share/ShareOrb/frontend/src/containers/NewChatFolder/ChatManagerFolder/CreateShareEventChat.js",["1593","1594","1595","1596","1597","1598","1599","1600","1601","1602","1603","1604","1605"],"import React from 'react';\nimport * as dateFns from 'date-fns';\nimport moment from 'moment';\nimport { connect } from \"react-redux\";\nimport { Form } from '@ant-design/compatible';\nimport { DatePicker, TimePicker, Button, Input, Select, Radio } from 'antd';\nimport { AimOutlined, ArrowRightOutlined } from '@ant-design/icons';\nimport '@ant-design/compatible/assets/index.css';\n\nconst { TextArea } = Input\n\nconst { MonthPicker, RangePicker } = DatePicker;\n\n\nconst { Option } = Select;\n\n\nconst rangeConfig = {\n  rules: [{ type: 'array', required: true, message: 'Please select time!' }],\n};\n\n// This file will be like a mini version of the ReactAddEventForm\n// where the event will be automatically shared with everyone in\n// side chat\n\nclass CreateShareEventChat extends React.Component{\n  constructor (props) {\n    super(props);\n    this.state = {\n      dateRange: null,\n      startDate: moment(new Date()),\n      endDate: moment(new Date()),\n      timeStart: \"12:00 AM\",\n      timeEnd: \"12:30 AM\",\n      title: '',\n      content: '',\n      location: '',\n      repeatCondition: 'none',\n      eventColor: '#1890ff',\n      error: false,\n      person: []\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  handleChange = (values) => {\n    this.setState({ [values.target.name]: values.target.value})\n  }\n\n  onDateChange = (time) => {\n    this.setState({\n      dateRange: time\n    })\n  }\n\n\n  showPeopleShared = (nameList) => {\n    // this function will take in a list of usernames and then return a string\n    // showing who the event will be shared with\n\n    let shareStr = \"**This event will be shared with \"\n    for(let i = 0; i< nameList.length; i++){\n      if(i === 0){\n        shareStr = shareStr+this.capitalize(nameList[i])\n      } else {\n        shareStr = shareStr+ \", \"+this.capitalize(nameList[i])\n      }\n    }\n\n    return shareStr;\n  }\n\n  onStartDateChange = (time) => {\n    // This is to handle the onChange\n    let startDate = time\n    let endDate = this.state.endDate\n\n    console.log(dateFns.isAfter(new Date(startDate),new Date(endDate)))\n\n    if (dateFns.isAfter(new Date(startDate),new Date(endDate))){\n      console.log('test1')\n      this.setState({\n        startDate: time,\n        endDate: time,\n      })\n    } else {\n      console.log('test2')\n      this.setState({\n        startDate: time\n      })\n    }\n\n  }\n\n  onEndDateChange = (time) => {\n    console.log(time)\n    this.setState({\n      endDate: time\n    })\n  }\n\n  onStartTimeChange = (time) => {\n    console.log(time)\n    // You basically want the end time to be 30 mins ahead of the starttime\n    // so you want to check if it is and then change the state accordingly\n    let startHour = parseInt(time.substring(0,2))\n    let startMin = parseInt(time.substring(3,5))\n    let ampm = time.substring(5,8)\n    let endHour = parseInt(this.state.timeEnd.substring(0,2))\n    let endMin = parseInt(this.state.timeEnd.substring(3,5))\n    let endTime = ''\n    console.log(startHour, endHour)\n    // These if statement here is to change the start time values from 1-12 todo\n    // 1-24 for the start time\n    if (time.includes('PM')){\n      if (startHour !==  12){\n        startHour = startHour + 12\n      }\n    } else if (time.includes('AM')){\n      if(startHour === 12){\n        startHour = 0\n      }\n    }\n    // These if statements here is to change the end time values from 1-2 to\n    // 1-24 for the end time\n    if (this.state.timeEnd.includes('PM')){\n      if (endHour !==  12){\n        endHour = endHour + 12\n      }\n    } else if (this.state.timeEnd.includes('AM')){\n      if(endHour === 12){\n        endHour = 0\n      }\n    }\n\n\n\n    if (startHour < endHour){\n      this.setState({\n        timeStart: time,\n      })\n    } else if ( startHour === endHour ){\n      if (startMin < endMin){\n        this.setState({\n          timeStart: time,\n        })\n      } else if (startMin > endMin){\n        // If they are the same time what do I do?\n        endMin = \"00\"\n        endHour = startHour + 1\n        console.log(startHour)\n        console.log(endHour)\n        if (startHour === 11 && ampm === ' AM'){\n          endTime =   '12:' + endMin + ' PM'\n        } else if (startHour === 23 && ampm === ' PM'){\n          endTime =  '12:' + endMin + ' AM'\n        } else {\n          if (endHour < 10){\n            endHour = '0'+endHour\n          } else {\n            if(ampm === ' AM'){\n              endHour = endHour\n            } else if (ampm === ' PM'){\n              endHour = endHour-12\n              if (endHour < 10){\n                endHour = '0'+endHour\n              }\n            }\n          }\n          endTime = endHour + ':'+endMin+ampm\n\n        }\n\n\n\n        console.log(time, endTime)\n        this.setState({\n          timeStart:time,\n          timeEnd: endTime\n        })\n      } else if (startMin === endMin){\n        // This is the case where the times are identical to each other\n        // REMEMBER THAT ENDHOUR AND STARTHOUR ARE USING THE 1-24 TIME\n        console.log(startHour, endHour)\n        if (startHour === 0 && ampm === ' AM' && startMin === 0 ){\n          endTime = '12:30 AM'\n        } else if (startHour === 12 && ampm === ' PM' && startMin === 0){\n          endTime = '12:30 PM'\n        } else {\n          if (startMin === 30){\n            endMin = '00'\n            if (startHour === 12){\n              endHour = '01'\n              endTime = endHour + ':'+endMin+' PM'\n            } else if (startHour === 11 && ampm === ' AM'){\n                endTime =   '12:' + endMin + ' PM'\n              } else if ((startHour-12) === 11 && ampm === ' PM'){\n                endTime =  '12:' + endMin + ' AM'\n              }\n            else {\n              console.log(endHour)\n              endHour = startHour +1\n                if (endHour<10){\n                    endHour = '0'+endHour\n                } else {\n                  if(ampm === ' AM'){\n                    endHour = endHour\n                  } else if (ampm === ' PM'){\n                    endHour = endHour-12\n                    if (endHour < 10){\n                      endHour = '0'+endHour\n                    }\n                  }\n                }\n              endTime = endHour + ':' +endMin+ampm\n            }\n          } else if (startMin === 0){\n            endMin = '30'\n            console.log(ampm)\n            if (endHour<10){\n                endHour = '0'+endHour\n            } else {\n              if(ampm === ' AM'){\n                console.log('am')\n                endHour = endHour\n              } else if (ampm === ' PM'){\n                console.log('pm')\n                if (endHour === 12){\n                  endHour = 12\n                }else {\n                  endHour = endHour-12\n                  if (endHour < 10){\n                    endHour = '0'+endHour\n                  }\n                }\n              }\n            }\n            endTime = endHour + ':'+endMin +ampm\n          }\n        }\n\n\n\n        this.setState({\n          timeStart:time,\n          timeEnd: endTime\n        })\n\n      }\n\n\n      } else if ( startHour > endHour ){\n        // let startHour = parseInt(time.substring(0,2))\n        // let startMin = parseInt(time.substring(3,5))\n\n        console.log(startHour, startMin, ampm)\n        if (startHour === 11 && ampm === ' AM' && startMin === 30){\n          endTime =   '12:00 PM'\n        } else if (startHour === 23 && ampm === ' PM' && startMin === 30){\n          endTime =  '12:00 AM'\n        } else {\n          if (startMin === 30){\n            startMin = \"00\"\n            startHour = startHour + 1\n          } else if (startMin !== 30){\n            startMin = '30'\n          }\n          if (startHour < 10){\n            startHour = '0'+startHour\n          } else{\n            if(ampm === ' AM'){\n              startHour = startHour\n            } else if (ampm === ' PM'){\n              startHour = startHour-12\n              if (startHour < 10){\n                if (startHour === 0){\n                  startHour = '12'\n                } else{\n                  startHour = '0'+startHour\n                }\n\n              }\n            }\n          }\n\n          endTime = startHour + ':'+startMin+ampm\n        }\n\n\n\n\n        this.setState({\n          timeStart: time,\n          timeEnd: endTime\n        })\n      }\n    }\n\n    onEndTimeChange = (time) => {\n      console.log(time)\n      this.setState({\n        timeEnd: time\n      })\n    }\n\n\n    handleValidation(){\n      // You will use this to disable or non disable the button, so because of that\n      // the true and false will be flipped\n      let title = this.state.title\n      let content = this.state.content\n      let location = this.state.location\n      let startDate = this.state.startDate\n      let endDate = this.state.endDate\n      let repeatCondition = this.state.repeatCondition\n      let errors = {}\n      let buttonDisabled = false\n\n      if (title === ''){\n        buttonDisabled = true\n        // errors['title'] = 'Cannot be empty'\n      }\n\n\n\n      if (startDate === null){\n        buttonDisabled = true\n\n      }\n\n      if (endDate === null){\n        buttonDisabled = true\n      }\n\n      if (dateFns.isAfter(new Date(startDate), new Date(endDate))){\n        buttonDisabled = true\n      } else if (repeatCondition === \"weekly\" &&\n        !dateFns.isSameWeek(new Date(startDate), new Date(endDate))\n      ) {\n        buttonDisabled = true\n      } else if (repeatCondition === \"daily\" &&\n        !dateFns.isSameDay(new Date (startDate), new Date(endDate))\n      ) {\n        buttonDisabled = true\n      }\n\n      console.log(buttonDisabled)\n      return buttonDisabled\n\n    }\n\n\n      onRed = () => {\n        let startDate = this.state.startDate\n        let endDate = this.state.endDate\n        let repeatCondition = this.state.repeatCondition\n\n        let boxcolor = false\n\n        if (dateFns.isAfter(new Date(startDate), new Date(endDate))){\n          boxcolor = true\n        } else if (repeatCondition === \"weekly\" &&\n          !dateFns.isSameWeek(new Date(startDate), new Date(endDate))\n        ) {\n          boxcolor = true\n        } else if (repeatCondition === \"daily\" &&\n          !dateFns.isSameDay(new Date (startDate), new Date(endDate))\n        ) {\n          boxcolor = true\n        }\n        return boxcolor\n      }\n\n      onClear = () => {\n        this.setState({\n          title: '',\n          content: '',\n          location: '',\n          error: false,\n        })\n      }\n\n      handleSubmit =(event) => {\n        event.preventDefault();\n          const submitContent = {\n            title: this.state.title,\n            content: this.state.content,\n            location: this.state.location,\n            start_date: this.state.startDate.toDate(),\n            end_date: this.state.endDate.toDate(),\n            start_time: this.state.timeStart,\n            end_time: this.state.timeEnd,\n            event_color: this.state.eventColor,\n            repeatCondition:this.state.repeatCondition,\n          }\n          this.onClear()\n          this.props.submitCreateEvent(submitContent)\n\n      }\n\n      onFinish = values => {\n        console.log('Success:', values);\n      };\n\n      onFinishFailed = errorInfo => {\n        console.log('Failed:', errorInfo);\n      };\n\n      renderStartTime = () => {\n        const timeFormat = \"hh:mm a\"\n        const time = []\n        let start = dateFns.startOfDay(new Date())\n        let startHour = dateFns.getHours(new Date())\n        let startMins = dateFns.getMinutes(new Date())\n        for (let i = 0; i< 48; i++){\n          const cloneTime = startHour + ':' + startMins\n          time.push(\n            <Option key = {dateFns.format(start, timeFormat)}>{dateFns.format(start, timeFormat)}</Option>\n          )\n          start = dateFns.addMinutes(start, 30)\n        }\n        console.log(time)\n        return time\n      }\n\n      renderEndTime = () => {\n        // So for rendering the tiem for the end time, you first want to get the\n        // time of the starting time so that you can get the time afterwards\n        // but since all the time selections are strings we must first convert to ints\n        // and the time after PM to plus 12 more so that you can compare. So you would\n        // get the startTime in the states and convert it to int and all that stuff and then\n        // you get the list of all the times and then convert to ints and then compare with the state\n        // time, if it is after then you put it in the list if not then you dont (remember to put them\n      // in a option tag)\n        const baseTime = this.renderStartTime()\n        let endTime = []\n\n        let setHour = ''\n        let setMin = ''\n\n        if (this.state.timeStart.includes(\"PM\")){\n          setHour = parseInt(this.state.timeStart.substring(0,2))\n          setMin = parseInt(this.state.timeStart.substring(3,5))\n          if (setHour !== 12){\n            setHour = setHour + 12\n        }} else if (this.state.timeStart.includes(\"AM\")){\n          setHour = parseInt(this.state.timeStart.substring(0,2))\n          setMin = parseInt(this.state.timeStart.substring(3,5))\n          if (setHour === 12){\n            setHour = 0\n          }\n        }\n\n        for(let i = 0; i< baseTime.length; i++){\n          if (baseTime[i].key.includes('PM')){\n            let hour = parseInt(baseTime[i].key.substring(0,2))\n            if (hour !== 12){\n              hour = hour+12\n            }\n            const min = baseTime[i].key.substring(3,5)\n            if (setHour < hour){\n              endTime.push(\n                <Option key= {baseTime[i].key}>{baseTime[i].key}</Option>\n              )} else if (setHour === hour){\n                if(setMin < min){\n                  endTime.push(\n                    <Option key= {baseTime[i].key}>{baseTime[i].key}</Option>\n                  )\n                }\n              }\n            } else if (baseTime[i].key.includes(\"AM\")) {\n            let hour = parseInt(baseTime[i].key.substring(0,2))\n            if (hour === 12){\n              hour = 0\n            }\n            const min = baseTime[i].key.substring(3,5)\n            if(setHour < hour){\n              endTime.push(\n                <Option key= {baseTime[i].key}>{baseTime[i].key}</Option>\n              )} else if (setHour === hour){\n                if(setMin < min){\n                  endTime.push(\n                    <Option key= {baseTime[i].key}>{baseTime[i].key}</Option>\n                  )\n                }\n              }\n            }\n          }\n          return (endTime)\n        }\n\n\n\n\n    render(){\n\n\n      // The name of the inputt values are important\n      // it allows for us to be able to input stuff into the form item\n      // because it is what connents to the onChange for the states\n      console.log(this.state)\n      console.log(this.props)\n      const startChildren = this.renderStartTime();\n      const endChildren = this.renderEndTime()\n      console.log(this.handleValidation())\n\n\n      const options = [\n      { label: 'Normal', value: 'none' },\n      { label: 'Weekly', value: 'weekly' },\n      { label: 'Daily', value: 'daily' },\n      ];\n\n      let nameList = \"\"\n      if(this.props.usernameList){\n        nameList = this.showPeopleShared(this.props.usernameList)\n      }\n\n      return(\n        <Form\n        className =\"reactForm\"\n        style={{padding:'50px'}}\n        onSubmit = {this.handleSubmit}\n        onChange = {this.handleChange}\n         >\n          <Form.Item>\n           <Input\n           name = 'title'\n           className= 'reactTitle'\n           placeholder = 'Title'\n           value = {this.state.title}\n           style={{marginTop:'-5px'}}\n           />\n         </Form.Item>\n\n\n          <Radio.Group\n            options={options}\n            name = 'repeatCondition'\n            onChange={this.handleChange}\n            value={this.state.repeatCondition}\n            optionType=\"button\"\n          />\n\n\n         <Form.Item\n             name=\"range-time-picker\"\n            {...rangeConfig}\n            style={{marginTop:'20px'}}\n             >\n             <i style={{marginLeft:'10px', marginRight:'21px'}} class=\"fas fa-clock\"></i>\n\n             <DatePicker\n             className = ''\n             placeholder = 'startTime'\n             onChange = {this.onStartDateChange}\n             value = {this.state.startDate}\n             suffixIcon={<div></div>}\n             style = {{width: '110px', marginRight:'15px'}}\n             />\n\n\n             <Select\n             name = 'timeStart'\n             className = ''\n             style={{ width: 100, marginRight:'15px' }}\n             showArrow  = {false}\n             onChange = {this.onStartTimeChange}\n             value = {this.state.timeStart}>\n               {startChildren}\n             </Select>\n\n             <Select\n             className = ''\n             name = 'timeEnd'\n             style={{ width: 100 }}\n             showArrow  = {false}\n             onChange = {this.onEndTimeChange}\n             value = {this.state.timeEnd}>\n               {endChildren}\n             </Select>\n           </Form.Item>\n\n\n\n         <div class=\"innerContainerPeople\">\n           <Form.Item name=\"Location\">\n             <i class=\"fas fa-globe-americas\"  style={{marginLeft:'10px', marginRight:'25px'}} ></i>\n            <Input style={{width:'50%',fontSize:'14px'}}\n             name = 'location'\n             placeholder = 'Location'\n             value = {this.state.location}\n             />\n          </Form.Item>\n          <AimOutlined style={{marginLeft:'15px', marginTop:'20px', fontSize:'20px', marginRight:'15px'}} className = 'aim'/>\n            <Input type = 'color' className = 'reactColor'\n              name = 'eventColor' defaultValue = '#1890ff'/>\n        </div>\n\n         <Form.Item name=\"Content\" style={{marginTop:'-20px'}}>\n\n          <TextArea\n          name = 'content'\n          placeholder= 'Event Description'\n          value = {this.state.content}\n          rows ={3}\n          style = {{width: '400px', marginLeft:'50px'}}/>\n\n        </Form.Item>\n\n        <div> {nameList} </div>\n\n          <Form.Item\n            wrapperCol={{\n              xs: { span: 24, offset: 0 },\n              sm: { span: 16, offset: 8 },\n            }}\n            className = 'buttomHolder'\n            style={{marginLeft:'50px', marginTop:'40px'}}\n          >\n          <div className = 'clearButtonCon'>\n            <Button onClick = {this.onClear}  >\n              Clear Values\n            </Button>\n          </div>\n          <div className = 'submitButtonCon'>\n            <Button type=\"primary\" htmlType=\"submit\" disabled = {this.handleValidation()}>\n              Submit\n            </Button>\n          </div>\n          </Form.Item>\n        </Form>\n      )\n    }\n\n  }\n\n  export default CreateShareEventChat;\n",{"ruleId":"1606","severity":1,"message":"1607","line":20,"column":8,"nodeType":"1608","messageId":"1609","endLine":20,"endColumn":9},{"ruleId":"1606","severity":1,"message":"1610","line":21,"column":8,"nodeType":"1608","messageId":"1609","endLine":21,"endColumn":14},{"ruleId":"1611","replacedBy":"1612"},{"ruleId":"1613","replacedBy":"1614"},{"ruleId":"1606","severity":1,"message":"1615","line":3,"column":10,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1616","line":6,"column":8,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1617","line":20,"column":8,"nodeType":"1608","messageId":"1609","endLine":20,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1618","line":21,"column":13,"nodeType":"1608","messageId":"1609","endLine":21,"endColumn":23},{"ruleId":"1606","severity":1,"message":"1619","line":2,"column":17,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":28},{"ruleId":"1606","severity":1,"message":"1620","line":5,"column":8,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1621","line":10,"column":8,"nodeType":"1608","messageId":"1609","endLine":10,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1622","line":11,"column":8,"nodeType":"1608","messageId":"1609","endLine":11,"endColumn":26},{"ruleId":"1606","severity":1,"message":"1623","line":15,"column":8,"nodeType":"1608","messageId":"1609","endLine":15,"endColumn":12},{"ruleId":"1606","severity":1,"message":"1624","line":17,"column":8,"nodeType":"1608","messageId":"1609","endLine":17,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1625","line":23,"column":8,"nodeType":"1608","messageId":"1609","endLine":23,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1626","line":24,"column":8,"nodeType":"1608","messageId":"1609","endLine":24,"endColumn":27},{"ruleId":"1606","severity":1,"message":"1627","line":27,"column":8,"nodeType":"1608","messageId":"1609","endLine":27,"endColumn":25},{"ruleId":"1606","severity":1,"message":"1628","line":29,"column":8,"nodeType":"1608","messageId":"1609","endLine":29,"endColumn":20},{"ruleId":"1629","severity":1,"message":"1630","line":68,"column":17,"nodeType":"1631","messageId":"1632","endLine":68,"endColumn":19},{"ruleId":"1629","severity":1,"message":"1630","line":90,"column":24,"nodeType":"1631","messageId":"1632","endLine":90,"endColumn":26},{"ruleId":"1606","severity":1,"message":"1633","line":4,"column":8,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":37},{"ruleId":"1606","severity":1,"message":"1634","line":5,"column":9,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1635","line":5,"column":10,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":17},{"ruleId":"1629","severity":1,"message":"1630","line":103,"column":24,"nodeType":"1631","messageId":"1632","endLine":103,"endColumn":26},{"ruleId":"1636","severity":1,"message":"1637","line":14,"column":40,"nodeType":"1638","messageId":"1639","endLine":14,"endColumn":65,"fix":"1640"},{"ruleId":"1629","severity":1,"message":"1630","line":75,"column":16,"nodeType":"1631","messageId":"1632","endLine":75,"endColumn":18},{"ruleId":"1629","severity":1,"message":"1630","line":80,"column":16,"nodeType":"1631","messageId":"1632","endLine":80,"endColumn":18},{"ruleId":"1636","severity":1,"message":"1637","line":14,"column":45,"nodeType":"1638","messageId":"1639","endLine":14,"endColumn":75,"fix":"1641"},{"ruleId":"1606","severity":1,"message":"1642","line":130,"column":13,"nodeType":"1608","messageId":"1609","endLine":130,"endColumn":26},{"ruleId":"1606","severity":1,"message":"1643","line":1,"column":8,"nodeType":"1608","messageId":"1609","endLine":1,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1644","line":3,"column":8,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1645","line":3,"column":16,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":24},{"ruleId":"1606","severity":1,"message":"1646","line":3,"column":26,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":35},{"ruleId":"1606","severity":1,"message":"1647","line":115,"column":15,"nodeType":"1608","messageId":"1609","endLine":115,"endColumn":24},{"ruleId":"1606","severity":1,"message":"1648","line":116,"column":15,"nodeType":"1608","messageId":"1609","endLine":116,"endColumn":17},{"ruleId":"1649","severity":1,"message":"1650","line":194,"column":10,"nodeType":"1651","messageId":"1652","endLine":194,"endColumn":33},{"ruleId":"1653","severity":1,"message":"1654","line":18,"column":17,"nodeType":"1655","endLine":20,"endColumn":9},{"ruleId":"1606","severity":1,"message":"1643","line":1,"column":8,"nodeType":"1608","messageId":"1609","endLine":1,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1656","line":3,"column":8,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1657","line":4,"column":8,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":24},{"ruleId":"1606","severity":1,"message":"1658","line":9,"column":8,"nodeType":"1608","messageId":"1609","endLine":9,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1659","line":13,"column":8,"nodeType":"1608","messageId":"1609","endLine":13,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1660","line":15,"column":20,"nodeType":"1608","messageId":"1609","endLine":15,"endColumn":24},{"ruleId":"1606","severity":1,"message":"1661","line":15,"column":34,"nodeType":"1608","messageId":"1609","endLine":15,"endColumn":41},{"ruleId":"1606","severity":1,"message":"1662","line":15,"column":43,"nodeType":"1608","messageId":"1609","endLine":15,"endColumn":51},{"ruleId":"1606","severity":1,"message":"1663","line":16,"column":3,"nodeType":"1608","messageId":"1609","endLine":16,"endColumn":9},{"ruleId":"1606","severity":1,"message":"1664","line":16,"column":11,"nodeType":"1608","messageId":"1609","endLine":16,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1665","line":16,"column":22,"nodeType":"1608","messageId":"1609","endLine":16,"endColumn":28},{"ruleId":"1606","severity":1,"message":"1666","line":17,"column":10,"nodeType":"1608","messageId":"1609","endLine":17,"endColumn":23},{"ruleId":"1606","severity":1,"message":"1667","line":17,"column":25,"nodeType":"1608","messageId":"1609","endLine":17,"endColumn":37},{"ruleId":"1668","severity":1,"message":"1669","line":32,"column":2,"nodeType":"1670","messageId":"1671","endLine":35,"endColumn":3},{"ruleId":"1606","severity":1,"message":"1672","line":105,"column":11,"nodeType":"1608","messageId":"1609","endLine":105,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1673","line":11,"column":10,"nodeType":"1608","messageId":"1609","endLine":11,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1674","line":12,"column":27,"nodeType":"1608","messageId":"1609","endLine":12,"endColumn":33},{"ruleId":"1606","severity":1,"message":"1633","line":14,"column":8,"nodeType":"1608","messageId":"1609","endLine":14,"endColumn":37},{"ruleId":"1668","severity":1,"message":"1669","line":23,"column":3,"nodeType":"1670","messageId":"1671","endLine":25,"endColumn":4},{"ruleId":"1606","severity":1,"message":"1675","line":59,"column":13,"nodeType":"1608","messageId":"1609","endLine":59,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1676","line":60,"column":13,"nodeType":"1608","messageId":"1609","endLine":60,"endColumn":21},{"ruleId":"1677","severity":1,"message":"1678","line":131,"column":7,"nodeType":"1679","endLine":131,"endColumn":66},{"ruleId":"1677","severity":1,"message":"1678","line":132,"column":7,"nodeType":"1679","endLine":132,"endColumn":36},{"ruleId":"1606","severity":1,"message":"1680","line":4,"column":3,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1681","line":7,"column":3,"nodeType":"1608","messageId":"1609","endLine":7,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1682","line":10,"column":3,"nodeType":"1608","messageId":"1609","endLine":10,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1683","line":11,"column":3,"nodeType":"1608","messageId":"1609","endLine":11,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1684","line":13,"column":3,"nodeType":"1608","messageId":"1609","endLine":13,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1685","line":14,"column":3,"nodeType":"1608","messageId":"1609","endLine":14,"endColumn":23},{"ruleId":"1606","severity":1,"message":"1667","line":15,"column":3,"nodeType":"1608","messageId":"1609","endLine":15,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1686","line":16,"column":3,"nodeType":"1608","messageId":"1609","endLine":16,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1687","line":19,"column":9,"nodeType":"1608","messageId":"1609","endLine":19,"endColumn":23},{"ruleId":"1606","severity":1,"message":"1688","line":20,"column":8,"nodeType":"1608","messageId":"1609","endLine":20,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1689","line":22,"column":3,"nodeType":"1608","messageId":"1609","endLine":22,"endColumn":9},{"ruleId":"1606","severity":1,"message":"1690","line":24,"column":3,"nodeType":"1608","messageId":"1609","endLine":24,"endColumn":6},{"ruleId":"1606","severity":1,"message":"1691","line":25,"column":3,"nodeType":"1608","messageId":"1609","endLine":25,"endColumn":6},{"ruleId":"1606","severity":1,"message":"1692","line":28,"column":3,"nodeType":"1608","messageId":"1609","endLine":28,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1693","line":29,"column":3,"nodeType":"1608","messageId":"1609","endLine":29,"endColumn":8},{"ruleId":"1606","severity":1,"message":"1661","line":33,"column":3,"nodeType":"1608","messageId":"1609","endLine":33,"endColumn":10},{"ruleId":"1606","severity":1,"message":"1694","line":37,"column":3,"nodeType":"1608","messageId":"1609","endLine":37,"endColumn":9},{"ruleId":"1606","severity":1,"message":"1695","line":42,"column":8,"nodeType":"1608","messageId":"1609","endLine":42,"endColumn":24},{"ruleId":"1606","severity":1,"message":"1696","line":49,"column":8,"nodeType":"1608","messageId":"1609","endLine":49,"endColumn":29},{"ruleId":"1606","severity":1,"message":"1697","line":59,"column":17,"nodeType":"1608","messageId":"1609","endLine":59,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1698","line":60,"column":9,"nodeType":"1608","messageId":"1609","endLine":60,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1699","line":141,"column":13,"nodeType":"1608","messageId":"1609","endLine":141,"endColumn":23},{"ruleId":"1700","severity":1,"message":"1701","line":276,"column":49,"nodeType":"1702","messageId":"1703","endLine":276,"endColumn":50,"fix":"1704"},{"ruleId":"1629","severity":1,"message":"1705","line":356,"column":25,"nodeType":"1631","messageId":"1632","endLine":356,"endColumn":27},{"ruleId":"1653","severity":1,"message":"1654","line":377,"column":16,"nodeType":"1655","endLine":380,"endColumn":9},{"ruleId":"1706","severity":1,"message":"1707","line":453,"column":9,"nodeType":"1708","messageId":"1632","endLine":453,"endColumn":25},{"ruleId":"1706","severity":1,"message":"1709","line":454,"column":9,"nodeType":"1708","messageId":"1632","endLine":454,"endColumn":26},{"ruleId":"1606","severity":1,"message":"1643","line":2,"column":8,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1660","line":3,"column":9,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1665","line":3,"column":15,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1690","line":3,"column":23,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":26},{"ruleId":"1606","severity":1,"message":"1691","line":3,"column":28,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":31},{"ruleId":"1606","severity":1,"message":"1710","line":3,"column":33,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":38},{"ruleId":"1606","severity":1,"message":"1711","line":4,"column":10,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1712","line":2,"column":8,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1713","line":4,"column":10,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1643","line":5,"column":8,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1635","line":6,"column":9,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1690","line":27,"column":10,"nodeType":"1608","messageId":"1609","endLine":27,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1691","line":27,"column":15,"nodeType":"1608","messageId":"1609","endLine":27,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1661","line":27,"column":20,"nodeType":"1608","messageId":"1609","endLine":27,"endColumn":27},{"ruleId":"1668","severity":1,"message":"1669","line":30,"column":3,"nodeType":"1670","messageId":"1671","endLine":32,"endColumn":4},{"ruleId":"1606","severity":1,"message":"1714","line":63,"column":11,"nodeType":"1608","messageId":"1609","endLine":63,"endColumn":17},{"ruleId":"1649","severity":1,"message":"1650","line":64,"column":5,"nodeType":"1651","messageId":"1652","endLine":69,"endColumn":8},{"ruleId":"1715","severity":1,"message":"1716","line":64,"column":32,"nodeType":"1717","messageId":"1718","endLine":64,"endColumn":34},{"ruleId":"1606","severity":1,"message":"1719","line":75,"column":12,"nodeType":"1608","messageId":"1609","endLine":75,"endColumn":23},{"ruleId":"1606","severity":1,"message":"1720","line":9,"column":38,"nodeType":"1608","messageId":"1609","endLine":9,"endColumn":60},{"ruleId":"1668","severity":1,"message":"1669","line":14,"column":3,"nodeType":"1670","messageId":"1671","endLine":16,"endColumn":4},{"ruleId":"1606","severity":1,"message":"1721","line":3,"column":8,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":32},{"ruleId":"1606","severity":1,"message":"1635","line":4,"column":10,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":17},{"ruleId":"1668","severity":1,"message":"1669","line":10,"column":3,"nodeType":"1670","messageId":"1671","endLine":12,"endColumn":4},{"ruleId":"1606","severity":1,"message":"1722","line":124,"column":7,"nodeType":"1608","messageId":"1609","endLine":124,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1711","line":5,"column":10,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1643","line":3,"column":8,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1712","line":2,"column":8,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1635","line":3,"column":9,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1643","line":5,"column":8,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1713","line":6,"column":10,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":15},{"ruleId":"1668","severity":1,"message":"1669","line":11,"column":3,"nodeType":"1670","messageId":"1671","endLine":13,"endColumn":4},{"ruleId":"1606","severity":1,"message":"1723","line":151,"column":13,"nodeType":"1608","messageId":"1609","endLine":151,"endColumn":24},{"ruleId":"1677","severity":1,"message":"1678","line":156,"column":11,"nodeType":"1679","endLine":156,"endColumn":69},{"ruleId":"1606","severity":1,"message":"1724","line":184,"column":13,"nodeType":"1608","messageId":"1609","endLine":184,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1643","line":4,"column":8,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1725","line":5,"column":10,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1663","line":5,"column":16,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1726","line":5,"column":32,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":40},{"ruleId":"1606","severity":1,"message":"1727","line":1,"column":16,"nodeType":"1608","messageId":"1609","endLine":1,"endColumn":26},{"ruleId":"1606","severity":1,"message":"1728","line":47,"column":11,"nodeType":"1608","messageId":"1609","endLine":47,"endColumn":28},{"ruleId":"1606","severity":1,"message":"1729","line":3,"column":8,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1643","line":4,"column":8,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1730","line":6,"column":10,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1673","line":7,"column":10,"nodeType":"1608","messageId":"1609","endLine":7,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1667","line":8,"column":10,"nodeType":"1608","messageId":"1609","endLine":8,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1634","line":9,"column":10,"nodeType":"1608","messageId":"1609","endLine":9,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1710","line":11,"column":10,"nodeType":"1608","messageId":"1609","endLine":11,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1689","line":12,"column":4,"nodeType":"1608","messageId":"1609","endLine":12,"endColumn":10},{"ruleId":"1606","severity":1,"message":"1731","line":13,"column":5,"nodeType":"1608","messageId":"1609","endLine":13,"endColumn":12},{"ruleId":"1606","severity":1,"message":"1725","line":14,"column":5,"nodeType":"1608","messageId":"1609","endLine":14,"endColumn":9},{"ruleId":"1606","severity":1,"message":"1691","line":17,"column":5,"nodeType":"1608","messageId":"1609","endLine":17,"endColumn":8},{"ruleId":"1606","severity":1,"message":"1690","line":18,"column":5,"nodeType":"1608","messageId":"1609","endLine":18,"endColumn":8},{"ruleId":"1606","severity":1,"message":"1732","line":23,"column":5,"nodeType":"1608","messageId":"1609","endLine":23,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1733","line":24,"column":5,"nodeType":"1608","messageId":"1609","endLine":24,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1734","line":25,"column":5,"nodeType":"1608","messageId":"1609","endLine":25,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1735","line":34,"column":8,"nodeType":"1608","messageId":"1609","endLine":34,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1736","line":153,"column":11,"nodeType":"1608","messageId":"1609","endLine":153,"endColumn":23},{"ruleId":"1606","severity":1,"message":"1737","line":169,"column":7,"nodeType":"1608","messageId":"1609","endLine":169,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1736","line":196,"column":11,"nodeType":"1608","messageId":"1609","endLine":196,"endColumn":23},{"ruleId":"1606","severity":1,"message":"1738","line":230,"column":17,"nodeType":"1608","messageId":"1609","endLine":230,"endColumn":25},{"ruleId":"1606","severity":1,"message":"1739","line":231,"column":17,"nodeType":"1608","messageId":"1609","endLine":231,"endColumn":23},{"ruleId":"1740","severity":1,"message":"1741","line":285,"column":29,"nodeType":"1717","messageId":"1742","endLine":635,"endColumn":16},{"ruleId":"1629","severity":1,"message":"1630","line":293,"column":45,"nodeType":"1631","messageId":"1632","endLine":293,"endColumn":47},{"ruleId":"1629","severity":1,"message":"1630","line":339,"column":46,"nodeType":"1631","messageId":"1632","endLine":339,"endColumn":48},{"ruleId":"1629","severity":1,"message":"1630","line":356,"column":50,"nodeType":"1631","messageId":"1632","endLine":356,"endColumn":52},{"ruleId":"1629","severity":1,"message":"1630","line":367,"column":54,"nodeType":"1631","messageId":"1632","endLine":367,"endColumn":56},{"ruleId":"1629","severity":1,"message":"1630","line":389,"column":47,"nodeType":"1631","messageId":"1632","endLine":389,"endColumn":49},{"ruleId":"1677","severity":1,"message":"1678","line":400,"column":23,"nodeType":"1679","endLine":404,"endColumn":26},{"ruleId":"1629","severity":1,"message":"1630","line":422,"column":45,"nodeType":"1631","messageId":"1632","endLine":422,"endColumn":47},{"ruleId":"1629","severity":1,"message":"1630","line":422,"column":64,"nodeType":"1631","messageId":"1632","endLine":422,"endColumn":66},{"ruleId":"1629","severity":1,"message":"1630","line":464,"column":53,"nodeType":"1631","messageId":"1632","endLine":464,"endColumn":55},{"ruleId":"1629","severity":1,"message":"1630","line":512,"column":54,"nodeType":"1631","messageId":"1632","endLine":512,"endColumn":56},{"ruleId":"1629","severity":1,"message":"1630","line":512,"column":108,"nodeType":"1631","messageId":"1632","endLine":512,"endColumn":110},{"ruleId":"1629","severity":1,"message":"1630","line":514,"column":56,"nodeType":"1631","messageId":"1632","endLine":514,"endColumn":58},{"ruleId":"1606","severity":1,"message":"1743","line":860,"column":15,"nodeType":"1608","messageId":"1609","endLine":860,"endColumn":20},{"ruleId":"1744","severity":1,"message":"1745","line":864,"column":5,"nodeType":"1746","messageId":"1747","endLine":866,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1729","line":3,"column":8,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1689","line":5,"column":10,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1725","line":5,"column":18,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1663","line":5,"column":24,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":30},{"ruleId":"1606","severity":1,"message":"1661","line":5,"column":32,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":39},{"ruleId":"1606","severity":1,"message":"1691","line":5,"column":41,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":44},{"ruleId":"1606","severity":1,"message":"1690","line":5,"column":46,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":49},{"ruleId":"1606","severity":1,"message":"1748","line":5,"column":51,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":54},{"ruleId":"1606","severity":1,"message":"1736","line":142,"column":11,"nodeType":"1608","messageId":"1609","endLine":142,"endColumn":23},{"ruleId":"1706","severity":1,"message":"1749","line":308,"column":5,"nodeType":"1708","messageId":"1632","endLine":308,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1750","line":2,"column":10,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":29},{"ruleId":"1606","severity":1,"message":"1751","line":4,"column":8,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":12},{"ruleId":"1606","severity":1,"message":"1752","line":5,"column":8,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1643","line":3,"column":8,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1634","line":4,"column":10,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1710","line":6,"column":10,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1689","line":7,"column":4,"nodeType":"1608","messageId":"1609","endLine":7,"endColumn":10},{"ruleId":"1606","severity":1,"message":"1731","line":8,"column":5,"nodeType":"1608","messageId":"1609","endLine":8,"endColumn":12},{"ruleId":"1606","severity":1,"message":"1725","line":9,"column":5,"nodeType":"1608","messageId":"1609","endLine":9,"endColumn":9},{"ruleId":"1606","severity":1,"message":"1691","line":12,"column":5,"nodeType":"1608","messageId":"1609","endLine":12,"endColumn":8},{"ruleId":"1606","severity":1,"message":"1690","line":13,"column":5,"nodeType":"1608","messageId":"1609","endLine":13,"endColumn":8},{"ruleId":"1606","severity":1,"message":"1732","line":18,"column":5,"nodeType":"1608","messageId":"1609","endLine":18,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1733","line":19,"column":5,"nodeType":"1608","messageId":"1609","endLine":19,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1734","line":20,"column":5,"nodeType":"1608","messageId":"1609","endLine":20,"endColumn":17},{"ruleId":"1629","severity":1,"message":"1630","line":47,"column":27,"nodeType":"1631","messageId":"1632","endLine":47,"endColumn":29},{"ruleId":"1606","severity":1,"message":"1753","line":111,"column":11,"nodeType":"1608","messageId":"1609","endLine":111,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1754","line":112,"column":11,"nodeType":"1608","messageId":"1609","endLine":112,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1755","line":115,"column":9,"nodeType":"1608","messageId":"1609","endLine":115,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1756","line":183,"column":11,"nodeType":"1608","messageId":"1609","endLine":183,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1757","line":206,"column":7,"nodeType":"1608","messageId":"1609","endLine":206,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1738","line":216,"column":15,"nodeType":"1608","messageId":"1609","endLine":216,"endColumn":23},{"ruleId":"1606","severity":1,"message":"1739","line":217,"column":15,"nodeType":"1608","messageId":"1609","endLine":217,"endColumn":21},{"ruleId":"1629","severity":1,"message":"1630","line":293,"column":43,"nodeType":"1631","messageId":"1632","endLine":293,"endColumn":45},{"ruleId":"1629","severity":1,"message":"1630","line":339,"column":44,"nodeType":"1631","messageId":"1632","endLine":339,"endColumn":46},{"ruleId":"1629","severity":1,"message":"1630","line":356,"column":48,"nodeType":"1631","messageId":"1632","endLine":356,"endColumn":50},{"ruleId":"1629","severity":1,"message":"1630","line":367,"column":52,"nodeType":"1631","messageId":"1632","endLine":367,"endColumn":54},{"ruleId":"1629","severity":1,"message":"1630","line":389,"column":45,"nodeType":"1631","messageId":"1632","endLine":389,"endColumn":47},{"ruleId":"1677","severity":1,"message":"1678","line":400,"column":21,"nodeType":"1679","endLine":404,"endColumn":24},{"ruleId":"1629","severity":1,"message":"1630","line":422,"column":43,"nodeType":"1631","messageId":"1632","endLine":422,"endColumn":45},{"ruleId":"1629","severity":1,"message":"1630","line":422,"column":62,"nodeType":"1631","messageId":"1632","endLine":422,"endColumn":64},{"ruleId":"1629","severity":1,"message":"1630","line":464,"column":51,"nodeType":"1631","messageId":"1632","endLine":464,"endColumn":53},{"ruleId":"1629","severity":1,"message":"1630","line":512,"column":52,"nodeType":"1631","messageId":"1632","endLine":512,"endColumn":54},{"ruleId":"1629","severity":1,"message":"1630","line":512,"column":106,"nodeType":"1631","messageId":"1632","endLine":512,"endColumn":108},{"ruleId":"1629","severity":1,"message":"1630","line":514,"column":54,"nodeType":"1631","messageId":"1632","endLine":514,"endColumn":56},{"ruleId":"1649","severity":1,"message":"1650","line":647,"column":7,"nodeType":"1651","messageId":"1652","endLine":674,"endColumn":12},{"ruleId":"1629","severity":1,"message":"1630","line":735,"column":22,"nodeType":"1631","messageId":"1632","endLine":735,"endColumn":24},{"ruleId":"1758","severity":1,"message":"1759","line":832,"column":43,"nodeType":"1702","messageId":"1760","endLine":832,"endColumn":54,"fix":"1761"},{"ruleId":"1606","severity":1,"message":"1729","line":3,"column":8,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1643","line":4,"column":8,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1634","line":5,"column":10,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1710","line":6,"column":10,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1689","line":7,"column":4,"nodeType":"1608","messageId":"1609","endLine":7,"endColumn":10},{"ruleId":"1606","severity":1,"message":"1725","line":9,"column":5,"nodeType":"1608","messageId":"1609","endLine":9,"endColumn":9},{"ruleId":"1606","severity":1,"message":"1691","line":12,"column":5,"nodeType":"1608","messageId":"1609","endLine":12,"endColumn":8},{"ruleId":"1606","severity":1,"message":"1690","line":13,"column":5,"nodeType":"1608","messageId":"1609","endLine":13,"endColumn":8},{"ruleId":"1606","severity":1,"message":"1732","line":18,"column":5,"nodeType":"1608","messageId":"1609","endLine":18,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1733","line":19,"column":5,"nodeType":"1608","messageId":"1609","endLine":19,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1667","line":22,"column":10,"nodeType":"1608","messageId":"1609","endLine":22,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1762","line":22,"column":24,"nodeType":"1608","messageId":"1609","endLine":22,"endColumn":41},{"ruleId":"1606","severity":1,"message":"1730","line":24,"column":10,"nodeType":"1608","messageId":"1609","endLine":24,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1673","line":25,"column":10,"nodeType":"1608","messageId":"1609","endLine":25,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1763","line":41,"column":8,"nodeType":"1608","messageId":"1609","endLine":41,"endColumn":27},{"ruleId":"1606","severity":1,"message":"1764","line":44,"column":9,"nodeType":"1608","messageId":"1609","endLine":44,"endColumn":14},{"ruleId":"1629","severity":1,"message":"1630","line":86,"column":27,"nodeType":"1631","messageId":"1632","endLine":86,"endColumn":29},{"ruleId":"1606","severity":1,"message":"1765","line":148,"column":11,"nodeType":"1608","messageId":"1609","endLine":148,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1766","line":241,"column":11,"nodeType":"1608","messageId":"1609","endLine":241,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1767","line":247,"column":11,"nodeType":"1608","messageId":"1609","endLine":247,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1754","line":248,"column":11,"nodeType":"1608","messageId":"1609","endLine":248,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1768","line":250,"column":11,"nodeType":"1608","messageId":"1609","endLine":250,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1769","line":251,"column":11,"nodeType":"1608","messageId":"1609","endLine":251,"endColumn":23},{"ruleId":"1606","severity":1,"message":"1756","line":262,"column":11,"nodeType":"1608","messageId":"1609","endLine":262,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1770","line":265,"column":9,"nodeType":"1608","messageId":"1609","endLine":265,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1757","line":268,"column":9,"nodeType":"1608","messageId":"1609","endLine":268,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1771","line":270,"column":11,"nodeType":"1608","messageId":"1609","endLine":270,"endColumn":24},{"ruleId":"1606","severity":1,"message":"1772","line":283,"column":15,"nodeType":"1608","messageId":"1609","endLine":283,"endColumn":28},{"ruleId":"1606","severity":1,"message":"1755","line":400,"column":15,"nodeType":"1608","messageId":"1609","endLine":400,"endColumn":24},{"ruleId":"1740","severity":1,"message":"1773","line":405,"column":27,"nodeType":"1717","messageId":"1742","endLine":801,"endColumn":14},{"ruleId":"1629","severity":1,"message":"1630","line":414,"column":43,"nodeType":"1631","messageId":"1632","endLine":414,"endColumn":45},{"ruleId":"1629","severity":1,"message":"1630","line":460,"column":44,"nodeType":"1631","messageId":"1632","endLine":460,"endColumn":46},{"ruleId":"1629","severity":1,"message":"1630","line":477,"column":48,"nodeType":"1631","messageId":"1632","endLine":477,"endColumn":50},{"ruleId":"1629","severity":1,"message":"1630","line":488,"column":52,"nodeType":"1631","messageId":"1632","endLine":488,"endColumn":54},{"ruleId":"1629","severity":1,"message":"1630","line":510,"column":45,"nodeType":"1631","messageId":"1632","endLine":510,"endColumn":47},{"ruleId":"1677","severity":1,"message":"1678","line":521,"column":21,"nodeType":"1679","endLine":525,"endColumn":24},{"ruleId":"1629","severity":1,"message":"1630","line":543,"column":43,"nodeType":"1631","messageId":"1632","endLine":543,"endColumn":45},{"ruleId":"1629","severity":1,"message":"1630","line":543,"column":62,"nodeType":"1631","messageId":"1632","endLine":543,"endColumn":64},{"ruleId":"1629","severity":1,"message":"1630","line":586,"column":51,"nodeType":"1631","messageId":"1632","endLine":586,"endColumn":53},{"ruleId":"1629","severity":1,"message":"1630","line":634,"column":52,"nodeType":"1631","messageId":"1632","endLine":634,"endColumn":54},{"ruleId":"1629","severity":1,"message":"1630","line":636,"column":54,"nodeType":"1631","messageId":"1632","endLine":636,"endColumn":56},{"ruleId":"1629","severity":1,"message":"1630","line":732,"column":41,"nodeType":"1631","messageId":"1632","endLine":732,"endColumn":43},{"ruleId":"1629","severity":1,"message":"1630","line":733,"column":40,"nodeType":"1631","messageId":"1632","endLine":733,"endColumn":42},{"ruleId":"1629","severity":1,"message":"1630","line":882,"column":22,"nodeType":"1631","messageId":"1632","endLine":882,"endColumn":24},{"ruleId":"1606","severity":1,"message":"1774","line":1034,"column":11,"nodeType":"1608","messageId":"1609","endLine":1034,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1643","line":2,"column":8,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1665","line":5,"column":10,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1775","line":6,"column":10,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1633","line":10,"column":8,"nodeType":"1608","messageId":"1609","endLine":10,"endColumn":37},{"ruleId":"1668","severity":1,"message":"1669","line":21,"column":3,"nodeType":"1670","messageId":"1671","endLine":24,"endColumn":4},{"ruleId":"1629","severity":1,"message":"1630","line":102,"column":20,"nodeType":"1631","messageId":"1632","endLine":102,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1643","line":2,"column":8,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1776","line":3,"column":10,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1619","line":3,"column":17,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":28},{"ruleId":"1606","severity":1,"message":"1777","line":3,"column":30,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":36},{"ruleId":"1606","severity":1,"message":"1711","line":3,"column":38,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":42},{"ruleId":"1606","severity":1,"message":"1775","line":7,"column":10,"nodeType":"1608","messageId":"1609","endLine":7,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1778","line":9,"column":27,"nodeType":"1608","messageId":"1609","endLine":9,"endColumn":39},{"ruleId":"1606","severity":1,"message":"1779","line":14,"column":8,"nodeType":"1608","messageId":"1609","endLine":14,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1751","line":15,"column":8,"nodeType":"1608","messageId":"1609","endLine":15,"endColumn":12},{"ruleId":"1606","severity":1,"message":"1780","line":20,"column":8,"nodeType":"1608","messageId":"1609","endLine":20,"endColumn":24},{"ruleId":"1606","severity":1,"message":"1781","line":25,"column":8,"nodeType":"1608","messageId":"1609","endLine":25,"endColumn":24},{"ruleId":"1606","severity":1,"message":"1782","line":26,"column":8,"nodeType":"1608","messageId":"1609","endLine":26,"endColumn":23},{"ruleId":"1668","severity":1,"message":"1669","line":43,"column":3,"nodeType":"1670","messageId":"1671","endLine":47,"endColumn":4},{"ruleId":"1606","severity":1,"message":"1783","line":361,"column":9,"nodeType":"1608","messageId":"1609","endLine":361,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1676","line":366,"column":11,"nodeType":"1608","messageId":"1609","endLine":366,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1784","line":370,"column":11,"nodeType":"1608","messageId":"1609","endLine":370,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1785","line":373,"column":11,"nodeType":"1608","messageId":"1609","endLine":373,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1786","line":379,"column":11,"nodeType":"1608","messageId":"1609","endLine":379,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1787","line":387,"column":11,"nodeType":"1608","messageId":"1609","endLine":387,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1788","line":728,"column":15,"nodeType":"1608","messageId":"1609","endLine":728,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1789","line":764,"column":11,"nodeType":"1608","messageId":"1609","endLine":764,"endColumn":23},{"ruleId":"1606","severity":1,"message":"1790","line":156,"column":9,"nodeType":"1608","messageId":"1609","endLine":156,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1791","line":158,"column":9,"nodeType":"1608","messageId":"1609","endLine":158,"endColumn":22},{"ruleId":"1677","severity":1,"message":"1678","line":244,"column":18,"nodeType":"1679","endLine":247,"endColumn":21},{"ruleId":"1677","severity":1,"message":"1678","line":262,"column":21,"nodeType":"1679","endLine":265,"endColumn":24},{"ruleId":"1677","severity":1,"message":"1678","line":273,"column":18,"nodeType":"1679","endLine":275,"endColumn":81},{"ruleId":"1606","severity":1,"message":"1643","line":2,"column":8,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":13},{"ruleId":"1668","severity":1,"message":"1669","line":14,"column":3,"nodeType":"1670","messageId":"1671","endLine":17,"endColumn":4},{"ruleId":"1677","severity":1,"message":"1678","line":152,"column":9,"nodeType":"1679","endLine":154,"endColumn":59},{"ruleId":"1606","severity":1,"message":"1792","line":3,"column":13,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1667","line":4,"column":3,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1793","line":5,"column":3,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1794","line":7,"column":3,"nodeType":"1608","messageId":"1609","endLine":7,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1674","line":9,"column":24,"nodeType":"1608","messageId":"1609","endLine":9,"endColumn":30},{"ruleId":"1606","severity":1,"message":"1777","line":10,"column":7,"nodeType":"1608","messageId":"1609","endLine":10,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1776","line":11,"column":7,"nodeType":"1608","messageId":"1609","endLine":11,"endColumn":12},{"ruleId":"1606","severity":1,"message":"1795","line":13,"column":7,"nodeType":"1608","messageId":"1609","endLine":13,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1619","line":14,"column":7,"nodeType":"1608","messageId":"1609","endLine":14,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1796","line":15,"column":7,"nodeType":"1608","messageId":"1609","endLine":15,"endColumn":16},{"ruleId":"1677","severity":1,"message":"1678","line":61,"column":15,"nodeType":"1679","endLine":64,"endColumn":17},{"ruleId":"1677","severity":1,"message":"1678","line":97,"column":13,"nodeType":"1679","endLine":100,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1643","line":4,"column":8,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1776","line":5,"column":10,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1619","line":5,"column":17,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":28},{"ruleId":"1606","severity":1,"message":"1777","line":5,"column":30,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":36},{"ruleId":"1606","severity":1,"message":"1711","line":5,"column":38,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":42},{"ruleId":"1606","severity":1,"message":"1775","line":8,"column":10,"nodeType":"1608","messageId":"1609","endLine":8,"endColumn":14},{"ruleId":"1668","severity":1,"message":"1669","line":28,"column":3,"nodeType":"1670","messageId":"1671","endLine":32,"endColumn":4},{"ruleId":"1606","severity":1,"message":"1797","line":324,"column":11,"nodeType":"1608","messageId":"1609","endLine":324,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1783","line":328,"column":9,"nodeType":"1608","messageId":"1609","endLine":328,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1676","line":333,"column":11,"nodeType":"1608","messageId":"1609","endLine":333,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1784","line":336,"column":11,"nodeType":"1608","messageId":"1609","endLine":336,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1785","line":339,"column":11,"nodeType":"1608","messageId":"1609","endLine":339,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1787","line":342,"column":11,"nodeType":"1608","messageId":"1609","endLine":342,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1786","line":348,"column":11,"nodeType":"1608","messageId":"1609","endLine":348,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1788","line":695,"column":13,"nodeType":"1608","messageId":"1609","endLine":695,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1798","line":700,"column":9,"nodeType":"1608","messageId":"1609","endLine":700,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1643","line":4,"column":8,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1776","line":5,"column":10,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1619","line":5,"column":17,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":28},{"ruleId":"1606","severity":1,"message":"1777","line":5,"column":30,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":36},{"ruleId":"1606","severity":1,"message":"1711","line":5,"column":38,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":42},{"ruleId":"1606","severity":1,"message":"1775","line":8,"column":10,"nodeType":"1608","messageId":"1609","endLine":8,"endColumn":14},{"ruleId":"1668","severity":1,"message":"1669","line":27,"column":3,"nodeType":"1670","messageId":"1671","endLine":31,"endColumn":4},{"ruleId":"1606","severity":1,"message":"1797","line":340,"column":11,"nodeType":"1608","messageId":"1609","endLine":340,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1783","line":344,"column":9,"nodeType":"1608","messageId":"1609","endLine":344,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1676","line":349,"column":11,"nodeType":"1608","messageId":"1609","endLine":349,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1784","line":352,"column":11,"nodeType":"1608","messageId":"1609","endLine":352,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1785","line":355,"column":11,"nodeType":"1608","messageId":"1609","endLine":355,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1787","line":358,"column":11,"nodeType":"1608","messageId":"1609","endLine":358,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1786","line":364,"column":11,"nodeType":"1608","messageId":"1609","endLine":364,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1710","line":4,"column":10,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1799","line":4,"column":33,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":38},{"ruleId":"1606","severity":1,"message":"1643","line":6,"column":8,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1800","line":3,"column":8,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":12},{"ruleId":"1606","severity":1,"message":"1801","line":5,"column":1,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1682","line":6,"column":1,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1721","line":3,"column":8,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":32},{"ruleId":"1668","severity":1,"message":"1669","line":9,"column":3,"nodeType":"1670","messageId":"1671","endLine":11,"endColumn":4},{"ruleId":"1606","severity":1,"message":"1802","line":3,"column":44,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":49},{"ruleId":"1606","severity":1,"message":"1803","line":4,"column":26,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":44},{"ruleId":"1606","severity":1,"message":"1804","line":4,"column":46,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":57},{"ruleId":"1606","severity":1,"message":"1801","line":4,"column":59,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":75},{"ruleId":"1606","severity":1,"message":"1667","line":4,"column":77,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":89},{"ruleId":"1606","severity":1,"message":"1805","line":5,"column":8,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":26},{"ruleId":"1606","severity":1,"message":"1806","line":17,"column":8,"nodeType":"1608","messageId":"1609","endLine":17,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1615","line":22,"column":15,"nodeType":"1608","messageId":"1609","endLine":22,"endColumn":25},{"ruleId":"1606","severity":1,"message":"1687","line":23,"column":9,"nodeType":"1608","messageId":"1609","endLine":23,"endColumn":23},{"ruleId":"1668","severity":1,"message":"1669","line":34,"column":3,"nodeType":"1670","messageId":"1671","endLine":38,"endColumn":4},{"ruleId":"1606","severity":1,"message":"1790","line":122,"column":9,"nodeType":"1608","messageId":"1609","endLine":122,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1791","line":127,"column":9,"nodeType":"1608","messageId":"1609","endLine":127,"endColumn":22},{"ruleId":"1629","severity":1,"message":"1630","line":170,"column":18,"nodeType":"1631","messageId":"1632","endLine":170,"endColumn":20},{"ruleId":"1629","severity":1,"message":"1630","line":172,"column":25,"nodeType":"1631","messageId":"1632","endLine":172,"endColumn":27},{"ruleId":"1606","severity":1,"message":"1807","line":465,"column":9,"nodeType":"1608","messageId":"1609","endLine":465,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1676","line":486,"column":9,"nodeType":"1608","messageId":"1609","endLine":486,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1808","line":487,"column":9,"nodeType":"1608","messageId":"1609","endLine":487,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1798","line":510,"column":9,"nodeType":"1608","messageId":"1609","endLine":510,"endColumn":17},{"ruleId":"1677","severity":1,"message":"1678","line":569,"column":17,"nodeType":"1679","endLine":572,"endColumn":20},{"ruleId":"1629","severity":1,"message":"1630","line":750,"column":29,"nodeType":"1631","messageId":"1632","endLine":750,"endColumn":31},{"ruleId":"1629","severity":1,"message":"1630","line":761,"column":33,"nodeType":"1631","messageId":"1632","endLine":761,"endColumn":35},{"ruleId":"1629","severity":1,"message":"1630","line":770,"column":37,"nodeType":"1631","messageId":"1632","endLine":770,"endColumn":39},{"ruleId":"1606","severity":1,"message":"1729","line":2,"column":8,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1809","line":3,"column":10,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1810","line":3,"column":19,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":26},{"ruleId":"1606","severity":1,"message":"1811","line":4,"column":10,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1812","line":82,"column":11,"nodeType":"1608","messageId":"1609","endLine":82,"endColumn":15},{"ruleId":"1629","severity":1,"message":"1630","line":152,"column":45,"nodeType":"1631","messageId":"1632","endLine":152,"endColumn":47},{"ruleId":"1606","severity":1,"message":"1813","line":9,"column":9,"nodeType":"1608","messageId":"1609","endLine":9,"endColumn":15},{"ruleId":"1668","severity":1,"message":"1669","line":13,"column":3,"nodeType":"1670","messageId":"1671","endLine":15,"endColumn":4},{"ruleId":"1814","severity":1,"message":"1815","line":26,"column":7,"nodeType":"1816","messageId":"1817","endLine":41,"endColumn":8},{"ruleId":"1606","severity":1,"message":"1818","line":2,"column":48,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":53},{"ruleId":"1606","severity":1,"message":"1819","line":3,"column":10,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1685","line":3,"column":24,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":44},{"ruleId":"1606","severity":1,"message":"1643","line":6,"column":8,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1667","line":8,"column":10,"nodeType":"1608","messageId":"1609","endLine":8,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1820","line":8,"column":24,"nodeType":"1608","messageId":"1609","endLine":8,"endColumn":36},{"ruleId":"1606","severity":1,"message":"1821","line":8,"column":38,"nodeType":"1608","messageId":"1609","endLine":8,"endColumn":51},{"ruleId":"1606","severity":1,"message":"1822","line":11,"column":13,"nodeType":"1608","messageId":"1609","endLine":11,"endColumn":29},{"ruleId":"1606","severity":1,"message":"1823","line":12,"column":8,"nodeType":"1608","messageId":"1609","endLine":12,"endColumn":26},{"ruleId":"1606","severity":1,"message":"1824","line":14,"column":10,"nodeType":"1608","messageId":"1609","endLine":14,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1825","line":14,"column":23,"nodeType":"1608","messageId":"1609","endLine":14,"endColumn":41},{"ruleId":"1606","severity":1,"message":"1826","line":860,"column":11,"nodeType":"1608","messageId":"1609","endLine":860,"endColumn":15},{"ruleId":"1827","severity":1,"message":"1828","line":878,"column":9,"nodeType":"1679","endLine":878,"endColumn":51},{"ruleId":"1606","severity":1,"message":"1729","line":3,"column":8,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1775","line":5,"column":10,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1829","line":6,"column":10,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":23},{"ruleId":"1606","severity":1,"message":"1830","line":7,"column":30,"nodeType":"1608","messageId":"1609","endLine":7,"endColumn":40},{"ruleId":"1606","severity":1,"message":"1831","line":9,"column":23,"nodeType":"1608","messageId":"1609","endLine":9,"endColumn":38},{"ruleId":"1606","severity":1,"message":"1825","line":9,"column":40,"nodeType":"1608","messageId":"1609","endLine":9,"endColumn":58},{"ruleId":"1606","severity":1,"message":"1667","line":9,"column":60,"nodeType":"1608","messageId":"1609","endLine":9,"endColumn":72},{"ruleId":"1606","severity":1,"message":"1682","line":9,"column":74,"nodeType":"1608","messageId":"1609","endLine":9,"endColumn":88},{"ruleId":"1832","severity":1,"message":"1833","line":51,"column":5,"nodeType":"1834","endLine":51,"endColumn":37},{"ruleId":"1606","severity":1,"message":"1835","line":137,"column":13,"nodeType":"1608","messageId":"1609","endLine":137,"endColumn":22},{"ruleId":"1836","severity":1,"message":"1837","line":292,"column":26,"nodeType":"1608","messageId":"1838","endLine":292,"endColumn":33},{"ruleId":"1836","severity":1,"message":"1837","line":332,"column":31,"nodeType":"1608","messageId":"1838","endLine":332,"endColumn":38},{"ruleId":"1836","severity":1,"message":"1837","line":350,"column":27,"nodeType":"1608","messageId":"1838","endLine":350,"endColumn":34},{"ruleId":"1836","severity":1,"message":"1839","line":387,"column":25,"nodeType":"1608","messageId":"1838","endLine":387,"endColumn":34},{"ruleId":"1606","severity":1,"message":"1840","line":414,"column":12,"nodeType":"1608","messageId":"1609","endLine":414,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1841","line":617,"column":11,"nodeType":"1608","messageId":"1609","endLine":617,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1676","line":629,"column":7,"nodeType":"1608","messageId":"1609","endLine":629,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1842","line":7,"column":8,"nodeType":"1608","messageId":"1609","endLine":7,"endColumn":16},{"ruleId":"1677","severity":1,"message":"1678","line":134,"column":17,"nodeType":"1679","endLine":136,"endColumn":84},{"ruleId":"1606","severity":1,"message":"1732","line":4,"column":27,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":37},{"ruleId":"1606","severity":1,"message":"1830","line":4,"column":39,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":49},{"ruleId":"1606","severity":1,"message":"1843","line":4,"column":66,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":72},{"ruleId":"1606","severity":1,"message":"1799","line":4,"column":74,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":79},{"ruleId":"1606","severity":1,"message":"1689","line":4,"column":81,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":87},{"ruleId":"1606","severity":1,"message":"1844","line":11,"column":9,"nodeType":"1608","messageId":"1609","endLine":11,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1845","line":27,"column":7,"nodeType":"1608","messageId":"1609","endLine":27,"endColumn":12},{"ruleId":"1606","severity":1,"message":"1846","line":37,"column":7,"nodeType":"1608","messageId":"1609","endLine":37,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1844","line":136,"column":13,"nodeType":"1608","messageId":"1609","endLine":136,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1847","line":139,"column":45,"nodeType":"1608","messageId":"1609","endLine":139,"endColumn":50},{"ruleId":"1606","severity":1,"message":"1666","line":3,"column":41,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":54},{"ruleId":"1606","severity":1,"message":"1672","line":8,"column":9,"nodeType":"1608","messageId":"1609","endLine":8,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1667","line":3,"column":10,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1762","line":3,"column":24,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":41},{"ruleId":"1629","severity":1,"message":"1630","line":73,"column":40,"nodeType":"1631","messageId":"1632","endLine":73,"endColumn":42},{"ruleId":"1629","severity":1,"message":"1630","line":90,"column":42,"nodeType":"1631","messageId":"1632","endLine":90,"endColumn":44},{"ruleId":"1606","severity":1,"message":"1665","line":2,"column":10,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1663","line":2,"column":25,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":31},{"ruleId":"1606","severity":1,"message":"1848","line":6,"column":8,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":23},{"ruleId":"1606","severity":1,"message":"1849","line":133,"column":7,"nodeType":"1608","messageId":"1609","endLine":133,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1665","line":2,"column":10,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1643","line":5,"column":8,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1850","line":9,"column":8,"nodeType":"1608","messageId":"1609","endLine":9,"endColumn":25},{"ruleId":"1758","severity":1,"message":"1851","line":56,"column":5,"nodeType":"1702","messageId":"1760","endLine":63,"endColumn":13,"fix":"1852"},{"ruleId":"1758","severity":1,"message":"1851","line":90,"column":5,"nodeType":"1702","messageId":"1760","endLine":97,"endColumn":13,"fix":"1853"},{"ruleId":"1606","severity":1,"message":"1667","line":3,"column":10,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1762","line":3,"column":24,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":41},{"ruleId":"1677","severity":1,"message":"1678","line":42,"column":13,"nodeType":"1679","endLine":44,"endColumn":71},{"ruleId":"1606","severity":1,"message":"1854","line":64,"column":11,"nodeType":"1608","messageId":"1609","endLine":64,"endColumn":23},{"ruleId":"1649","severity":1,"message":"1650","line":60,"column":5,"nodeType":"1651","messageId":"1652","endLine":107,"endColumn":6},{"ruleId":"1715","severity":1,"message":"1716","line":62,"column":14,"nodeType":"1717","messageId":"1718","endLine":62,"endColumn":16},{"ruleId":"1677","severity":1,"message":"1678","line":68,"column":15,"nodeType":"1679","endLine":70,"endColumn":63},{"ruleId":"1677","severity":1,"message":"1678","line":84,"column":21,"nodeType":"1679","endLine":86,"endColumn":69},{"ruleId":"1677","severity":1,"message":"1678","line":98,"column":17,"nodeType":"1679","endLine":100,"endColumn":65},{"ruleId":"1606","severity":1,"message":"1854","line":123,"column":11,"nodeType":"1608","messageId":"1609","endLine":123,"endColumn":23},{"ruleId":"1606","severity":1,"message":"1775","line":4,"column":10,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1830","line":6,"column":22,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":32},{"ruleId":"1606","severity":1,"message":"1799","line":6,"column":57,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":62},{"ruleId":"1606","severity":1,"message":"1824","line":7,"column":10,"nodeType":"1608","messageId":"1609","endLine":7,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1825","line":7,"column":23,"nodeType":"1608","messageId":"1609","endLine":7,"endColumn":41},{"ruleId":"1606","severity":1,"message":"1855","line":27,"column":7,"nodeType":"1608","messageId":"1609","endLine":27,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1856","line":58,"column":7,"nodeType":"1608","messageId":"1609","endLine":58,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1857","line":71,"column":7,"nodeType":"1608","messageId":"1609","endLine":71,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1835","line":96,"column":13,"nodeType":"1608","messageId":"1609","endLine":96,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1858","line":110,"column":7,"nodeType":"1608","messageId":"1609","endLine":110,"endColumn":23},{"ruleId":"1606","severity":1,"message":"1859","line":122,"column":7,"nodeType":"1608","messageId":"1609","endLine":122,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1860","line":133,"column":7,"nodeType":"1608","messageId":"1609","endLine":133,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1861","line":137,"column":7,"nodeType":"1608","messageId":"1609","endLine":137,"endColumn":18},{"ruleId":"1836","severity":1,"message":"1837","line":268,"column":26,"nodeType":"1608","messageId":"1838","endLine":268,"endColumn":33},{"ruleId":"1836","severity":1,"message":"1837","line":308,"column":31,"nodeType":"1608","messageId":"1838","endLine":308,"endColumn":38},{"ruleId":"1836","severity":1,"message":"1837","line":326,"column":27,"nodeType":"1608","messageId":"1838","endLine":326,"endColumn":34},{"ruleId":"1836","severity":1,"message":"1839","line":363,"column":25,"nodeType":"1608","messageId":"1838","endLine":363,"endColumn":34},{"ruleId":"1606","severity":1,"message":"1840","line":391,"column":12,"nodeType":"1608","messageId":"1609","endLine":391,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1862","line":485,"column":52,"nodeType":"1608","messageId":"1609","endLine":485,"endColumn":62},{"ruleId":"1606","severity":1,"message":"1830","line":5,"column":22,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":32},{"ruleId":"1606","severity":1,"message":"1665","line":5,"column":34,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":40},{"ruleId":"1606","severity":1,"message":"1799","line":5,"column":57,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":62},{"ruleId":"1606","severity":1,"message":"1660","line":5,"column":64,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":68},{"ruleId":"1606","severity":1,"message":"1863","line":9,"column":10,"nodeType":"1608","messageId":"1609","endLine":9,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1864","line":9,"column":17,"nodeType":"1608","messageId":"1609","endLine":9,"endColumn":26},{"ruleId":"1606","severity":1,"message":"1865","line":9,"column":35,"nodeType":"1608","messageId":"1609","endLine":9,"endColumn":52},{"ruleId":"1606","severity":1,"message":"1844","line":19,"column":9,"nodeType":"1608","messageId":"1609","endLine":19,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1866","line":20,"column":7,"nodeType":"1608","messageId":"1609","endLine":20,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1867","line":21,"column":7,"nodeType":"1608","messageId":"1609","endLine":21,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1868","line":31,"column":7,"nodeType":"1608","messageId":"1609","endLine":31,"endColumn":26},{"ruleId":"1606","severity":1,"message":"1869","line":45,"column":7,"nodeType":"1608","messageId":"1609","endLine":45,"endColumn":28},{"ruleId":"1606","severity":1,"message":"1835","line":76,"column":13,"nodeType":"1608","messageId":"1609","endLine":76,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1870","line":90,"column":7,"nodeType":"1608","messageId":"1609","endLine":90,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1856","line":93,"column":7,"nodeType":"1608","messageId":"1609","endLine":93,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1757","line":228,"column":15,"nodeType":"1608","messageId":"1609","endLine":228,"endColumn":28},{"ruleId":"1606","severity":1,"message":"1770","line":229,"column":15,"nodeType":"1608","messageId":"1609","endLine":229,"endColumn":27},{"ruleId":"1836","severity":1,"message":"1837","line":613,"column":28,"nodeType":"1608","messageId":"1838","endLine":613,"endColumn":35},{"ruleId":"1836","severity":1,"message":"1837","line":653,"column":33,"nodeType":"1608","messageId":"1838","endLine":653,"endColumn":40},{"ruleId":"1836","severity":1,"message":"1837","line":671,"column":29,"nodeType":"1608","messageId":"1838","endLine":671,"endColumn":36},{"ruleId":"1836","severity":1,"message":"1839","line":708,"column":27,"nodeType":"1608","messageId":"1838","endLine":708,"endColumn":36},{"ruleId":"1606","severity":1,"message":"1840","line":735,"column":14,"nodeType":"1608","messageId":"1609","endLine":735,"endColumn":20},{"ruleId":"1871","severity":1,"message":"1872","line":743,"column":5,"nodeType":"1670","messageId":"1632","endLine":761,"endColumn":6},{"ruleId":"1871","severity":1,"message":"1873","line":763,"column":5,"nodeType":"1670","messageId":"1632","endLine":793,"endColumn":6},{"ruleId":"1606","severity":1,"message":"1874","line":779,"column":17,"nodeType":"1608","messageId":"1609","endLine":779,"endColumn":34},{"ruleId":"1871","severity":1,"message":"1875","line":795,"column":5,"nodeType":"1670","messageId":"1632","endLine":813,"endColumn":6},{"ruleId":"1871","severity":1,"message":"1876","line":815,"column":5,"nodeType":"1670","messageId":"1632","endLine":1080,"endColumn":6},{"ruleId":"1606","severity":1,"message":"1757","line":863,"column":13,"nodeType":"1608","messageId":"1609","endLine":863,"endColumn":26},{"ruleId":"1606","severity":1,"message":"1770","line":864,"column":13,"nodeType":"1608","messageId":"1609","endLine":864,"endColumn":25},{"ruleId":"1629","severity":1,"message":"1630","line":1216,"column":20,"nodeType":"1631","messageId":"1632","endLine":1216,"endColumn":22},{"ruleId":"1629","severity":1,"message":"1630","line":1218,"column":27,"nodeType":"1631","messageId":"1632","endLine":1218,"endColumn":29},{"ruleId":"1606","severity":1,"message":"1877","line":1237,"column":13,"nodeType":"1608","messageId":"1609","endLine":1237,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1878","line":1239,"column":13,"nodeType":"1608","messageId":"1609","endLine":1239,"endColumn":20},{"ruleId":"1706","severity":1,"message":"1879","line":1255,"column":9,"nodeType":"1708","messageId":"1632","endLine":1255,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1830","line":5,"column":22,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":32},{"ruleId":"1606","severity":1,"message":"1665","line":5,"column":34,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":40},{"ruleId":"1606","severity":1,"message":"1799","line":5,"column":57,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":62},{"ruleId":"1606","severity":1,"message":"1863","line":9,"column":10,"nodeType":"1608","messageId":"1609","endLine":9,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1865","line":9,"column":35,"nodeType":"1608","messageId":"1609","endLine":9,"endColumn":52},{"ruleId":"1606","severity":1,"message":"1844","line":18,"column":9,"nodeType":"1608","messageId":"1609","endLine":18,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1866","line":19,"column":7,"nodeType":"1608","messageId":"1609","endLine":19,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1867","line":20,"column":7,"nodeType":"1608","messageId":"1609","endLine":20,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1868","line":30,"column":7,"nodeType":"1608","messageId":"1609","endLine":30,"endColumn":26},{"ruleId":"1606","severity":1,"message":"1869","line":44,"column":7,"nodeType":"1608","messageId":"1609","endLine":44,"endColumn":28},{"ruleId":"1606","severity":1,"message":"1835","line":75,"column":13,"nodeType":"1608","messageId":"1609","endLine":75,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1856","line":92,"column":7,"nodeType":"1608","messageId":"1609","endLine":92,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1757","line":231,"column":13,"nodeType":"1608","messageId":"1609","endLine":231,"endColumn":26},{"ruleId":"1606","severity":1,"message":"1770","line":232,"column":13,"nodeType":"1608","messageId":"1609","endLine":232,"endColumn":25},{"ruleId":"1836","severity":1,"message":"1837","line":616,"column":26,"nodeType":"1608","messageId":"1838","endLine":616,"endColumn":33},{"ruleId":"1836","severity":1,"message":"1837","line":656,"column":31,"nodeType":"1608","messageId":"1838","endLine":656,"endColumn":38},{"ruleId":"1836","severity":1,"message":"1837","line":674,"column":27,"nodeType":"1608","messageId":"1838","endLine":674,"endColumn":34},{"ruleId":"1836","severity":1,"message":"1839","line":711,"column":25,"nodeType":"1608","messageId":"1838","endLine":711,"endColumn":34},{"ruleId":"1606","severity":1,"message":"1840","line":738,"column":12,"nodeType":"1608","messageId":"1609","endLine":738,"endColumn":18},{"ruleId":"1871","severity":1,"message":"1872","line":746,"column":3,"nodeType":"1670","messageId":"1632","endLine":764,"endColumn":4},{"ruleId":"1871","severity":1,"message":"1873","line":766,"column":3,"nodeType":"1670","messageId":"1632","endLine":796,"endColumn":4},{"ruleId":"1606","severity":1,"message":"1874","line":782,"column":15,"nodeType":"1608","messageId":"1609","endLine":782,"endColumn":32},{"ruleId":"1871","severity":1,"message":"1875","line":798,"column":3,"nodeType":"1670","messageId":"1632","endLine":816,"endColumn":4},{"ruleId":"1871","severity":1,"message":"1876","line":818,"column":3,"nodeType":"1670","messageId":"1632","endLine":1083,"endColumn":4},{"ruleId":"1606","severity":1,"message":"1757","line":866,"column":11,"nodeType":"1608","messageId":"1609","endLine":866,"endColumn":24},{"ruleId":"1606","severity":1,"message":"1770","line":867,"column":11,"nodeType":"1608","messageId":"1609","endLine":867,"endColumn":23},{"ruleId":"1629","severity":1,"message":"1630","line":1219,"column":18,"nodeType":"1631","messageId":"1632","endLine":1219,"endColumn":20},{"ruleId":"1629","severity":1,"message":"1630","line":1221,"column":25,"nodeType":"1631","messageId":"1632","endLine":1221,"endColumn":27},{"ruleId":"1606","severity":1,"message":"1877","line":1240,"column":11,"nodeType":"1608","messageId":"1609","endLine":1240,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1878","line":1242,"column":11,"nodeType":"1608","messageId":"1609","endLine":1242,"endColumn":18},{"ruleId":"1706","severity":1,"message":"1879","line":1258,"column":7,"nodeType":"1708","messageId":"1632","endLine":1258,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1880","line":1267,"column":13,"nodeType":"1608","messageId":"1609","endLine":1267,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1881","line":1271,"column":12,"nodeType":"1608","messageId":"1609","endLine":1271,"endColumn":24},{"ruleId":"1606","severity":1,"message":"1882","line":1271,"column":26,"nodeType":"1608","messageId":"1609","endLine":1271,"endColumn":34},{"ruleId":"1606","severity":1,"message":"1883","line":1271,"column":36,"nodeType":"1608","messageId":"1609","endLine":1271,"endColumn":43},{"ruleId":"1606","severity":1,"message":"1847","line":1271,"column":45,"nodeType":"1608","messageId":"1609","endLine":1271,"endColumn":50},{"ruleId":"1606","severity":1,"message":"1862","line":1271,"column":52,"nodeType":"1608","messageId":"1609","endLine":1271,"endColumn":62},{"ruleId":"1606","severity":1,"message":"1675","line":1271,"column":64,"nodeType":"1608","messageId":"1609","endLine":1271,"endColumn":69},{"ruleId":"1606","severity":1,"message":"1665","line":2,"column":10,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1880","line":11,"column":9,"nodeType":"1608","messageId":"1609","endLine":11,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1884","line":47,"column":9,"nodeType":"1608","messageId":"1609","endLine":47,"endColumn":12},{"ruleId":"1606","severity":1,"message":"1734","line":2,"column":17,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":29},{"ruleId":"1606","severity":1,"message":"1666","line":3,"column":41,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":54},{"ruleId":"1606","severity":1,"message":"1667","line":3,"column":56,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":68},{"ruleId":"1606","severity":1,"message":"1672","line":6,"column":8,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1885","line":111,"column":11,"nodeType":"1608","messageId":"1609","endLine":111,"endColumn":23},{"ruleId":"1629","severity":1,"message":"1630","line":127,"column":57,"nodeType":"1631","messageId":"1632","endLine":127,"endColumn":59},{"ruleId":"1677","severity":1,"message":"1678","line":139,"column":19,"nodeType":"1679","endLine":140,"endColumn":66},{"ruleId":"1677","severity":1,"message":"1678","line":146,"column":23,"nodeType":"1679","endLine":146,"endColumn":98},{"ruleId":"1606","severity":1,"message":"1665","line":2,"column":9,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1886","line":2,"column":17,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":25},{"ruleId":"1606","severity":1,"message":"1663","line":2,"column":27,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":33},{"ruleId":"1606","severity":1,"message":"1887","line":3,"column":8,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":34},{"ruleId":"1606","severity":1,"message":"1729","line":3,"column":8,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1775","line":5,"column":10,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1830","line":6,"column":22,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":32},{"ruleId":"1606","severity":1,"message":"1825","line":7,"column":23,"nodeType":"1608","messageId":"1609","endLine":7,"endColumn":41},{"ruleId":"1606","severity":1,"message":"1667","line":7,"column":43,"nodeType":"1608","messageId":"1609","endLine":7,"endColumn":55},{"ruleId":"1606","severity":1,"message":"1682","line":7,"column":57,"nodeType":"1608","messageId":"1609","endLine":7,"endColumn":71},{"ruleId":"1606","severity":1,"message":"1618","line":9,"column":13,"nodeType":"1608","messageId":"1609","endLine":9,"endColumn":23},{"ruleId":"1606","severity":1,"message":"1888","line":10,"column":13,"nodeType":"1608","messageId":"1609","endLine":10,"endColumn":33},{"ruleId":"1832","severity":1,"message":"1833","line":83,"column":5,"nodeType":"1834","endLine":83,"endColumn":37},{"ruleId":"1606","severity":1,"message":"1855","line":108,"column":7,"nodeType":"1608","messageId":"1609","endLine":108,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1857","line":140,"column":7,"nodeType":"1608","messageId":"1609","endLine":140,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1835","line":204,"column":13,"nodeType":"1608","messageId":"1609","endLine":204,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1889","line":219,"column":9,"nodeType":"1608","messageId":"1609","endLine":219,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1859","line":221,"column":7,"nodeType":"1608","messageId":"1609","endLine":221,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1866","line":233,"column":7,"nodeType":"1608","messageId":"1609","endLine":233,"endColumn":15},{"ruleId":"1836","severity":1,"message":"1837","line":330,"column":26,"nodeType":"1608","messageId":"1838","endLine":330,"endColumn":33},{"ruleId":"1836","severity":1,"message":"1837","line":370,"column":31,"nodeType":"1608","messageId":"1838","endLine":370,"endColumn":38},{"ruleId":"1836","severity":1,"message":"1837","line":388,"column":27,"nodeType":"1608","messageId":"1838","endLine":388,"endColumn":34},{"ruleId":"1836","severity":1,"message":"1839","line":425,"column":25,"nodeType":"1608","messageId":"1838","endLine":425,"endColumn":34},{"ruleId":"1606","severity":1,"message":"1840","line":452,"column":12,"nodeType":"1608","messageId":"1609","endLine":452,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1890","line":130,"column":9,"nodeType":"1608","messageId":"1609","endLine":130,"endColumn":24},{"ruleId":"1606","severity":1,"message":"1891","line":147,"column":9,"nodeType":"1608","messageId":"1609","endLine":147,"endColumn":23},{"ruleId":"1677","severity":1,"message":"1678","line":173,"column":13,"nodeType":"1679","endLine":176,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1729","line":3,"column":8,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1809","line":4,"column":10,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1810","line":4,"column":19,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":26},{"ruleId":"1606","severity":1,"message":"1665","line":4,"column":55,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":61},{"ruleId":"1606","severity":1,"message":"1812","line":104,"column":15,"nodeType":"1608","messageId":"1609","endLine":104,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1665","line":2,"column":9,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1886","line":2,"column":17,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":25},{"ruleId":"1606","severity":1,"message":"1802","line":2,"column":35,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":40},{"ruleId":"1606","severity":1,"message":"1731","line":2,"column":42,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":49},{"ruleId":"1606","severity":1,"message":"1734","line":2,"column":51,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":63},{"ruleId":"1668","severity":1,"message":"1669","line":16,"column":3,"nodeType":"1670","messageId":"1671","endLine":18,"endColumn":4},{"ruleId":"1606","severity":1,"message":"1676","line":237,"column":9,"nodeType":"1608","messageId":"1609","endLine":237,"endColumn":17},{"ruleId":"1677","severity":1,"message":"1678","line":329,"column":15,"nodeType":"1679","endLine":332,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1663","line":3,"column":16,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1892","line":4,"column":10,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":29},{"ruleId":"1606","severity":1,"message":"1893","line":7,"column":8,"nodeType":"1608","messageId":"1609","endLine":7,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1721","line":9,"column":8,"nodeType":"1608","messageId":"1609","endLine":9,"endColumn":32},{"ruleId":"1606","severity":1,"message":"1812","line":84,"column":11,"nodeType":"1608","messageId":"1609","endLine":84,"endColumn":15},{"ruleId":"1677","severity":1,"message":"1678","line":123,"column":13,"nodeType":"1679","endLine":123,"endColumn":65},{"ruleId":"1677","severity":1,"message":"1678","line":129,"column":13,"nodeType":"1679","endLine":129,"endColumn":66},{"ruleId":"1677","severity":1,"message":"1678","line":136,"column":13,"nodeType":"1679","endLine":136,"endColumn":65},{"ruleId":"1606","severity":1,"message":"1729","line":2,"column":8,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1809","line":3,"column":10,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1810","line":3,"column":19,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":26},{"ruleId":"1606","severity":1,"message":"1665","line":3,"column":55,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":61},{"ruleId":"1606","severity":1,"message":"1811","line":4,"column":10,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1721","line":5,"column":8,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":32},{"ruleId":"1606","severity":1,"message":"1844","line":11,"column":9,"nodeType":"1608","messageId":"1609","endLine":11,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1894","line":2,"column":31,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":35},{"ruleId":"1606","severity":1,"message":"1635","line":4,"column":10,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1895","line":126,"column":9,"nodeType":"1608","messageId":"1609","endLine":126,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1896","line":128,"column":7,"nodeType":"1608","messageId":"1609","endLine":128,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1812","line":192,"column":11,"nodeType":"1608","messageId":"1609","endLine":192,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1725","line":2,"column":17,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1663","line":2,"column":23,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":29},{"ruleId":"1606","severity":1,"message":"1894","line":2,"column":31,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":35},{"ruleId":"1606","severity":1,"message":"1667","line":4,"column":10,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1894","line":3,"column":31,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":35},{"ruleId":"1606","severity":1,"message":"1663","line":2,"column":25,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":31},{"ruleId":"1606","severity":1,"message":"1663","line":2,"column":25,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":31},{"ruleId":"1606","severity":1,"message":"1729","line":3,"column":8,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1643","line":4,"column":8,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1730","line":7,"column":10,"nodeType":"1608","messageId":"1609","endLine":7,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1673","line":8,"column":10,"nodeType":"1608","messageId":"1609","endLine":8,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1689","line":12,"column":3,"nodeType":"1608","messageId":"1609","endLine":12,"endColumn":9},{"ruleId":"1606","severity":1,"message":"1725","line":13,"column":3,"nodeType":"1608","messageId":"1609","endLine":13,"endColumn":7},{"ruleId":"1606","severity":1,"message":"1661","line":15,"column":3,"nodeType":"1608","messageId":"1609","endLine":15,"endColumn":10},{"ruleId":"1606","severity":1,"message":"1691","line":16,"column":3,"nodeType":"1608","messageId":"1609","endLine":16,"endColumn":6},{"ruleId":"1606","severity":1,"message":"1690","line":17,"column":3,"nodeType":"1608","messageId":"1609","endLine":17,"endColumn":6},{"ruleId":"1606","severity":1,"message":"1748","line":18,"column":3,"nodeType":"1608","messageId":"1609","endLine":18,"endColumn":6},{"ruleId":"1606","severity":1,"message":"1665","line":19,"column":3,"nodeType":"1608","messageId":"1609","endLine":19,"endColumn":9},{"ruleId":"1606","severity":1,"message":"1802","line":20,"column":3,"nodeType":"1608","messageId":"1609","endLine":20,"endColumn":8},{"ruleId":"1606","severity":1,"message":"1667","line":22,"column":3,"nodeType":"1608","messageId":"1609","endLine":22,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1674","line":27,"column":22,"nodeType":"1608","messageId":"1609","endLine":27,"endColumn":28},{"ruleId":"1606","severity":1,"message":"1777","line":28,"column":5,"nodeType":"1608","messageId":"1609","endLine":28,"endColumn":11},{"ruleId":"1606","severity":1,"message":"1776","line":29,"column":5,"nodeType":"1608","messageId":"1609","endLine":29,"endColumn":10},{"ruleId":"1606","severity":1,"message":"1795","line":31,"column":5,"nodeType":"1608","messageId":"1609","endLine":31,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1619","line":32,"column":5,"nodeType":"1608","messageId":"1609","endLine":32,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1796","line":33,"column":5,"nodeType":"1608","messageId":"1609","endLine":33,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1618","line":35,"column":13,"nodeType":"1608","messageId":"1609","endLine":35,"endColumn":23},{"ruleId":"1606","severity":1,"message":"1751","line":39,"column":8,"nodeType":"1608","messageId":"1609","endLine":39,"endColumn":12},{"ruleId":"1668","severity":1,"message":"1669","line":50,"column":3,"nodeType":"1670","messageId":"1671","endLine":52,"endColumn":4},{"ruleId":"1606","severity":1,"message":"1897","line":137,"column":9,"nodeType":"1608","messageId":"1609","endLine":137,"endColumn":30},{"ruleId":"1606","severity":1,"message":"1898","line":550,"column":17,"nodeType":"1608","messageId":"1609","endLine":550,"endColumn":29},{"ruleId":"1606","severity":1,"message":"1729","line":3,"column":8,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1899","line":53,"column":13,"nodeType":"1608","messageId":"1609","endLine":53,"endColumn":27},{"ruleId":"1606","severity":1,"message":"1900","line":70,"column":26,"nodeType":"1608","messageId":"1609","endLine":70,"endColumn":38},{"ruleId":"1606","severity":1,"message":"1737","line":82,"column":7,"nodeType":"1608","messageId":"1609","endLine":82,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1900","line":103,"column":26,"nodeType":"1608","messageId":"1609","endLine":103,"endColumn":38},{"ruleId":"1606","severity":1,"message":"1901","line":111,"column":9,"nodeType":"1608","messageId":"1609","endLine":111,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1665","line":5,"column":10,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1661","line":5,"column":32,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":39},{"ruleId":"1606","severity":1,"message":"1693","line":5,"column":41,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":46},{"ruleId":"1606","severity":1,"message":"1802","line":5,"column":48,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":53},{"ruleId":"1606","severity":1,"message":"1902","line":5,"column":55,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":62},{"ruleId":"1606","severity":1,"message":"1903","line":7,"column":3,"nodeType":"1608","messageId":"1609","endLine":7,"endColumn":27},{"ruleId":"1606","severity":1,"message":"1904","line":8,"column":3,"nodeType":"1608","messageId":"1609","endLine":8,"endColumn":28},{"ruleId":"1606","severity":1,"message":"1643","line":10,"column":8,"nodeType":"1608","messageId":"1609","endLine":10,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1633","line":13,"column":8,"nodeType":"1608","messageId":"1609","endLine":13,"endColumn":37},{"ruleId":"1606","severity":1,"message":"1790","line":34,"column":9,"nodeType":"1608","messageId":"1609","endLine":34,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1791","line":39,"column":9,"nodeType":"1608","messageId":"1609","endLine":39,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1905","line":68,"column":11,"nodeType":"1608","messageId":"1609","endLine":68,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1906","line":130,"column":15,"nodeType":"1608","messageId":"1609","endLine":130,"endColumn":28},{"ruleId":"1629","severity":1,"message":"1630","line":231,"column":18,"nodeType":"1631","messageId":"1632","endLine":231,"endColumn":20},{"ruleId":"1629","severity":1,"message":"1630","line":233,"column":25,"nodeType":"1631","messageId":"1632","endLine":233,"endColumn":27},{"ruleId":"1606","severity":1,"message":"1877","line":257,"column":11,"nodeType":"1608","messageId":"1609","endLine":257,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1878","line":259,"column":11,"nodeType":"1608","messageId":"1609","endLine":259,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1907","line":1,"column":17,"nodeType":"1608","messageId":"1609","endLine":1,"endColumn":26},{"ruleId":"1606","severity":1,"message":"1729","line":3,"column":8,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1689","line":6,"column":10,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1725","line":6,"column":18,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1663","line":6,"column":24,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":30},{"ruleId":"1606","severity":1,"message":"1661","line":6,"column":32,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":39},{"ruleId":"1606","severity":1,"message":"1691","line":6,"column":41,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":44},{"ruleId":"1606","severity":1,"message":"1690","line":6,"column":46,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":49},{"ruleId":"1606","severity":1,"message":"1665","line":6,"column":58,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":64},{"ruleId":"1606","severity":1,"message":"1908","line":9,"column":8,"nodeType":"1608","messageId":"1609","endLine":9,"endColumn":25},{"ruleId":"1606","severity":1,"message":"1909","line":12,"column":8,"nodeType":"1608","messageId":"1609","endLine":12,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1910","line":16,"column":7,"nodeType":"1608","messageId":"1609","endLine":16,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1911","line":23,"column":7,"nodeType":"1608","messageId":"1609","endLine":23,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1790","line":55,"column":9,"nodeType":"1608","messageId":"1609","endLine":55,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1791","line":57,"column":9,"nodeType":"1608","messageId":"1609","endLine":57,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1634","line":4,"column":10,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1880","line":6,"column":9,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1800","line":7,"column":4,"nodeType":"1608","messageId":"1609","endLine":7,"endColumn":8},{"ruleId":"1606","severity":1,"message":"1912","line":8,"column":4,"nodeType":"1608","messageId":"1609","endLine":8,"endColumn":11},{"ruleId":"1606","severity":1,"message":"1810","line":11,"column":4,"nodeType":"1608","messageId":"1609","endLine":11,"endColumn":11},{"ruleId":"1606","severity":1,"message":"1690","line":12,"column":4,"nodeType":"1608","messageId":"1609","endLine":12,"endColumn":7},{"ruleId":"1606","severity":1,"message":"1726","line":13,"column":4,"nodeType":"1608","messageId":"1609","endLine":13,"endColumn":12},{"ruleId":"1606","severity":1,"message":"1777","line":14,"column":4,"nodeType":"1608","messageId":"1609","endLine":14,"endColumn":10},{"ruleId":"1606","severity":1,"message":"1660","line":15,"column":4,"nodeType":"1608","messageId":"1609","endLine":15,"endColumn":8},{"ruleId":"1606","severity":1,"message":"1725","line":18,"column":4,"nodeType":"1608","messageId":"1609","endLine":18,"endColumn":8},{"ruleId":"1606","severity":1,"message":"1693","line":22,"column":4,"nodeType":"1608","messageId":"1609","endLine":22,"endColumn":9},{"ruleId":"1606","severity":1,"message":"1778","line":27,"column":10,"nodeType":"1608","messageId":"1609","endLine":27,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1913","line":27,"column":24,"nodeType":"1608","messageId":"1609","endLine":27,"endColumn":40},{"ruleId":"1606","severity":1,"message":"1762","line":27,"column":42,"nodeType":"1608","messageId":"1609","endLine":27,"endColumn":59},{"ruleId":"1606","severity":1,"message":"1683","line":27,"column":88,"nodeType":"1608","messageId":"1609","endLine":27,"endColumn":103},{"ruleId":"1606","severity":1,"message":"1682","line":27,"column":105,"nodeType":"1608","messageId":"1609","endLine":27,"endColumn":119},{"ruleId":"1606","severity":1,"message":"1667","line":27,"column":120,"nodeType":"1608","messageId":"1609","endLine":27,"endColumn":132},{"ruleId":"1606","severity":1,"message":"1825","line":27,"column":134,"nodeType":"1608","messageId":"1609","endLine":27,"endColumn":152},{"ruleId":"1606","severity":1,"message":"1914","line":27,"column":154,"nodeType":"1608","messageId":"1609","endLine":27,"endColumn":170},{"ruleId":"1606","severity":1,"message":"1915","line":27,"column":172,"nodeType":"1608","messageId":"1609","endLine":27,"endColumn":188},{"ruleId":"1606","severity":1,"message":"1680","line":27,"column":190,"nodeType":"1608","messageId":"1609","endLine":27,"endColumn":202},{"ruleId":"1606","severity":1,"message":"1916","line":27,"column":204,"nodeType":"1608","messageId":"1609","endLine":27,"endColumn":215},{"ruleId":"1606","severity":1,"message":"1917","line":31,"column":8,"nodeType":"1608","messageId":"1609","endLine":31,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1918","line":32,"column":10,"nodeType":"1608","messageId":"1609","endLine":32,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1919","line":34,"column":8,"nodeType":"1608","messageId":"1609","endLine":34,"endColumn":17},{"ruleId":"1629","severity":1,"message":"1630","line":117,"column":28,"nodeType":"1631","messageId":"1632","endLine":117,"endColumn":30},{"ruleId":"1629","severity":1,"message":"1630","line":120,"column":33,"nodeType":"1631","messageId":"1632","endLine":120,"endColumn":35},{"ruleId":"1629","severity":1,"message":"1630","line":137,"column":31,"nodeType":"1631","messageId":"1632","endLine":137,"endColumn":33},{"ruleId":"1827","severity":1,"message":"1828","line":140,"column":11,"nodeType":"1679","endLine":140,"endColumn":22},{"ruleId":"1629","severity":1,"message":"1630","line":144,"column":38,"nodeType":"1631","messageId":"1632","endLine":144,"endColumn":40},{"ruleId":"1606","severity":1,"message":"1920","line":341,"column":7,"nodeType":"1608","messageId":"1609","endLine":341,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1921","line":351,"column":9,"nodeType":"1608","messageId":"1609","endLine":351,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1922","line":352,"column":9,"nodeType":"1608","messageId":"1609","endLine":352,"endColumn":23},{"ruleId":"1606","severity":1,"message":"1923","line":354,"column":11,"nodeType":"1608","messageId":"1609","endLine":354,"endColumn":18},{"ruleId":"1629","severity":1,"message":"1630","line":469,"column":42,"nodeType":"1631","messageId":"1632","endLine":469,"endColumn":44},{"ruleId":"1629","severity":1,"message":"1705","line":471,"column":58,"nodeType":"1631","messageId":"1632","endLine":471,"endColumn":60},{"ruleId":"1629","severity":1,"message":"1705","line":520,"column":22,"nodeType":"1631","messageId":"1632","endLine":520,"endColumn":24},{"ruleId":"1606","severity":1,"message":"1924","line":569,"column":9,"nodeType":"1608","messageId":"1609","endLine":569,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1921","line":577,"column":9,"nodeType":"1608","messageId":"1609","endLine":577,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1922","line":578,"column":9,"nodeType":"1608","messageId":"1609","endLine":578,"endColumn":23},{"ruleId":"1606","severity":1,"message":"1923","line":580,"column":11,"nodeType":"1608","messageId":"1609","endLine":580,"endColumn":18},{"ruleId":"1629","severity":1,"message":"1705","line":609,"column":32,"nodeType":"1631","messageId":"1632","endLine":609,"endColumn":34},{"ruleId":"1832","severity":1,"message":"1833","line":613,"column":21,"nodeType":"1834","endLine":613,"endColumn":33},{"ruleId":"1832","severity":1,"message":"1833","line":688,"column":73,"nodeType":"1834","endLine":688,"endColumn":98},{"ruleId":"1827","severity":1,"message":"1925","line":693,"column":15,"nodeType":"1679","endLine":693,"endColumn":82},{"ruleId":"1606","severity":1,"message":"1924","line":734,"column":9,"nodeType":"1608","messageId":"1609","endLine":734,"endColumn":20},{"ruleId":"1706","severity":1,"message":"1926","line":749,"column":75,"nodeType":"1708","messageId":"1632","endLine":749,"endColumn":85},{"ruleId":"1629","severity":1,"message":"1705","line":768,"column":32,"nodeType":"1631","messageId":"1632","endLine":768,"endColumn":34},{"ruleId":"1832","severity":1,"message":"1833","line":772,"column":21,"nodeType":"1834","endLine":772,"endColumn":33},{"ruleId":"1832","severity":1,"message":"1833","line":846,"column":73,"nodeType":"1834","endLine":846,"endColumn":98},{"ruleId":"1827","severity":1,"message":"1925","line":851,"column":15,"nodeType":"1679","endLine":851,"endColumn":82},{"ruleId":"1629","severity":1,"message":"1630","line":893,"column":46,"nodeType":"1631","messageId":"1632","endLine":893,"endColumn":48},{"ruleId":"1629","severity":1,"message":"1705","line":901,"column":25,"nodeType":"1631","messageId":"1632","endLine":901,"endColumn":27},{"ruleId":"1606","severity":1,"message":"1921","line":1021,"column":11,"nodeType":"1608","messageId":"1609","endLine":1021,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1923","line":1022,"column":13,"nodeType":"1608","messageId":"1609","endLine":1022,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1844","line":1025,"column":15,"nodeType":"1608","messageId":"1609","endLine":1025,"endColumn":23},{"ruleId":"1606","severity":1,"message":"1645","line":1,"column":16,"nodeType":"1608","messageId":"1609","endLine":1,"endColumn":24},{"ruleId":"1606","severity":1,"message":"1646","line":1,"column":26,"nodeType":"1608","messageId":"1609","endLine":1,"endColumn":35},{"ruleId":"1606","severity":1,"message":"1634","line":3,"column":10,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":19},{"ruleId":"1653","severity":1,"message":"1654","line":30,"column":19,"nodeType":"1655","endLine":31,"endColumn":16},{"ruleId":"1653","severity":1,"message":"1654","line":31,"column":35,"nodeType":"1655","endLine":32,"endColumn":18},{"ruleId":"1653","severity":1,"message":"1654","line":32,"column":110,"nodeType":"1655","endLine":33,"endColumn":18},{"ruleId":"1653","severity":1,"message":"1654","line":33,"column":71,"nodeType":"1655","endLine":34,"endColumn":18},{"ruleId":"1653","severity":1,"message":"1654","line":34,"column":109,"nodeType":"1655","endLine":35,"endColumn":18},{"ruleId":"1653","severity":1,"message":"1654","line":35,"column":69,"nodeType":"1655","endLine":36,"endColumn":18},{"ruleId":"1653","severity":1,"message":"1654","line":36,"column":111,"nodeType":"1655","endLine":37,"endColumn":18},{"ruleId":"1653","severity":1,"message":"1654","line":37,"column":72,"nodeType":"1655","endLine":38,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1665","line":2,"column":10,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1751","line":5,"column":8,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":12},{"ruleId":"1606","severity":1,"message":"1927","line":6,"column":8,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":12},{"ruleId":"1606","severity":1,"message":"1928","line":8,"column":8,"nodeType":"1608","messageId":"1609","endLine":8,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1929","line":9,"column":8,"nodeType":"1608","messageId":"1609","endLine":9,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1930","line":10,"column":8,"nodeType":"1608","messageId":"1609","endLine":10,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1880","line":15,"column":9,"nodeType":"1608","messageId":"1609","endLine":15,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1884","line":52,"column":9,"nodeType":"1608","messageId":"1609","endLine":52,"endColumn":12},{"ruleId":"1606","severity":1,"message":"1931","line":2,"column":18,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1692","line":2,"column":24,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":34},{"ruleId":"1606","severity":1,"message":"1932","line":2,"column":36,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":44},{"ruleId":"1606","severity":1,"message":"1711","line":3,"column":10,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1800","line":8,"column":10,"nodeType":"1608","messageId":"1609","endLine":8,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1748","line":9,"column":10,"nodeType":"1608","messageId":"1609","endLine":9,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1729","line":12,"column":8,"nodeType":"1608","messageId":"1609","endLine":12,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1933","line":16,"column":8,"nodeType":"1608","messageId":"1609","endLine":16,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1624","line":20,"column":8,"nodeType":"1608","messageId":"1609","endLine":20,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1696","line":21,"column":8,"nodeType":"1608","messageId":"1609","endLine":21,"endColumn":29},{"ruleId":"1606","severity":1,"message":"1823","line":22,"column":8,"nodeType":"1608","messageId":"1609","endLine":22,"endColumn":26},{"ruleId":"1606","severity":1,"message":"1695","line":24,"column":8,"nodeType":"1608","messageId":"1609","endLine":24,"endColumn":24},{"ruleId":"1606","severity":1,"message":"1934","line":26,"column":9,"nodeType":"1608","messageId":"1609","endLine":26,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1935","line":26,"column":25,"nodeType":"1608","messageId":"1609","endLine":26,"endColumn":32},{"ruleId":"1606","severity":1,"message":"1698","line":27,"column":9,"nodeType":"1608","messageId":"1609","endLine":27,"endColumn":15},{"ruleId":"1649","severity":1,"message":"1650","line":39,"column":5,"nodeType":"1651","messageId":"1652","endLine":51,"endColumn":6},{"ruleId":"1715","severity":1,"message":"1716","line":41,"column":14,"nodeType":"1717","messageId":"1718","endLine":41,"endColumn":16},{"ruleId":"1677","severity":1,"message":"1678","line":44,"column":15,"nodeType":"1679","endLine":46,"endColumn":60},{"ruleId":"1606","severity":1,"message":"1854","line":71,"column":11,"nodeType":"1608","messageId":"1609","endLine":71,"endColumn":23},{"ruleId":"1606","severity":1,"message":"1809","line":3,"column":10,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1810","line":3,"column":19,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":26},{"ruleId":"1606","severity":1,"message":"1665","line":3,"column":55,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":61},{"ruleId":"1606","severity":1,"message":"1734","line":2,"column":17,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":29},{"ruleId":"1606","severity":1,"message":"1792","line":3,"column":13,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1667","line":3,"column":10,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1762","line":3,"column":24,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":41},{"ruleId":"1606","severity":1,"message":"1729","line":4,"column":8,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1775","line":5,"column":10,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1643","line":8,"column":8,"nodeType":"1608","messageId":"1609","endLine":8,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1634","line":9,"column":10,"nodeType":"1608","messageId":"1609","endLine":9,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1830","line":10,"column":22,"nodeType":"1608","messageId":"1609","endLine":10,"endColumn":32},{"ruleId":"1606","severity":1,"message":"1799","line":10,"column":57,"nodeType":"1608","messageId":"1609","endLine":10,"endColumn":62},{"ruleId":"1606","severity":1,"message":"1825","line":14,"column":23,"nodeType":"1608","messageId":"1609","endLine":14,"endColumn":41},{"ruleId":"1606","severity":1,"message":"1667","line":14,"column":43,"nodeType":"1608","messageId":"1609","endLine":14,"endColumn":55},{"ruleId":"1606","severity":1,"message":"1682","line":14,"column":57,"nodeType":"1608","messageId":"1609","endLine":14,"endColumn":71},{"ruleId":"1832","severity":1,"message":"1833","line":53,"column":5,"nodeType":"1834","endLine":53,"endColumn":37},{"ruleId":"1606","severity":1,"message":"1835","line":107,"column":13,"nodeType":"1608","messageId":"1609","endLine":107,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1936","line":121,"column":9,"nodeType":"1608","messageId":"1609","endLine":121,"endColumn":27},{"ruleId":"1836","severity":1,"message":"1837","line":235,"column":26,"nodeType":"1608","messageId":"1838","endLine":235,"endColumn":33},{"ruleId":"1836","severity":1,"message":"1837","line":275,"column":31,"nodeType":"1608","messageId":"1838","endLine":275,"endColumn":38},{"ruleId":"1836","severity":1,"message":"1837","line":293,"column":27,"nodeType":"1608","messageId":"1838","endLine":293,"endColumn":34},{"ruleId":"1836","severity":1,"message":"1839","line":330,"column":25,"nodeType":"1608","messageId":"1838","endLine":330,"endColumn":34},{"ruleId":"1606","severity":1,"message":"1840","line":372,"column":12,"nodeType":"1608","messageId":"1609","endLine":372,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1847","line":503,"column":45,"nodeType":"1608","messageId":"1609","endLine":503,"endColumn":50},{"ruleId":"1606","severity":1,"message":"1937","line":509,"column":9,"nodeType":"1608","messageId":"1609","endLine":509,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1663","line":2,"column":16,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1842","line":5,"column":8,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1938","line":4,"column":9,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1643","line":5,"column":8,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":13},{"ruleId":"1668","severity":1,"message":"1669","line":12,"column":3,"nodeType":"1670","messageId":"1671","endLine":14,"endColumn":4},{"ruleId":"1677","severity":1,"message":"1678","line":120,"column":19,"nodeType":"1679","endLine":121,"endColumn":33},{"ruleId":"1677","severity":1,"message":"1678","line":130,"column":9,"nodeType":"1679","endLine":130,"endColumn":103},{"ruleId":"1677","severity":1,"message":"1678","line":131,"column":9,"nodeType":"1679","endLine":131,"endColumn":127},{"ruleId":"1677","severity":1,"message":"1678","line":132,"column":9,"nodeType":"1679","endLine":132,"endColumn":124},{"ruleId":"1677","severity":1,"message":"1678","line":133,"column":9,"nodeType":"1679","endLine":133,"endColumn":131},{"ruleId":"1677","severity":1,"message":"1678","line":134,"column":9,"nodeType":"1679","endLine":134,"endColumn":135},{"ruleId":"1677","severity":1,"message":"1678","line":135,"column":9,"nodeType":"1679","endLine":135,"endColumn":129},{"ruleId":"1606","severity":1,"message":"1938","line":4,"column":9,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1643","line":5,"column":8,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1921","line":13,"column":9,"nodeType":"1608","messageId":"1609","endLine":13,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1939","line":13,"column":15,"nodeType":"1608","messageId":"1609","endLine":13,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1940","line":15,"column":16,"nodeType":"1608","messageId":"1609","endLine":15,"endColumn":24},{"ruleId":"1606","severity":1,"message":"1648","line":18,"column":9,"nodeType":"1608","messageId":"1609","endLine":18,"endColumn":11},{"ruleId":"1606","severity":1,"message":"1676","line":19,"column":9,"nodeType":"1608","messageId":"1609","endLine":19,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1941","line":20,"column":16,"nodeType":"1608","messageId":"1609","endLine":20,"endColumn":24},{"ruleId":"1629","severity":1,"message":"1630","line":109,"column":23,"nodeType":"1631","messageId":"1632","endLine":109,"endColumn":25},{"ruleId":"1942","severity":1,"message":"1943","line":114,"column":11,"nodeType":"1608","messageId":"1944","endLine":114,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1663","line":3,"column":16,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1892","line":4,"column":9,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":28},{"ruleId":"1606","severity":1,"message":"1945","line":6,"column":8,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1893","line":7,"column":8,"nodeType":"1608","messageId":"1609","endLine":7,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1812","line":73,"column":11,"nodeType":"1608","messageId":"1609","endLine":73,"endColumn":15},{"ruleId":"1677","severity":1,"message":"1678","line":102,"column":17,"nodeType":"1679","endLine":102,"endColumn":69},{"ruleId":"1677","severity":1,"message":"1678","line":109,"column":17,"nodeType":"1679","endLine":109,"endColumn":69},{"ruleId":"1606","severity":1,"message":"1643","line":4,"column":8,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1634","line":5,"column":10,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1732","line":8,"column":3,"nodeType":"1608","messageId":"1609","endLine":8,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1830","line":9,"column":3,"nodeType":"1608","messageId":"1609","endLine":9,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1665","line":10,"column":3,"nodeType":"1608","messageId":"1609","endLine":10,"endColumn":9},{"ruleId":"1606","severity":1,"message":"1663","line":15,"column":3,"nodeType":"1608","messageId":"1609","endLine":15,"endColumn":9},{"ruleId":"1606","severity":1,"message":"1824","line":17,"column":10,"nodeType":"1608","messageId":"1609","endLine":17,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1859","line":26,"column":7,"nodeType":"1608","messageId":"1609","endLine":26,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1790","line":64,"column":9,"nodeType":"1608","messageId":"1609","endLine":64,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1791","line":66,"column":9,"nodeType":"1608","messageId":"1609","endLine":66,"endColumn":22},{"ruleId":"1836","severity":1,"message":"1837","line":238,"column":25,"nodeType":"1608","messageId":"1838","endLine":238,"endColumn":32},{"ruleId":"1836","severity":1,"message":"1837","line":283,"column":31,"nodeType":"1608","messageId":"1838","endLine":283,"endColumn":38},{"ruleId":"1836","severity":1,"message":"1837","line":301,"column":27,"nodeType":"1608","messageId":"1838","endLine":301,"endColumn":34},{"ruleId":"1836","severity":1,"message":"1839","line":348,"column":27,"nodeType":"1608","messageId":"1838","endLine":348,"endColumn":36},{"ruleId":"1606","severity":1,"message":"1835","line":389,"column":15,"nodeType":"1608","messageId":"1609","endLine":389,"endColumn":24},{"ruleId":"1606","severity":1,"message":"1645","line":1,"column":17,"nodeType":"1608","messageId":"1609","endLine":1,"endColumn":25},{"ruleId":"1606","severity":1,"message":"1635","line":3,"column":10,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1663","line":4,"column":18,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":24},{"ruleId":"1606","severity":1,"message":"1812","line":17,"column":11,"nodeType":"1608","messageId":"1609","endLine":17,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1661","line":1,"column":34,"nodeType":"1608","messageId":"1609","endLine":1,"endColumn":41},{"ruleId":"1606","severity":1,"message":"1946","line":3,"column":17,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":30},{"ruleId":"1606","severity":1,"message":"1947","line":5,"column":10,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":25},{"ruleId":"1606","severity":1,"message":"1948","line":5,"column":27,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":39},{"ruleId":"1606","severity":1,"message":"1949","line":5,"column":41,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":54},{"ruleId":"1606","severity":1,"message":"1812","line":49,"column":12,"nodeType":"1608","messageId":"1609","endLine":49,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1775","line":4,"column":10,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1799","line":6,"column":18,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":23},{"ruleId":"1606","severity":1,"message":"1665","line":6,"column":25,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":31},{"ruleId":"1606","severity":1,"message":"1710","line":6,"column":33,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":38},{"ruleId":"1606","severity":1,"message":"1725","line":6,"column":40,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":44},{"ruleId":"1606","severity":1,"message":"1663","line":6,"column":46,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":52},{"ruleId":"1606","severity":1,"message":"1950","line":9,"column":10,"nodeType":"1608","messageId":"1609","endLine":9,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1755","line":41,"column":11,"nodeType":"1608","messageId":"1609","endLine":41,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1951","line":87,"column":9,"nodeType":"1608","messageId":"1609","endLine":87,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1952","line":152,"column":11,"nodeType":"1608","messageId":"1609","endLine":152,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1953","line":158,"column":11,"nodeType":"1608","messageId":"1609","endLine":158,"endColumn":26},{"ruleId":"1606","severity":1,"message":"1646","line":1,"column":26,"nodeType":"1608","messageId":"1609","endLine":1,"endColumn":35},{"ruleId":"1606","severity":1,"message":"1730","line":2,"column":11,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1938","line":4,"column":9,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1643","line":5,"column":8,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1634","line":6,"column":10,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1954","line":20,"column":10,"nodeType":"1608","messageId":"1609","endLine":20,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1955","line":5,"column":9,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1635","line":4,"column":10,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1830","line":6,"column":22,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":32},{"ruleId":"1606","severity":1,"message":"1825","line":7,"column":23,"nodeType":"1608","messageId":"1609","endLine":7,"endColumn":41},{"ruleId":"1606","severity":1,"message":"1955","line":14,"column":9,"nodeType":"1608","messageId":"1609","endLine":14,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1889","line":14,"column":22,"nodeType":"1608","messageId":"1609","endLine":14,"endColumn":33},{"ruleId":"1836","severity":1,"message":"1837","line":154,"column":25,"nodeType":"1608","messageId":"1838","endLine":154,"endColumn":32},{"ruleId":"1836","severity":1,"message":"1837","line":199,"column":31,"nodeType":"1608","messageId":"1838","endLine":199,"endColumn":38},{"ruleId":"1836","severity":1,"message":"1837","line":217,"column":27,"nodeType":"1608","messageId":"1838","endLine":217,"endColumn":34},{"ruleId":"1836","severity":1,"message":"1839","line":264,"column":27,"nodeType":"1608","messageId":"1838","endLine":264,"endColumn":36},{"ruleId":"1606","severity":1,"message":"1956","line":311,"column":9,"nodeType":"1608","messageId":"1609","endLine":311,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1798","line":312,"column":9,"nodeType":"1608","messageId":"1609","endLine":312,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1957","line":316,"column":9,"nodeType":"1608","messageId":"1609","endLine":316,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1835","line":440,"column":13,"nodeType":"1608","messageId":"1609","endLine":440,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1802","line":2,"column":24,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":29},{"ruleId":"1606","severity":1,"message":"1958","line":35,"column":11,"nodeType":"1608","messageId":"1609","endLine":35,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1646","line":1,"column":26,"nodeType":"1608","messageId":"1609","endLine":1,"endColumn":35},{"ruleId":"1606","severity":1,"message":"1959","line":6,"column":9,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1960","line":6,"column":16,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":24},{"ruleId":"1606","severity":1,"message":"1961","line":3,"column":10,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":23},{"ruleId":"1606","severity":1,"message":"1800","line":4,"column":8,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":12},{"ruleId":"1606","severity":1,"message":"1962","line":5,"column":8,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1661","line":8,"column":46,"nodeType":"1608","messageId":"1609","endLine":8,"endColumn":53},{"ruleId":"1606","severity":1,"message":"1963","line":9,"column":8,"nodeType":"1608","messageId":"1609","endLine":9,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1964","line":10,"column":8,"nodeType":"1608","messageId":"1609","endLine":10,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1965","line":11,"column":8,"nodeType":"1608","messageId":"1609","endLine":11,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1950","line":16,"column":10,"nodeType":"1608","messageId":"1609","endLine":16,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1966","line":18,"column":8,"nodeType":"1608","messageId":"1609","endLine":18,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1967","line":24,"column":5,"nodeType":"1608","messageId":"1609","endLine":24,"endColumn":10},{"ruleId":"1606","severity":1,"message":"1755","line":78,"column":11,"nodeType":"1608","messageId":"1609","endLine":78,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1951","line":127,"column":9,"nodeType":"1608","messageId":"1609","endLine":127,"endColumn":21},{"ruleId":"1629","severity":1,"message":"1630","line":252,"column":31,"nodeType":"1631","messageId":"1632","endLine":252,"endColumn":33},{"ruleId":"1677","severity":1,"message":"1678","line":264,"column":15,"nodeType":"1679","endLine":264,"endColumn":82},{"ruleId":"1677","severity":1,"message":"1678","line":268,"column":15,"nodeType":"1679","endLine":268,"endColumn":82},{"ruleId":"1606","severity":1,"message":"1968","line":341,"column":15,"nodeType":"1608","messageId":"1609","endLine":341,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1956","line":341,"column":22,"nodeType":"1608","messageId":"1609","endLine":341,"endColumn":29},{"ruleId":"1629","severity":1,"message":"1630","line":345,"column":28,"nodeType":"1631","messageId":"1632","endLine":345,"endColumn":30},{"ruleId":"1827","severity":1,"message":"1925","line":460,"column":32,"nodeType":"1679","endLine":460,"endColumn":35},{"ruleId":"1606","severity":1,"message":"1969","line":502,"column":11,"nodeType":"1608","messageId":"1609","endLine":502,"endColumn":24},{"ruleId":"1606","severity":1,"message":"1968","line":504,"column":15,"nodeType":"1608","messageId":"1609","endLine":504,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1956","line":504,"column":22,"nodeType":"1608","messageId":"1609","endLine":504,"endColumn":29},{"ruleId":"1606","severity":1,"message":"1970","line":3,"column":7,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1635","line":4,"column":10,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1830","line":6,"column":22,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":32},{"ruleId":"1606","severity":1,"message":"1825","line":7,"column":23,"nodeType":"1608","messageId":"1609","endLine":7,"endColumn":41},{"ruleId":"1606","severity":1,"message":"1955","line":12,"column":9,"nodeType":"1608","messageId":"1609","endLine":12,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1889","line":12,"column":22,"nodeType":"1608","messageId":"1609","endLine":12,"endColumn":33},{"ruleId":"1836","severity":1,"message":"1837","line":167,"column":25,"nodeType":"1608","messageId":"1838","endLine":167,"endColumn":32},{"ruleId":"1836","severity":1,"message":"1837","line":212,"column":31,"nodeType":"1608","messageId":"1838","endLine":212,"endColumn":38},{"ruleId":"1836","severity":1,"message":"1837","line":230,"column":27,"nodeType":"1608","messageId":"1838","endLine":230,"endColumn":34},{"ruleId":"1836","severity":1,"message":"1839","line":277,"column":27,"nodeType":"1608","messageId":"1838","endLine":277,"endColumn":36},{"ruleId":"1606","severity":1,"message":"1956","line":316,"column":11,"nodeType":"1608","messageId":"1609","endLine":316,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1798","line":317,"column":11,"nodeType":"1608","messageId":"1609","endLine":317,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1957","line":321,"column":11,"nodeType":"1608","messageId":"1609","endLine":321,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1835","line":421,"column":17,"nodeType":"1608","messageId":"1609","endLine":421,"endColumn":26},"no-unused-vars","'$' is defined but never used.","Identifier","unusedVar","'Popper' is defined but never used.","no-native-reassign",["1971"],"no-negated-in-lhs",["1972"],"'withRouter' is defined but never used.","'LoginRouter' is defined but never used.","'AddChatModal' is defined but never used.","'navActions' is defined but never used.","'useLocation' is defined but never used.","'ArticleDetail' is defined but never used.","'InfiniteList' is defined but never used.","'ViewAnyUserProfile' is defined but never used.","'Chat' is defined but never used.","'Notifications' is defined but never used.","'NoFoundPage' is defined but never used.","'ProfileCardNewsFeed' is defined but never used.","'SocialCalCellPage' is defined but never used.","'UserPostList' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'NotificationWebSocketInstance' is defined but never used.","'authAxios' is defined but never used.","'connect' is defined but never used.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"1973","text":"1974"},{"range":"1975","text":"1974"},"'socialEventId' is assigned a value but never used.","'axios' is defined but never used.","'React' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'username1' is assigned a value but never used.","'id' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","'PostUpload' is defined but never used.","'NewsFeedFormPost' is defined but never used.","'Layouts' is defined but never used.","'TodayEvents' is defined but never used.","'Card' is defined but never used.","'Divider' is defined but never used.","'Checkbox' is defined but never used.","'Avatar' is defined but never used.","'Statistic' is defined but never used.","'Button' is defined but never used.","'InboxOutlined' is defined but never used.","'UserOutlined' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Dragger' is assigned a value but never used.","'NavLink' is defined but never used.","'Router' is defined but never used.","'error' is assigned a value but never used.","'username' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'HeartTwoTone' is defined but never used.","'LogoutOutlined' is defined but never used.","'SearchOutlined' is defined but never used.","'SettingOutlined' is defined but never used.","'UploadOutlined' is defined but never used.","'NotificationOutlined' is defined but never used.","'VideoCameraOutlined' is defined but never used.","'browserHistory' is defined but never used.","'testPic' is defined but never used.","'Drawer' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Breadcrumb' is defined but never used.","'Space' is defined but never used.","'Option' is defined but never used.","'SuggestedFriends' is defined but never used.","'NotificationsDropDown' is defined but never used.","'Sider' is assigned a value but never used.","'Search' is assigned a value but never used.","'dataSource' is assigned a value but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"1976","text":"1977"},"Expected '!==' and instead saw '!='.","no-dupe-keys","Duplicate key 'openNotification'.","ObjectExpression","Duplicate key 'closeNotification'.","'Input' is defined but never used.","'Link' is defined but never used.","'ProfilePost' is defined but never used.","'Image' is defined but never used.","'images' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'profileList' is assigned a value but never used.","'QuestionCircleOutlined' is defined but never used.","'ExploreWebSocketInstance' is defined but never used.","'mapStateToProps' is assigned a value but never used.","'currentUser' is assigned a value but never used.","'messages' is assigned a value but never used.","'List' is defined but never used.","'Skeleton' is defined but never used.","'Typography' is defined but never used.","'friendrequestlist' is assigned a value but never used.","'moment' is defined but never used.","'Redirect' is defined but never used.","'message' is defined but never used.","'DatePicker' is defined but never used.","'AvatarGroup' is defined but never used.","'notification' is defined but never used.","'EditEventPopUp' is defined but never used.","'currentMonth' is assigned a value but never used.","'formattedWeek' is assigned a value but never used.","'utcStart' is assigned a value but never used.","'utcEnd' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'day', 'day'.","unsafeRefs","'ratio' is assigned a value but never used.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","'Tag' is defined but never used.","Duplicate key 'closeDrawer'.","'EnvironmentOutlined' is defined but never used.","'ava1' is defined but never used.","'defaultPic' is defined but never used.","'dateFormat' is assigned a value but never used.","'dayFormat' is assigned a value but never used.","'startDate' is assigned a value but never used.","'endHourDay' is assigned a value but never used.","'formattedHour' is assigned a value but never used.","no-whitespace-before-property","Unexpected whitespace before property props.","unexpectedWhitespace",{"range":"1978","text":"1979"},"'AntDesignOutlined' is defined but never used.","'DetailEditEventForm' is defined but never used.","'Group' is assigned a value but never used.","'endWeek' is assigned a value but never used.","'currentWeek' is assigned a value but never used.","'hourFormat' is assigned a value but never used.","'hours' is assigned a value but never used.","'borderHolder' is assigned a value but never used.","'formattedDay' is assigned a value but never used.","'dayDifference' is assigned a value but never used.","'clonedayIndex' is assigned a value but never used.","Function declared in a loop contains unsafe references to variable(s) 'date', 'date'.","'eventObject' is assigned a value but never used.","'Form' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'EditOutlined' is defined but never used.","'defaultPicture' is defined but never used.","'ChangeProfilePic' is defined but never used.","'ConfirmAddFriend' is defined but never used.","'ConfirmUnfriend' is defined but never used.","'curId' is assigned a value but never used.","'firstName' is assigned a value but never used.","'lastName' is assigned a value but never used.","'posts' is assigned a value but never used.","'bio' is assigned a value but never used.","'current' is assigned a value but never used.","'profileImage' is assigned a value but never used.","'ampm' is assigned a value but never used.","'convertedTime' is assigned a value but never used.","'dateFns' is defined but never used.","'PlusOutlined' is defined but never used.","'CalendarOutlined' is defined but never used.","'useHistory' is defined but never used.","'useParams' is defined but never used.","'friends' is assigned a value but never used.","'location' is assigned a value but never used.","'Radio' is defined but never used.","'Icon' is defined but never used.","'DownloadOutlined' is defined but never used.","'Modal' is defined but never used.","'CheckSquareTwoTone' is defined but never used.","'EyeOutlined' is defined but never used.","'ReduxEditEventForm' is defined but never used.","'background' is defined but never used.","'show' is assigned a value but never used.","'eventHostId' is assigned a value but never used.","'Comment' is defined but never used.","'Tooltip' is defined but never used.","'SendOutlined' is defined but never used.","'data' is assigned a value but never used.","'Option' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Badge' is defined but never used.","'DownOutlined' is defined but never used.","'SmileTwoTone' is defined but never used.","'FrownOutlined' is defined but never used.","'eventSyncActions' is defined but never used.","'PickEventSyncModal' is defined but never used.","'AimOutlined' is defined but never used.","'ArrowRightOutlined' is defined but never used.","'menu' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'ReactBingmaps' is defined but never used.","'TimePicker' is defined but never used.","'PictureOutlined' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'cloneTime' is assigned a value but never used.","no-self-assign","'endHour' is assigned to itself.","selfAssignment","'startHour' is assigned to itself.","'change' is assigned a value but never used.","'friendList' is assigned a value but never used.","'userIcon' is defined but never used.","'Select' is defined but never used.","'TextArea' is assigned a value but never used.","'email' is assigned a value but never used.","'renderInput' is assigned a value but never used.","'reset' is assigned a value but never used.","'PictureCarousel' is defined but never used.","'userprofile' is assigned a value but never used.","'PickEventSyncForm' is defined but never used.","Unexpected whitespace before property then.",{"range":"1980","text":"1979"},{"range":"1981","text":"1979"},"'contentStyle' is assigned a value but never used.","'renderTextArea' is assigned a value but never used.","'renderStartDate' is assigned a value but never used.","'renderEndDate' is assigned a value but never used.","'renderEventColor' is assigned a value but never used.","'formItemLayout' is assigned a value but never used.","'config' is assigned a value but never used.","'rangeConfig' is assigned a value but never used.","'submitting' is assigned a value but never used.","'Field' is defined but never used.","'reduxForm' is defined but never used.","'formValueSelector' is defined but never used.","'required' is assigned a value but never used.","'renderField' is assigned a value but never used.","'renderLocationField' is assigned a value but never used.","'renderStartDateSelect' is assigned a value but never used.","'afterSubmit' is assigned a value but never used.","no-dupe-class-members","Duplicate name 'renderHeader'.","Duplicate name 'renderDays'.","'cloneCloneMinDate' is assigned a value but never used.","Duplicate name 'renderSide'.","Duplicate name 'renderWeekCell'.","'utc_start' is assigned a value but never used.","'utc_end' is assigned a value but never used.","Duplicate key 'eventColor'.","'Meta' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'pristine' is assigned a value but never used.","'invalid' is assigned a value but never used.","'btn' is assigned a value but never used.","'uploadButton' is assigned a value but never used.","'Progress' is defined but never used.","'EventPageWebSocketInstance' is defined but never used.","'calendarEventActions' is defined but never used.","'RangePicker' is assigned a value but never used.","'socialCalCellId' is assigned a value but never used.","'userPostUserId' is assigned a value but never used.","'ClockCircleOutlined' is defined but never used.","'AvatarGroups' is defined but never used.","'Spin' is defined but never used.","'searchList' is assigned a value but never used.","'followers' is assigned a value but never used.","'calendarOwnerUsername' is assigned a value but never used.","'socialEvents' is assigned a value but never used.","'selectFirstDay' is assigned a value but never used.","'selectedDate' is assigned a value but never used.","'toDoStuff' is assigned a value but never used.","'Popover' is defined but never used.","'RadiusBottomleftOutlined' is defined but never used.","'RadiusBottomrightOutlined' is defined but never used.","'calendarId' is assigned a value but never used.","'instanceEvent' is assigned a value but never used.","'Component' is defined but never used.","'ReduxAddEventForm' is defined but never used.","'CalendarForm' is defined but never used.","'pStyle' is assigned a value but never used.","'DescriptionItem' is assigned a value but never used.","'Message' is defined but never used.","'EllipsisOutlined' is defined but never used.","'FolderAddTwoTone' is defined but never used.","'ShareAltOutlined' is defined but never used.","'EditTwoTone' is defined but never used.","'heart' is defined but never used.","'commentPic' is defined but never used.","'QueueAnim' is defined but never used.","'profilePic' is assigned a value but never used.","'temp' is assigned a value but never used.","'viewPersonPage' is assigned a value but never used.","'success' is assigned a value but never used.","'like_people' is assigned a value but never used.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","Duplicate key 'marginLeft'.","'ava2' is defined but never used.","'facebook' is defined but never used.","'instagram' is defined but never used.","'twitter' is defined but never used.","'Menu' is defined but never used.","'Dropdown' is defined but never used.","'SideMenu' is defined but never used.","'Header' is assigned a value but never used.","'Content' is assigned a value but never used.","'renderFriendSelect' is assigned a value but never used.","'eventId' is assigned a value but never used.","'uploadPost' is defined but never used.","'setTemp' is assigned a value but never used.","'setImage' is assigned a value but never used.","'setStage' is assigned a value but never used.","no-redeclare","'temp' is already defined.","redeclared","'location' is defined but never used.","'createElement' is defined but never used.","'DislikeOutlined' is defined but never used.","'LikeOutlined' is defined but never used.","'DislikeFilled' is defined but never used.","'FireTwoTone' is defined but never used.","'dayStartDate' is assigned a value but never used.","'radioStyle' is assigned a value but never used.","'friendListChild' is assigned a value but never used.","'token' is assigned a value but never used.","'MonthPicker' is assigned a value but never used.","'content' is assigned a value but never used.","'errors' is assigned a value but never used.","'followList' is assigned a value but never used.","'users' is assigned a value but never used.","'setUsers' is assigned a value but never used.","'TweenOneGroup' is defined but never used.","'PropTypes' is defined but never used.","'dayPic' is defined but never used.","'friendsPic' is defined but never used.","'bicylePic' is defined but never used.","'Animate' is defined but never used.","'count' is assigned a value but never used.","'title' is assigned a value but never used.","'textChildren2' is assigned a value but never used.","'post_url' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[476,476],"()",[494,494],[7502,7517],"\n             .",[29502,29504],".",[1704,1706],[2930,2932]]