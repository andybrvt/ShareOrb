# Generated by Django 3.0.7 on 2021-01-12 21:53

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('bio', models.TextField(blank=True, max_length=250, null=True)),
                ('profile_picture', models.ImageField(blank=True, default='PostPic/public/profile_pictures/default.png', upload_to='PostPic/public/profile_pictures/%Y/%m', verbose_name='profile_picture')),
                ('dob', models.DateField(blank=True, max_length=12, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=10, null=True)),
                ('slug', models.SlugField(blank=True)),
                ('private', models.BooleanField(default=False)),
                ('friends', models.ManyToManyField(blank=True, related_name='_user_friends_+', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('requested', models.ManyToManyField(blank=True, related_name='_user_requested_+', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CustomNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(default='friend', max_length=30)),
                ('unread', models.BooleanField(db_index=True, default=True)),
                ('verb', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('deleted', models.BooleanField(db_index=True, default=False)),
                ('emailed', models.BooleanField(db_index=True, default=False)),
                ('minDate', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('maxDate', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('eventId', models.BigIntegerField(blank=True, null=True)),
                ('pendingEventTitle', models.CharField(blank=True, max_length=222)),
                ('pendingEventContent', models.TextField(blank=True)),
                ('pendingEventLocation', models.CharField(blank=True, max_length=255)),
                ('pendingEventCurId', models.IntegerField(blank=True, null=True)),
                ('pendingCalendarOwnerId', models.IntegerField(blank=True, null=True)),
                ('pendingEventDate', models.DateField(blank=True, default=datetime.date.today)),
                ('pendingEventStartTime', models.TimeField(blank=True, default=datetime.time)),
                ('pendingEventEndTime', models.TimeField(blank=True, default=datetime.time)),
                ('actor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='actor_notification', to=settings.AUTH_USER_MODEL)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserSocialNormPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('owner_id', models.PositiveIntegerField()),
                ('post_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('post_id', models.PositiveIntegerField()),
                ('owner_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owner_type_post', to='contenttypes.ContentType')),
                ('post_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_type_post', to='contenttypes.ContentType')),
            ],
            options={
                'ordering': ['-post_date'],
            },
        ),
        migrations.CreateModel(
            name='UserFollowingRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('accept_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accept_request', to=settings.AUTH_USER_MODEL)),
                ('send_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='send_request', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserFollowing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('person_following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to=settings.AUTH_USER_MODEL)),
                ('person_getting_followers', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('caption', models.CharField(default='caption', max_length=1000)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
                ('like_count', models.IntegerField(blank=True, default=0)),
                ('like_condition', models.BooleanField(db_index=True, default=False)),
                ('people_like', models.ManyToManyField(blank=True, related_name='likeUser', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='postUser', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created_at', '-updated_at'),
            },
        ),
        migrations.CreateModel(
            name='PendingSocialPics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('itemImage', models.ImageField(blank=True, upload_to='post_pictures/%Y/%m', verbose_name='post_picture')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pending_pic_creator', to=settings.AUTH_USER_MODEL)),
                ('notification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attached_noti', to='userprofile.CustomNotification')),
            ],
        ),
        migrations.CreateModel(
            name='ImageModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mainimage', models.ImageField(blank=True, upload_to='post_pictures/%Y/%m', verbose_name='post_picture')),
                ('imageList', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='userprofile.Post')),
            ],
        ),
        migrations.CreateModel(
            name='FriendRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_user', to=settings.AUTH_USER_MODEL)),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=80)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('body', models.TextField(blank=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(blank=True, default=False)),
                ('comment_like_count', models.IntegerField(blank=True, default=0)),
                ('comment_like_condition', models.BooleanField(db_index=True, default=False)),
                ('commentUser', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='userComment', to=settings.AUTH_USER_MODEL)),
                ('comment_people_like', models.ManyToManyField(blank=True, related_name='commenPeopleList', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='userprofile.Post')),
            ],
        ),
    ]
